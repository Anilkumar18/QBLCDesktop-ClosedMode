using BarTender;
using Interop.QBFC13;
using LabelConnector;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.Odbc;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Printing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;
using System.Xml;
using Telerik.WinControls.UI;

namespace QBLC
{
    public partial class frmPrintLabel : Form
    {
        LabelConnector.net.wxbug.api.WeatherBugWebServices mobjServices = null;
        ArrayList alSingleSalesOrderLineItem = new ArrayList();
        ArrayList alclsEditedsalesorderLine = new ArrayList();
     
        // public event EventHandler ShowGriddataEvent;
        ArrayList alData = null; //for printing shipaddress
        ArrayList alInvoiceData = null;
        ArrayList alTopInvoicelist = null;
        ArrayList TaskSalesOrderfields = null;
        public string GetConfigval { get; set; }
        string poErrormessage;
        string InvoiceCustomerName = "";
        //public string GetConfigSearch {get; set; }
        int lblfile1 = 0;
        clsDBWork objDBWork;
        double dblInvoiceToQuantity = 0;
        clsItemDetails lobjitem = new clsItemDetails();
        clsRdpUser lobjrRdpUser = new clsRdpUser();
        clsTrialApplication lobjclsTrialApplication = new clsTrialApplication();
        bool blnconnecheck = false;
        string gridcolumnName = string.Empty;
        Dictionary<string, string> objtempdictionary = new Dictionary<string, string>();
        ArrayList arrtxnnolist = new ArrayList();
        List<QBLC.clsPurchaseOrder.FilterReceiptTransDate> list = new List<QBLC.clsPurchaseOrder.FilterReceiptTransDate>();
        List<QBLC.clsPurchaseOrder.FilterReceiptTransDate> txndatelist = new List<QBLC.clsPurchaseOrder.FilterReceiptTransDate>();
        List<QBLC.clsPurchaseOrder.FilterReceiptTransDate> listnew = new List<QBLC.clsPurchaseOrder.FilterReceiptTransDate>();
        List<QBLC.clsInvoiceLine.Itemcustomfields> lobjcustDataExt = new List<QBLC.clsInvoiceLine.Itemcustomfields>();
        List<QBLC.clsInvoiceLine.Itemcustomfields> lobjinvoicecustDataExforprint = new List<QBLC.clsInvoiceLine.Itemcustomfields>();
        List<QBLC.clsInvoice> lobjinvoicecustomfields = new List<QBLC.clsInvoice>();
        List<QBLC.clsInvoiceLine.Itemcustomfields> lobjcustDataExtPrint = null;
        List<QBLC.clsSalesOrderLine.Itemcustomfields> lobjsoitemcustfields = new List<QBLC.clsSalesOrderLine.Itemcustomfields>();
        List<QBLC.clsSalesOrderLine.Itemcustomfields> lobjsodaterangeitemcustfields = new List<QBLC.clsSalesOrderLine.Itemcustomfields>();
        List<clsSalesReceiptLineItems.Itemcustomfields> lobjsritemcustfields = new List<clsSalesReceiptLineItems.Itemcustomfields>();
        List<clsSalesReceiptLineItems.Itemcustomfields> lobjsrdaterangeitemcustfields = new List<clsSalesReceiptLineItems.Itemcustomfields>();
        List<clsInvoiceLine.Itemcustomfields> listinvcust = new List<clsInvoiceLine.Itemcustomfields>();
        clsTemplateLabelXmlwork lobjporeceiptTemplatexml = new clsTemplateLabelXmlwork();
        List<KeyValuePair<string, string>> invoiceserialnumberlist = new List<KeyValuePair<string, string>>();
        clsPurchaseOrder objPurchaseOrder;
        clsSalesOrder objSalesOrder;
        clsSalesReceipt objSalesReceipt;
        clsSalesReceiptLineItems objSalesReceiptLine;
        clsInvoice objInvoice;
        clsPurchaseOrderLine objPurchaseOrderLine;
        clsSalesOrderLine objSalesOrderLine;
        clsInvoiceLine objInvoiceLine;
        clsInvoiceLine objclsInvoiceLine1;
        frmLabelConfig objfrmLabel = frmLabelConfig.GetInstance();
        FrmDivQuantitySetting objfrmDivQtySetting = FrmDivQuantitySetting.GetInstance();
        FrmPOScreenSetting objfrmPOScreenSetting = FrmPOScreenSetting.GetInstance();
        frmInvoicePrintModeConfig objfrmInvoicesetting = frmInvoicePrintModeConfig.GetInstance();
        //FrmPrinterSetting objfrmprintersetting = FrmPrinterSetting.GetInstance();
        //frmInvoicePrintModeConfig objfrmInvoicePrintModeConfig = frmInvoicePrintModeConfig.GetInstance();
        Dictionary<string, string> lobjDataExtension;
        List<Dictionary<string, string>> lobjDataExtension1;    
        private Font verdana10Font;
        double poreceiptvalue = 0;
        String printTempName = string.Empty;
        private int lintLastItemIndex1;
        private int lintLastItemIndex2;
        string lstrInvnumber = string.Empty;
        DataTable dtPrintInvoicedata = null;

        private bool flCloseConfirm = true;

        private StreamReader reader;
        bool flag = false;
        string FileToCopy = "";
        string NewCopy = "";
        string FilePath = "";
        string lstrFileName = string.Empty;
        ArrayList objlastscanItem = new ArrayList();
        string mstrLabelName = string.Empty;
        //for custom field label value check
        string lstrFilterDisplay = string.Empty;
        string lstrMultiInvoiceMode = string.Empty;
        string lstrMultipleSoMode = string.Empty;
        string lstrMultipleSRMode = string.Empty;
        string lstrTxnLineId = string.Empty;
        string filePath = string.Empty;
        string lstrimgfile = string.Empty;
        // string lstrshipmethod = string.Empty;
        private int cellindex = 0;
        // clsItemDetails lobjItemsData = new clsItemDetails(); //new
        //ArrayList lobjItemslist = new ArrayList(); //new

        QBConfiguration lobjQBConfiguration;
        string lstrQBFileMode = string.Empty;
        ArrayList alInvoiceLineItems = new ArrayList();
        List<clsPurchaseOrderLine> lobjclsPurchaseOrderLine = new List<clsPurchaseOrderLine>();
        //List<clsPurchaseOrderLine> lobjcopyPurchaseOrderLine = null;
        ArrayList arrReceiptCustomItems = new ArrayList();
        int intGridRowCount1 = 0;
        int intGridRowCount2 = 0;

        // ***Start*** Added on 03-July-2017 Declaring default values

        string strinstallDate = string.Empty;
        string strappStatus = string.Empty;
        string strappMode = string.Empty;
        string strTrialmodeDuration = string.Empty;

        public static string GetRemainingDays = string.Empty;

        public static string ActivationStatus = string.Empty;
        Thread Sessionthread;
        //public enum appStatus
        //{
        //    Trail,
        //    Active,
        //    Deactive
        //}

        //appStatus _appStat;
        //public appStatus appStat
        //{
        //    get
        //    {
        //        return _appStat;
        //    }
        //    set
        //    {
        //        _appStat = value;
        //    }
        //}


        // ***End*** Added on 03-July-2017 Declaring default values


        public bool GridPanel
        {
            set { this.pnlhead.Visible = value; }
            get { return this.pnlhead.Visible; }
        }
        public void SetConfirm(bool confirm)
        {
            flCloseConfirm = confirm;
        }

        public void SetTextLicenseMenuItem(bool trial)
        {
            if (trial)
            {
                activToolStripMenuItem.Text = "Activate";
            }
            else
            {
                activToolStripMenuItem.Text = "Activated";
            }
        }
        public frmPrintLabel() // added "bool trial" by srinivas on 27-Nov-2017
        {
            InitializeComponent();
          
        }
        public frmPrintLabel(bool trial) // added "bool trial" by srinivas on 27-Nov-2017
        {


            InitializeComponent();

            objfrmLabel.objdelLabel += new delLabel(this.fnGenerateLabelCB);
            objfrmLabel.objdelOrderType += new delOrderType(this.fnGetOrderType);
            objfrmDivQtySetting.objDCLabel += new showDcNumber(this.fnshowFields);
            objfrmPOScreenSetting.objshowheader += new showHeader(this.fnshowheadertext);
            objfrmInvoicesetting.objdelinvoicesetting += new delginvoicesetting(this.fnshowinvoicedata);
            //objfrmprintersetting.objprintername += new showPrinterName(this.fnshowprintername);
            //objfrmInvoicePrintModeConfig.flipQty += new showinvoiceflipQty(this.fnshowFlipInvQty);
            //objfrmLabel.objdeldatefilterType += new deldatefilterType(this.fnOrderFilter);
            this.WindowState = FormWindowState.Maximized;
            // lobjQBConfiguration = new QBConfiguration();
            //this.MaximizeBox = false;
            //this.Text = "Print Label Item";

            this.Text = "Accuware-Label Connector";
            //if (trial == false) //13-Mar-2018 if status is LICENSE_OK
            //{
            //    this.activToolStripMenuItem.Text = "Activated";
            //}

            //Below code is commented on 24-July-2017 as pre instructions by steve. Accuware do not required Trail version for now
            ////Get Trail application status and remaining days: Date 07-July-2017
            //var TrialappStatus = lobjclsTrialApplication.ProductTrial();
            //if (TrialappStatus.Item3 == 2) //if product is made active
            //{
            //    ActivationStatus = "Active";

            //}
            //else
            //{
            //    GetRemainingDays = TrialappStatus.Item1 != "Error" ? TrialappStatus.Item1 : string.Empty;

            //    if (!string.IsNullOrEmpty(TrialappStatus.Item2))
            //    {
            //        strTrialmodeDuration = TrialappStatus.Item2;
            //    }
            //    ActivationStatus = "Not Active";
            //}


        }

        [DllImport("Winspool.drv")]
        private static extern bool SetDefaultPrinter(string printerName);

        Interop.QBFC13.IQBSessionManager lQBSessionManager = default(Interop.QBFC13.IQBSessionManager);
        LabelConnector.QuickBooksAccount moQuickBooksAccountConfig = null;
        LabelConnector.Serializer loSerializer = new LabelConnector.Serializer();

        private void frmPrintLabel_Load(object sender, EventArgs e)
        {
          

            this.toolStripReportMenu.Visible = false;
            printWeatherLabelToolStripMenuItem.Visible = false;


            if (System.Windows.Forms.Application.OpenForms["FrmRegistration"] == null)
            {
                LabelConnector.FrmRegistration lobjLabelConnectorSettings = new LabelConnector.FrmRegistration();
                pnlhead.Visible = false;
              
                lobjLabelConnectorSettings.ShowDialog();
                pnlhead.Visible = true;
            }

             Sessionthread = new Thread(() =>
            {
                while (true)
                {
                    fncSessionProcess();
                
                }
            });
          
            Sessionthread.Start();

         

           

            //To show Shima Seiki Report Option functionality  hide other menu :Date 14-Nove
            //this.tsmenuPrintByItemSearch.Visible = false;
            //this.settingsToolStripMenuItem1.Visible = false;
            //this.printWeatherLabelToolStripMenuItem.Visible = false;
            //this.toolStripReceiptmnu.Visible = false;
            //this.toolStripLabelDesign.Visible = false;
            //this.activToolStripMenuItem.Visible = false;
            //this.btnGetOrder.Enabled = false;
            //this.txtOrderNumber.Enabled = false;

            ////Open Report Option by Defalut
            //if (ActiveMdiChild != null)
            //    ActiveMdiChild.Close();

            //if (System.Windows.Forms.Application.OpenForms["FrmInventoryReport"] == null)
            //{
            //    LabelConnector.FrmInventoryReport lobjLabelConnectorSettings = new LabelConnector.FrmInventoryReport();
            //    pnlhead.Visible = false;
            //    //lobjLabelConnectorSettings.Text = "Print by Item";
            //    lobjLabelConnectorSettings.MdiParent = this;
            //    lobjLabelConnectorSettings.Dock = DockStyle.Fill;

            //    lobjLabelConnectorSettings.Show();
            //}


            //...shima seiki report option end....//

            //for shima report comment following all block

            //remove weateher label option Date: 01/13/2015

            foreach (Control ctl in this.Controls)
            {
                try
                {

                    MdiClient client = ctl as MdiClient;
                    if (!(client == null))
                    {
                        client.BackColor = this.BackColor;
                        break;
                    }

                }
                catch (InvalidCastException exc)
                {
                    // Catch and ignore the error if casting failed.
                }
            }



            lobjQBConfiguration = new QBConfiguration();
            lstrFilterDisplay = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FilterDisplay");

            //***Start*** 
            strappStatus = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("appStatus");

            //***end*** 
            //Added by TamilRk (10/12/2020)
            ModGlobal.DataStamp = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("DateFormate").ToString();
            ModGlobal.TimeStamp = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("TimeFormate").ToString();
            ModGlobal.DateShift = Convert.ToDouble(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("DateShift").ToString());

            //Hide Activate Link once application is authenticated done : Date 27-Apr-2018 : CO108 
            //Deacativate Activation link : Date 07-09-2018
            //if (lobjQBConfiguration.GetLabelConfigSettings("License").ToUpper().Trim() == "LICENSE_OK")
            //{
            //    this.activToolStripMenuItem.Visible = false; //Activate Link Hide : Date 27-Apr-2018
            //}
            //else
            //{
            //    this.activToolStripMenuItem.Visible = true;
            //}

            //lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");
            //if (lstrQBFileMode == "Close")
            //{

            //    lstrFileName = loSerializer.GetQuickBooksAccountConfigFile();
            //    if (File.Exists(lstrFileName))
            //    {
            //        moQuickBooksAccountConfig = loSerializer.ReadQuickBooksAccountConfig(lstrFileName);
            //        if (moQuickBooksAccountConfig != null)
            //        {
            //            lQBSessionManager = LabelConnector.QBHelper.OpenQBConnection(moQuickBooksAccountConfig.CompanyFile, moQuickBooksAccountConfig.FileOpenMode);

            //        }
            //    }
            //}

            //show route no textbox when multi inv has route no.
            if (!string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("CustomerCustomFieldText")))
            {
                lblrouteno.Text = Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("CustomerCustomFieldText"));
                txtrouteno.Visible = true;
                lblrouteno.Visible = true;
            }
            else
            {
                txtrouteno.Visible = false;
                lblrouteno.Visible = false;
            }

            GetConfigval = lobjQBConfiguration.GetLabelConfigSettings("OrderType");
            //Get order Type setting
            GetOrderTypeSetting(GetConfigval);
            //invpackaging.Visible = false;
            if (!invpackaging.Checked)
            {
                gbInvoicepackoption.Visible = false;
            }
            InitDataGrid();

            //fnGenerateLabelCB();
            // InitFilterDataGrid();
            AddPrinters();
            //btnfilterlabel.Visible = true;

            if (invpackaging.Checked == true)
            {
                btnfilterlabel.Visible = false;
            }
            else
            {
                if (rdbInvoice.Checked == true && rdbA.Checked == true)
                {
                    btnfilterlabel.Visible = true;
                }
            }
            //show DC Number and Carrier field visibility
            //if (rdbSO.Checked == true && rdbA.Checked == true)
            //{
            //    fnshowFields();

            //}

            dateTimePicker1.Value = DateTime.Now;
            dateTimePicker2.Value = DateTime.Now;


            //Get Date range filter setting :Date 06-09-2016
            //GetConfigSearch = lobjQBConfiguration.GetLabelConfigSettings("SearchInvBy");
            //if (GetConfigSearch == "Y")
            //{
            //    groupBox1.Visible = false;
            //    gbSearchByDate.Visible = true;
            //    DataGVItems.Visible = false;
            //    btnfilterlabel.Visible = false;
            //    chkSelectAll.Visible = false;
            //    InitFilterDataGrid();

            //}
            //else
            //{
            //    groupBox1.Visible = true;
            //    gbSearchByDate.Visible = false;
            //    DataGVItems.Visible = true;
            //    btnfilterlabel.Visible = true;
            //    chkSelectAll.Visible = true;
            //    dataGVSelectedOrders.Visible = false;
            //}

            //blnconnecheck = lobjitem.CheckQuickBooksConnection();
            //if (blnconnecheck == true)
            //{

            //    lobjItemslist = lobjItemsData.GetAllQuickBooksItemsDetails();
            //}
            //else
            //{
            //    MessageBox.Show("Please Open QuickBooks Company file", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //}
            //Thread.Sleep(1000);

            //grpWeartherInfo.Visible = false;
            txtOrderNumber.Focus();

            rdbInvsingle.Visible = true;

            rdbA.Checked = true;
            rdbInvmultiple.Checked = true;

            //Get Logged in User Name & Write to File : Date 16-Aug-2018

            //Z11O9bfpc2UNcny3jk0nFw == 1

            //exalggPsR/Z88KGbN5U+tQ == 2

            //XS2JsWPaxsxMVfk6eDMlGQ == 3

            //GVyeu0LCng0CydwGaTCTrQ == 4

            //mf9jQw4Zo/L0BShpgjzIow == 5

            ArrayList arrRdpUserList = new ArrayList();
            //lobjQBConfiguration = new QBConfiguration();
            string strRdpUser = string.Empty;
            string strallowedconnetion = string.Empty;

            int lntConfigRdpUserCount = 0;

            //int lntusercount = 0;

            // string lspwd = clsUtil.Encrypt(lobjQBConfiguration.GetLabelConfigSettings("RdpUser"));

            //strRdpUser = "IMCGS//alyxtechnology01"; // clsRdpUser.GetRdpUserName(); 

            // blnfile = lobjrRdpUser.WriteRdpUsers(strRdpUser);
            //check if same login user exist in xml file then do not increase loginuserCount in app.config
            //if (!clsRdpUser.IsRdpUserExistInXml(strRdpUser)) //check login user does not exist in file
            //  lntusercount = Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("LoginUserCount")) + 1;
            // lobjQBConfiguration.SaveLabelFilePathSettings(lntusercount.ToString(), "LoginUserCount");


            // var uniqueIdentifier = Guid.NewGuid();//Will be generate unique value

            try
            {
                //for 4 users current seting
                lntConfigRdpUserCount = Convert.ToInt32(clsUtil.Decrypt(lobjQBConfiguration.GetLabelConfigSettings("RdpUser")));

                strRdpUser = clsRdpUser.GetRdpUserName();  //"IMCGS//alyxtechnology02";


                // int givenlogincount = 0;
                // int usedlogincount = 0;
                // int availablelogincount = 0;
                // givenlogincount = Convert.ToInt32(clsUtil.Decrypt(lobjQBConfiguration.GetLabelConfigSettings("RdpUser")));

                //usedlogincount = Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("LoginUserCount")) + 1;

                // availablelogincount = availablelogincount - usedlogincount;


                //check no of user permitted to login
                if (clsRdpUser.RdpUserCount() < lntConfigRdpUserCount)
                {
                    lobjrRdpUser.WriteRdpUsers(strRdpUser);
                    //write user login count in app.config
                    // if (blnfile == true)
                    // {
                    // int lntusercount = 0;
                    // lntusercount = Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("LoginUserCount")) + 1;
                    // lobjQBConfiguration.SaveLabelFilePathSettings(lntusercount.ToString(), "LoginUserCount");
                    // }

                }
                else
                {
                    if (!clsRdpUser.IsRdpUserExistInXml(strRdpUser)) //check login user does not exist in file
                    {
                        DialogResult dialog = new DialogResult();

                        if (lntConfigRdpUserCount == 1)
                        {
                            strallowedconnetion = "connection" + "(" + Convert.ToString(lntConfigRdpUserCount) + ")";
                        }
                        else
                        {
                            strallowedconnetion = "connections" + "(" + Convert.ToString(lntConfigRdpUserCount) + ")";
                        }

                        dialog = MessageBox.Show("Terminal Server has exceeded max number of allowed " + strallowedconnetion + "", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                        if (dialog == DialogResult.OK)
                        {
                            System.Environment.Exit(1);
                        }
                    }


                    //if (!clsRdpUser.IsRdpUserExistInXml(strRdpUser)) //check login user does not exist in file
                    //{
                    //    if (lntConfigRdpUserCount == 1)
                    //    {
                    //        strallowedconnetion = "connection" + "(" + Convert.ToString(lntConfigRdpUserCount) + ")";
                    //    }
                    //    else
                    //    {
                    //        strallowedconnetion = "connections" + "(" + Convert.ToString(lntConfigRdpUserCount) + ")";
                    //    }
                    //    DialogResult dialog = new DialogResult();

                    //    dialog = MessageBox.Show("Terminal Server has exceeded max number of allowed " + strallowedconnetion + "", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    //    if (dialog == DialogResult.OK)
                    //    {
                    //        System.Environment.Exit(1);
                    //    }

                    //}
                    //else if (clsRdpUser.RdpUserCount() > lntConfigRdpUserCount)
                    //{

                    //    DialogResult dialog = new DialogResult();

                    //    dialog = MessageBox.Show("Set Correct User limit count in config file!!!", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    //    if (dialog == DialogResult.OK)
                    //    {
                    //        System.Environment.Exit(1);
                    //    }


                    //}
                }

            }
            catch (Exception exp)
            {
                DialogResult dialog = new DialogResult();

                dialog = MessageBox.Show("Set Correct User limit count in config file!!!", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                if (dialog == DialogResult.OK)
                {
                    System.Environment.Exit(1);
                }

            }

            //check if udf print label exist
            //if (lobjQBConfiguration.GetLabelConfigSettings("PrintLabelType") == "U")
            //{
            //    if (clsUtil.IsUDFLabelExist() == false)
            //    {
            //        DialogResult dialoglblexist = new DialogResult();

            //        dialoglblexist = MessageBox.Show("No Label designs have been created please proceed to the Label designer to create your first template.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //        if (dialoglblexist == DialogResult.OK)
            //        {
            //            //System.Environment.Exit(1);
            //        }
            //    }
            //}

        }
        public async Task QBConnection()
        {
            await Task.Run(() =>
            {
                CheckQB();
            });
        }
        private void CheckQB()
        {
            Thread thread = new Thread(() =>
            {
                QBconnectionupdate(lobjitem.CheckQuickBooksConnection());
            });
            thread.Start();
            System.Windows.Forms.Application.ExitThread();
        }
        private void AddPrinters()
        {
            cmbLabelPrinter.Items.Add("Select Printer");
            foreach (string strPrinter in PrinterSettings.InstalledPrinters)
            {
                cmbLabelPrinter.Items.Add(strPrinter);
            }
            PrintDocument lobjDocument = new PrintDocument();
            //cmbLabelPrinter.SelectedItem = lobjDocument.PrinterSettings.PrinterName;
            cmbLabelPrinter.SelectedIndex = 0; //11-Apr-2017
        }


        private void GetOrderTypeSetting(string strOrderType)
        {
            // GetConfigval = lobjQBConfiguration.GetLabelConfigSettings("OrderType");
            switch (strOrderType)
            {
                //Invoice
                case "InvSingle":
                    rdbInvoice.Checked = true;
                    rdbB.Checked = true;


                    // rdbSO.Enabled = false;
                    // rdbPO.Enabled = false;

                    // rdbA.Enabled = false;
                    // rdbC.Enabled = false;
                    // rdbd.Enabled = false;

                    break;
                case "InvMultiple":
                    rdbInvoice.Checked = true;
                    rdbA.Checked = true;


                    // rdbSO.Enabled = false;
                    // rdbPO.Enabled = false;

                    // rdbB.Enabled = false;
                    // rdbC.Enabled = false;
                    // rdbd.Enabled = false;

                    break;
                //case "InvPackage":
                //    rdbInvoice.Checked = true;
                //    rdbC.Checked = true;
                //    break;
                case "InvPackA":
                    invpackaging.Checked = true;
                    rdbInvmultiple.Checked = true;
                    break;
                case "InvPackB":
                    invpackaging.Checked = true;
                    rdbInvsingle.Checked = true;
                    break;
                //sales order
                case "SoSingle":
                    rdbSO.Checked = true;
                    rdbB.Checked = true;

                    //  rdbInvoice.Enabled = false;
                    //rdbPO.Enabled = false;

                    // rdbA.Enabled = false;
                    // rdbC.Enabled = false;
                    // rdbd.Enabled = false;

                    break;
                case "SoMultiple":
                    rdbSO.Checked = true;
                    rdbA.Checked = true;

                    // rdbInvoice.Enabled = false;
                    //rdbPO.Enabled = false;

                    // rdbB.Enabled = false;
                    // rdbC.Enabled = false;
                    // rdbd.Enabled = false;

                    break;
                case "SoPackage":
                    rdbSO.Checked = true;
                    rdbC.Checked = true;

                    // rdbInvoice.Enabled = false;
                    // rdbPO.Enabled = false;

                    // rdbB.Enabled = false;
                    // rdbA.Enabled = false;
                    // rdbd.Enabled = false;
                    break;
                case "SoScan":
                    rdbSO.Checked = true;
                    rdbd.Checked = true;

                    // rdbInvoice.Enabled = false;
                    //  rdbPO.Enabled = false;

                    // rdbB.Enabled = false;
                    // rdbA.Enabled = false;
                    // rdbC.Enabled = false;
                    break;
                //Purchase Order
                case "PoMultiple":
                    rdbPO.Checked = true;
                    rdbA.Checked = true;

                    // rdbInvoice.Enabled = false;
                    // rdbSO.Enabled = false;

                    //rdbB.Enabled = false;
                    break;
                case "PoSingle":
                    rdbPO.Checked = true;
                    rdbB.Checked = true;

                    //rdbInvoice.Enabled = false;
                    // rdbSO.Enabled = false;

                    // rdbA.Enabled = false;
                    break;
                case "SrMultiple":
                    rdbSR.Checked = true;
                    rdbA.Checked = true;
                    break;
                default:
                    rdbInvoice.Checked = true;
                    rdbA.Checked = true;
                    break;
            }
        }
        private async Task <ArrayList> GetDataSource()
        {
            string strCriteria = "";
            string dispautomanualcheck = string.Empty;
         
            ArrayList alData = new ArrayList();
            lobjQBConfiguration = new QBConfiguration();
            lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");
          
            try
            {

                if (rdbInvoice.Checked == true && rdbA.Checked == true)
                {
                    dispautomanualcheck = lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck");

                    if (dispautomanualcheck.Trim().ToUpper() == "AUTO")
                    {

                        cmbauto.Visible = false;
                        cmbLabelName.Visible = false;
                        Label1.Visible = false;
                    }
                    else
                    {
                        Label1.Visible = true;
                        cmbLabelName.Visible = false;
                        cmbauto.Visible = false;
                    }
                }
                else
                {

                    Label1.Visible = true;
                    cmbLabelName.Visible = false;
                    cmbauto.Visible = false;
                }

                if (txtOrderNumber.Text.Trim() != "")
                {
                    strCriteria = txtOrderNumber.Text.Trim();
                }
                else
                {
                    strCriteria = "1=1";
                }

                if (rdbPO.Checked == true)
                {
                    objPurchaseOrder = new clsPurchaseOrder();
                    if (lstrQBFileMode == "Close")
                    {
                         alData = objPurchaseOrder.GetPOList(strCriteria, LabelConnector.QBHelper.ConnectQBCloseMode(lobjQBConfiguration.GetLabelConfigSettings("CompanyFilePath")));
                        if (((Interop.QBFC13.QBSessionManager)lQBSessionManager != null))
                        {
                            LabelConnector.QBHelper.CloseQBConnection((Interop.QBFC13.QBSessionManager)lQBSessionManager);
                        }
                  
                    }
                    else
                    {
                        if (rdbPO.Checked == true && rdbA.Checked == true) //mulitple po check
                        {
                            alData = objPurchaseOrder.GetMulitiplePO(strCriteria, out txndatelist);
                        }
                        else
                        {
                            alData = objPurchaseOrder.GetPOList(strCriteria);
                        }
                       
                    }
                }
                else if (rdbSO.Checked == true)
                {
                    objSalesOrder = new clsSalesOrder();
                    if (lstrQBFileMode == "Close")
                    {
                        alData.Add("Close");
                       return alData;
                       // alData = objSalesOrder.GetSOList(strCriteria, lQBSessionManager, moQuickBooksAccountConfig);
                    }
                    else
                    {
                        await Task.Run(() => {
                            alData = objSalesOrder.GetGridHeaderSOList(strCriteria);
                            });
                        
                       
                    }
                }
                else if (rdbSR.Checked == true)
                {
                    objSalesReceipt = new clsSalesReceipt();
                    if (lstrQBFileMode == "Close")
                    {
                        alData.Add("Close");
                        return alData;
                        // alData = objSalesReceipt.GetSRList(strCriteria, lQBSessionManager, moQuickBooksAccountConfig);
                    }
                    else
                    {
                        alData = objSalesReceipt.GetSRList(strCriteria);
                    }
                }
                else
                {
                    objInvoice = new clsInvoice();
                    if (lstrQBFileMode == "Close")
                    {
                        alData.Add("Close");
                        return alData;
                        // alData = objInvoice.GetInvoiceList(strCriteria, lQBSessionManager, moQuickBooksAccountConfig);
                    }
                    else
                    {
                        alData = objInvoice.GetInvoiceList(strCriteria);
                    }
                }
                list = txndatelist;
                return alData;
            }
            catch (Exception ex)
            {
                throw;
                return null;
            }
        }

        private void DataGVOrders_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if (Convert.ToString(DataGVOrders.CurrentRow.Cells[0].Value) == "")
                {
                    DataGVItems.DataSource = null;
                    gbOrderDetail.Visible = false;
                }
            }


        }

        private void rdbPO_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
            rdbB.Checked = true;
            rdbC.Enabled = false;
            rdbA.Checked = true;
            listviewprintingItem.Visible = false;
            RadioButton btn = sender as RadioButton;
            if (!btn.Checked)
            {
                lbltempName.Text = "";
                cmbLabelName.Items.Clear();
             
            }
        }

        private void Clear()
        {
            try
            {

                //grpWeartherInfo.Visible = false;
                dataGVSelectedorderheader.Rows.Clear();
                dataGVSelectedOrders.Rows.Clear();
                dateTimePicker1.Value = DateTime.Now;
                dateTimePicker2.Value = DateTime.Now;
                DataGVOrders.Rows.Clear();
                DataGVItems.Rows.Clear();
                chkorderheader.Checked = false;
                InitDataGrid();
                gbOrderDetail.Enabled = false;
                //below line to make groupbox visible false
                gbInvoiceDetail.Enabled = false;
                // txtOrderNumber.Text = ""; //commented to not clear textbox
                if (cmbLabelName.Items.Count > 1)
                {
                    if (cmbLabelName.SelectedItem != null)
                    {
                        mstrLabelName = cmbLabelName.SelectedItem.ToString();
                        cmbLabelName.Items.Clear();
                    }
                }

                txtOrderNumber.Focus();
                lblfile1 = 0;
                if (rdbPO.Checked == true || rdbInvoice.Checked == true || rdbSR.Checked == true)
                {
                    rdbd.Enabled = false;
                    rdbC.Enabled = false;


                }
                else
                {
                    rdbd.Enabled = true;

                }
                if (rdbSO.Checked == true && rdbA.Checked == true)
                {
                    fnshowFields();

                }
                else
                {
                    pnldcnumber.Visible = false;
                    pnlcarrier.Visible = false;
                }
                if (invpackaging.Checked == true) //invoice packaging merging with master version
                {
                    rdbA.Enabled = true;
                    rdbB.Enabled = true;
                    rdbC.Enabled = false;
                    rdbd.Enabled = false;
                    btnfilterlabel.Visible = false;
                    gbChooseOption.Visible = false;
                    if (gbInvoicepackoption.Visible == false)
                    {
                        gbInvoicepackoption.Visible = true;
                    }
                    //if (rdbA.Checked == true)
                    //{
                    //    DataGVItems.Visible = false;
                    //    btnfilterlabel.Visible = false;

                    //}
                    //else
                    //{
                    //    DataGVItems.Visible = true;
                    //    btnfilterlabel.Visible = true;

                    //}

                    if (rdbInvmultiple.Checked == true)
                    {

                        DataGVItems.Visible = false;

                        //pnlOrdernum.Visible = false;
                        // gbdate.Visible = true;
                        //chkordergrid.Visible = true;
                        //chkorderheader.Visible = true;
                        dataGVSelectedOrders.Visible = true;
                        if (chkSelectAll.Visible == true)
                        {
                            chkSelectAll.Visible = false;

                        }

                        if (chkreceiptall.Visible == true)
                        {
                            chkreceiptall.Visible = false;

                        }


                    }
                    else
                    {

                        // pnlOrdernum.Visible = true;
                        DataGVItems.Visible = true;
                        // gbdate.Visible = false;
                        //chkorderheader.Visible = false;
                        dataGVSelectedOrders.Visible = false;

                    }
                    dataGVSelectedOrders.Visible = false; //davino

                }
                else
                {
                    DataGVItems.Visible = true;
                    pnlOrdernum.Visible = true;

                    gbInvoicepackoption.Visible = false;
                    gbChooseOption.Visible = true; //!gbInvoicepackoption.Visible;
                    if (this.rdbSO.Checked == true && this.rdbC.Checked == true)
                    {
                        rdbC.Enabled = true;
                        //chkSelectAll.Visible = false; comment on 04-Feb-2020 for so packing BT mode


                    }
                    //else
                    //{
                    //    rdbC.Enabled = false;
                    //}

                }

                //PoQtypercase: Show/hide item custom field list
                //show filter value for customer custom field for invoice:26-June-2019
                if (rdbInvoice.Checked == true && rdbA.Checked == true)
                {
                    if (!string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("CustomerCustomFieldText")))
                    {

                        lblrouteno.Visible = true;
                        txtrouteno.Visible = true;
                        lblrouteno.Text = Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("CustomerCustomFieldText"));

                    }
                    else
                    {
                        lblrouteno.Visible = false;
                        txtrouteno.Visible = false;
                    }
                }
                else
                {
                    lblrouteno.Visible = false;
                    txtrouteno.Visible = false;

                }


                cmbcustomfield.Visible = false;
                lblselcustomfield.Visible = false;
                pnlmatchinvoicecount.Visible = false;
                //pnldelay.Visible = false;
                if (rdbInvoice.Checked == true && rdbA.Checked == true)
                {
                    btnfilterlabel.Visible = true;
                }
                else
                {
                    btnfilterlabel.Visible = false;
                }



            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //panel1.Height = 153;//fortestonly

        }

        private void rdbSO_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
            rdbC.Enabled = true; // make packaging option available for sales order :Date :04/27/2015
            rdbB.Checked = true;
            rdbA.Checked = true;
            listviewprintingItem.Visible = true;
            RadioButton btn = sender as RadioButton;
            if (!btn.Checked)
            {
                lbltempName.Text = "";
                cmbLabelName.Items.Clear();
              
            }
        }
        public string GetPrinttemplateOnApp(string filepath)
        {
            try
            {
                
                bool istemplateexist = false;
                clsTemplateLabelXmlwork lobjtemplatenames = new clsTemplateLabelXmlwork();
                string targetDir = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\");
                if (!Directory.Exists(targetDir))
                {
                    Directory.CreateDirectory(targetDir);

                }
                if (File.Exists(targetDir + Path.GetFileName(filepath)))
                {
                    File.Delete(targetDir + Path.GetFileName(filepath));

                }
                File.Copy(filepath, Path.Combine(targetDir, Path.GetFileName(filepath)), true);
                filepath = targetDir + Path.GetFileName(filepath);
                lobjtemplatenames = new clsTemplateLabelXmlwork();
                var templatenodecount = lobjtemplatenames.CheckImportXmlFormat(Path.GetFileNameWithoutExtension(filepath));
                if (templatenodecount.Count != 4)
                {
                    return "";
                }

                printTempName = lobjtemplatenames.CreateTempFolder(Path.GetFileNameWithoutExtension(filepath));
                fnGetUDFLabels();
                cmbLabelName.SelectedItem = Path.GetFileNameWithoutExtension(filepath);
                string tempType = "";
                if (rdbPO.Checked)
                {
                    tempType = "Purchase Order";
                }
                else if (rdbSO.Checked)
                {
                    tempType = "Sales Order";
                }
                else if (rdbInvoice.Checked)
                {
                    tempType = "Invoice";
                }
                else if (invpackaging.Checked)
                {
                    tempType = "Invoice";
                }
                else if (rdbSR.Checked)
                {
                    tempType = "Sales Receipts";
                }


                if (printTempName.ToLower().ToString() != tempType.ToLower())
                {
                    return "";
                }
                return filepath;
            }
            catch (Exception EX)
            {
                return "";
            }
        }
     
        private async void btnGetOrder_Click(object sender, EventArgs e)
        {
            try
            {
             
               //check if application is in trial period
               if (!string.IsNullOrEmpty(strTrialmodeDuration))
                {
                    MessageBox.Show(strTrialmodeDuration, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }


                //Get print mode type for barcode or user defined label
                if (lobjQBConfiguration.GetLabelConfigSettings("PrintLabelType") == "B")
                {
                    fnGenerateLabelCB();
                }
                else
                {
                    fnGetUDFLabels();
                }

                if (lobjQBConfiguration.GetLabelConfigSettings("CurrentPrinter") != "Screen")
                {
                    cmbLabelPrinter.SelectedItem = lobjQBConfiguration.GetLabelConfigSettings("CurrentPrinter");
                    cmbLabelPrinter.Enabled = false;
                }
                else
                {
                    clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
                    //from screen
                    if (rdbSO.Checked == true)
                    {
                        cmbLabelPrinter.SelectedItem = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("soprinter")) ? "Select Printer" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("soprinter"));

                        string template = GetPrinttemplateOnApp(string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("sotemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("sotemppath")));
                        if (template == "")
                        {
                            lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(template));
                            lbltempName.Text = "";
                        }
                        else
                        {
                            lbltempName.Text = Path.GetFileName(template);
                        }
                    }
                    else if (rdbPO.Checked == true)
                    {
                        cmbLabelPrinter.SelectedItem = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("poprinter")) ? "Select Printer" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("poprinter"));
                        string template = GetPrinttemplateOnApp(string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("potemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("potemppath")));
                        if (template == "")
                        {
                            lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(template));
                            lbltempName.Text = "";
                        }
                        else
                        {
                            lbltempName.Text = Path.GetFileName(template);
                        }
                    }
                    else if (rdbInvoice.Checked == true)
                    {

                        cmbLabelPrinter.SelectedItem = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invprinter")) ? "Select Printer" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("invprinter"));

                        string template = GetPrinttemplateOnApp(string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invtemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("invtemppath")));
                        if (template == "")
                        {
                            lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(template));
                            lbltempName.Text = "";
                        }
                        else
                        {
                            lbltempName.Text = Path.GetFileName(template);
                        }
                    }
                    else if (invpackaging.Checked == true)
                    {
                        cmbLabelPrinter.SelectedItem = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invpackprinter")) ? "Select Printer" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("invpackprinter"));
                        string template = GetPrinttemplateOnApp(string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invpatemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("invpatemppath")));
                        if (template == "")
                        {
                            lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(template));
                            lbltempName.Text = "";
                        }
                        else
                        {
                            lbltempName.Text = Path.GetFileName(template);
                        }
                    }
                    else if (rdbSR.Checked == true)
                    {
                        cmbLabelPrinter.SelectedItem = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("srprinter")) ? "Select Printer" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("srprinter"));
                        string template = GetPrinttemplateOnApp(string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("srtemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("srtemppath")));
                        if (template == "")
                        {
                            lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(template));
                            lbltempName.Text = "";
                        }
                        else
                        {
                            lbltempName.Text = Path.GetFileName(template);
                        }
                    }
                    Globalvariables.PrintTemplateName = lbltempName.Text;
                    if (Globalvariables.PrintTemplateStatus == "2" || Globalvariables.PrintTemplateGOStatus == "1")
                    {
                        lbltempName.Text = "";
                        Globalvariables.PrintTemplateStatus = "0";
                        Globalvariables.PrintTemplateGOStatus = "0";
                    }
                    cmbLabelPrinter.Enabled = true;
                }


                

                if (!string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()) && !(rdbInvmultiple.Checked == true && invpackaging.Checked == true)) //davino
                    {
                    txtdecnumber.Text = "";
                    txtcarrier.Text = "";
                    DataGVItems.ForeColor = Color.Black;//change grid fore color
                    DataGVItems.ReadOnly = true;//make items grid readonly
                    InvoiceCustomerName = "";
                    this.Cursor = Cursors.WaitCursor;

                    alData = await GetDataSource();

                    if (alData[0] == "Close")
                    {
                        MessageBox.Show("Your current Label connector QB connection is in closed mode. Please, enable the open mode in 'Connect QuickBooks' Label connector settings.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtOrderNumber.Focus();
                        return;
                    }

                    if (alData != null && alData.Count > 0)
                    {
                        if (rdbPO.Checked == true)
                        {
                            foreach (clsPurchaseOrder objPurchaseOrder in alData)
                            {
                                if (objPurchaseOrder != null)
                                {

                                    FillOrderGrid(alData);


                                    objPurchaseOrderLine = new clsPurchaseOrderLine();
                                    if (lstrQBFileMode == "Close")
                                    {
                                        if (rdbB.Checked == true || lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                        {
                                            ArrayList alPOLineItems = objPurchaseOrderLine.GetPOLine(objPurchaseOrder.RefNumber);
                                            if (((Interop.QBFC13.QBSessionManager)lQBSessionManager != null))
                                            {
                                                LabelConnector.QBHelper.CloseQBConnection((Interop.QBFC13.QBSessionManager)lQBSessionManager);
                                            }
                                            FillItemsGrid(alPOLineItems);
                                        }
                                    }
                                    else
                                    {

                                        if (rdbB.Checked == true || lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                        {
                                            ArrayList alPOLineItems = objPurchaseOrderLine.GetPOLine(objPurchaseOrder.RefNumber);
                                            FillItemsGrid(alPOLineItems);
                                        }
                                        else
                                        {           

                                            if (list.Count > 0)
                                            {
                                                var MinDate = (from d in list select d.ReceiptTrasnDate).Min();

                                                //Retrieve Maximum Date
                                                var MaxDate = (from d in list select d.ReceiptTrasnDate).Max();

                                                //receive items from purchase order : Date: 11-14-2016
                                                lobjclsPurchaseOrderLine = objPurchaseOrderLine.GetPOItemReceiptDetails(objPurchaseOrder.RefNumber, MinDate, MaxDate, out poErrormessage);


                                                if (lobjclsPurchaseOrderLine.Count > 0)
                                                {


                                                    var objreceiveItems = (from receiveItems in lobjclsPurchaseOrderLine
                                                                           orderby receiveItems.POReceivedItemCreatedTime descending
                                                                           select receiveItems).ToList();



                                                    this.DataGVItems.ReadOnly = false;
                                                    this.DataGVItems.EditMode = DataGridViewEditMode.EditOnEnter;

                                                    FillPOReceiptItemsGrid(objreceiveItems);


                                                }
                                                else
                                                {
                                                    //12-13-2016
                                                    this.txtQtyOnLabel.Visible = false;
                                                    this.txtQtyToPrint.Visible = false;
                                                    this.lblQtyOnLabel.Visible = false;
                                                    this.lblQtyToPrint.Visible = false;

                                                    MessageBox.Show(poErrormessage, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                                }
                                            }
                                        }

                                    }


                                }
                                else
                                {

                                    MessageBox.Show("No data found for Order No. :" + txtOrderNumber.Text, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                }
                            }
                        }
                        else if (rdbSO.Checked == true)
                        {
                            string strshippostcode = string.Empty;
                            string strMarkUpPriceField = string.Empty;
                            lobjDataExtension = null;
                            lobjDataExtension1 = null;
                            ArrayList alSOLineItems = new ArrayList(); //sopackaging
                            foreach (GetclassHeaderSalesOrder objSalesOrder in alData)
                            {
                                if (objSalesOrder != null)
                                {
                                 FillOrderGrid(alData); 
                                    

                                    //--------Code End to get weather information----------------
                                    objSalesOrderLine = new clsSalesOrderLine();
                                    if (lstrQBFileMode == "Close")
                                    {

                                        alSOLineItems = objSalesOrderLine.GetSOLine(objSalesOrder.RefNumber, lQBSessionManager, moQuickBooksAccountConfig);
                                        FillItemsGrid(alSOLineItems);
                                    }
                                    else
                                    {
                                        if (rdbSO.Checked == true && rdbC.Checked == true)//so packaging
                                        {
                                            alSOLineItems = objSalesOrderLine.GetSOPackagingLine(objSalesOrder.RefNumber, out lobjsoitemcustfields);
                                            FillItemsGrid(alSOLineItems);
                                        }
                                        else
                                        {
                                            
                                            strMarkUpPriceField = lobjQBConfiguration.GetLabelConfigSettings("MarkUpPriceField");
                                            alSOLineItems =  await objSalesOrderLine.GetGridSOLine(objSalesOrder.RefNumber, strMarkUpPriceField);

                                            FillSOItemGrid(alSOLineItems);
                                           
                                            if (DataGVItems.Rows.Count > 0)
                                            {
                                                DataGVItems.Rows[0].Cells[0].Selected = true;
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    MessageBox.Show("No data found for Order No. :" + txtOrderNumber.Text, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                            }
                        }
                        else if (rdbSR.Checked == true)
                        {
                            string strshippostcode = string.Empty;
                            string strMarkUpPriceField = string.Empty;
                            lobjDataExtension = null;
                            ArrayList alSRLineItems = new ArrayList(); //sopackaging
                            foreach (clsSalesReceipt objSalesReceipt in alData)
                            {
                                if (objSalesReceipt != null)
                                {
                                    FillOrderGrid(alData);

                                    //--------Code End to get weather information----------------
                                    objSalesReceiptLine = new clsSalesReceiptLineItems();
                                    if (lstrQBFileMode == "Close")
                                    {

                                        alSRLineItems = objSalesReceiptLine.GetSRLine(objSalesReceipt.RefNumber, lQBSessionManager, moQuickBooksAccountConfig);
                                        FillItemsGrid(alSRLineItems);
                                    }
                                    else
                                    {
                                        if (rdbSO.Checked == true && rdbC.Checked == true)//so packaging
                                        {
                                            alSRLineItems = objSalesReceiptLine.GetSRPackagingLine(objSalesReceipt.RefNumber, out lobjsritemcustfields);
                                            FillItemsGrid(alSRLineItems);
                                        }
                                        else
                                        {

                                            alSRLineItems = objSalesReceiptLine.GetSRLine(objSalesReceipt.RefNumber, "");
                                            FillItemsGrid(alSRLineItems);
                                        }


                                    }

                                }
                                else
                                {
                                    MessageBox.Show("No data found for Order No. :" + txtOrderNumber.Text, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                            }
                        }
                        else
                        {

                            //davno code merging 01/04/2017 
                            if (rdbInvsingle.Checked == true && invpackaging.Checked == true)
                            {
                                foreach (clsInvoice objInvoice in alData)
                                {
                                    if (objInvoice != null)
                                    {
                                        FillOrderGrid(alData);

                                        objInvoiceLine = new clsInvoiceLine();

                                        if (lstrQBFileMode == "Close")
                                        {
                                            ArrayList alInvoiceLineItems = objInvoiceLine.GetINVLine(objInvoice.RefNumber, lQBSessionManager, moQuickBooksAccountConfig);
                                            FillItemsGrid(alInvoiceLineItems);
                                        }
                                        else
                                        {
                                            ArrayList alInvoiceLineItems = objInvoiceLine.GetINVLinePackagingsingle(objInvoice.RefNumber, out lobjcustDataExt);
                                            FillItemsGrid(alInvoiceLineItems);
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.Show("No data found for Order No. :" + txtOrderNumber.Text, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }

                            }
                            else
                            {

                                foreach (clsInvoice objInvoice in alData)
                                {
                                    if (objInvoice != null)
                                    {
                                        FillOrderGrid(alData);


                                        objInvoiceLine = new clsInvoiceLine();



                                        if (lstrQBFileMode == "Close")
                                        {
                                            alInvoiceLineItems = objInvoiceLine.GetINVLine(objInvoice.RefNumber, lQBSessionManager, moQuickBooksAccountConfig);
                                            FillItemsGrid(alInvoiceLineItems);
                                        }
                                        else
                                        {

                                            //comment pack/unit code:Date 11-APR-2019
                                            if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PackperUnits") == "Y" && (rdbInvoice.Checked == true && rdbA.Checked == true))
                                            {
                                                alInvoiceLineItems = objInvoiceLine.GetINVLine(objInvoice.RefNumber, "Y", lobjQBConfiguration.GetLabelConfigSettings("PackUnitsCustomField").ToString().ToUpper());

                                            }
                                            else
                                            {

                                                alInvoiceLineItems = objInvoiceLine.GetINVLinePrintLabelRecords(objInvoice.RefNumber, Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("singleinvoiceprintlabel")).ToUpper().Trim(), out invoiceserialnumberlist);
                                                if (alInvoiceLineItems.Count == 0 && Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("singleinvoiceprintlabel")).ToLower().Replace(" ", string.Empty) == "printlabel")
                                                {
                                                    MessageBox.Show("No items exist with print label yes", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                    return;
                                                }

                                            }


                                            FillItemsGrid(alInvoiceLineItems);
                                        }

                                    }
                                    else
                                    {
                                        MessageBox.Show("No data found for Order No. :" + txtOrderNumber.Text, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    }
                                }
                            }
                        }

                        ShowhideControls();
                        if (rdbC.Checked == true || rdbd.Checked == true || rdbA.Checked == true || (rdbInvsingle.Checked == true && invpackaging.Checked == true)) //daviono code merging
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                DataGVItems.Rows[0].Selected = true;

                                if (rdbA.Checked == true)
                                {

                                    txtQtyOnLabel.Enabled = false;
                                    txtQtyToPrint.Enabled = false;
                                    txtQtyOnLabel.Visible = false;
                                    txtQtyToPrint.Visible = false;
                                    lblQtyOnLabel.Visible = false;
                                    lblQtyToPrint.Visible = false;
                                    chkSelectAll.Checked = true;

                                }
                                else
                                {
                                    txtQtyOnLabel.Enabled = false;
                                    lblQtyOnLabel.Visible = false;
                                    txtQtyOnLabel.Visible = false;
                                   
                                    if (lobjQBConfiguration.GetLabelConfigSettings("PrintLabelType") == "B")
                                    {
                                        if (rdbSO.Checked == true && rdbC.Checked == true)
                                        {
                                            txtQtyToPrint.Enabled = true;
                                            txtQtyToPrint.Visible = true;
                                            lblQtyToPrint.Visible = true;
                                            txtQtyToPrint.Text = "";
                                        }
                                        else
                                        {
                                            txtQtyToPrint.Enabled = false;
                                            txtQtyToPrint.Visible = false;
                                            lblQtyToPrint.Visible = false;
                                        }
                                    }
                                    else
                                    {
                                        txtQtyToPrint.Enabled = false;
                                        txtQtyToPrint.Visible = false;
                                        lblQtyToPrint.Visible = false;
                                    }
                                    if ((rdbInvsingle.Checked == true && invpackaging.Checked == true) || (rdbC.Checked == true && rdbSO.Checked == true)) //davino code merging
                                        chkSelectAll.Checked = true;
                                    else
                                        chkSelectAll.Checked = false;

                                }
                                if (rdbd.Checked == true) { txtcurrentscanitem.Focus(); }
                                chkSelectAll_Click(null, null);
                                if (rdbPO.Checked == true && rdbA.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0")//pwh
                                {
                                    chkreceiptall.Checked = true;
                                    chkreceiptall_Click(null, null); //add receipt data checkbox collection: pwh
                                }
                            }
                        }
                        else
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                DataGVItems.Rows[0].Selected = true;
                                if (rdbB.Checked == true && rdbPO.Checked == true) //if single po is checked : 17-Feb-2017
                                {
                                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y")
                                    {
                                        txtQtyToPrint.Text = DataGVItems.Rows[0].Cells[0].Value.ToString(); //Srinivas changes on 26-Feb-2015 
                                        txtQtyOnLabel.Text = "1"; //DataGVItems.Rows[0].Cells[0].Value.ToString(); // 16-Feb-2017
                                    }
                                    else
                                    {
                                        txtQtyToPrint.Text = "1";
                                        txtQtyOnLabel.Text = DataGVItems.Rows[0].Cells[0].Value.ToString();
                                    }
                                }
                                else
                                {
                                    txtQtyToPrint.Text = DataGVItems.Rows[0].Cells[0].Value.ToString();
                                    txtQtyOnLabel.Text = DataGVItems.Rows[0].Cells[0].Value.ToString();

                                }
                                txtQtyOnLabel.Visible = false;
                                txtQtyToPrint.Visible = false;
                                txtQtyOnLabel.Enabled = false;
                                txtQtyToPrint.Enabled = false;
                                lblQtyOnLabel.Visible = false;
                                lblQtyToPrint.Visible = false;
                            }
                        }
                    }
                    else
                    {
                        MessageBox.Show("No data found for Order No. :" + txtOrderNumber.Text, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtOrderNumber.Focus();
                    }
                    //show parent record unchecked
                    if (rdbSO.Checked == true && rdbA.Checked == true)
                    {
                        ParentItemRowDisable(DataGVItems);

                    }
                    
                }
            
                else
                {
                    bool? isresult = false;
                    string invnamemessage = string.Empty;
                    try
                    {

                        if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode") == "Close")
                        {
                            MessageBox.Show("Your current Label connector QB connection is in closed mode. Please, enable the open mode in 'Connect QuickBooks' Label connector settings.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }

                        cmbauto.Visible = false;

                        btnfilterlabel.Visible = false;

                        if (rdbInvmultiple.Checked == true && invpackaging.Checked == true)
                        {
                            dateTimePicker1.Format = DateTimePickerFormat.Custom;
                            dateTimePicker1.CustomFormat = System.Windows.Forms.Application.CurrentCulture.DateTimeFormat.ShortDatePattern;

                            dateTimePicker2.Format = DateTimePickerFormat.Custom;
                            dateTimePicker2.CustomFormat = System.Windows.Forms.Application.CurrentCulture.DateTimeFormat.ShortDatePattern;

                            this.Cursor = Cursors.WaitCursor;

                            //Show selected Invoice list
                            alTopInvoicelist = InvoicePackagingdatasource(dateTimePicker1.Text.ToString(), dateTimePicker2.Text.ToString());

                            //Get Invoice packaging data for printing
                            objInvoiceLine = new clsInvoiceLine();
                            alInvoiceData = objInvoiceLine.GetPackagingInvoiceItems(dateTimePicker1.Text.ToString(), dateTimePicker2.Text.ToString(), out lobjcustDataExt);


                            if (alTopInvoicelist != null && alTopInvoicelist.Count > 0)
                            {

                                if (lstrQBFileMode == "Close")
                                {
                                 
                                }
                                else
                                {
                                    dataGVSelectedorderheader.Visible = true;
                                    dataGVSelectedOrders.Visible = true;
                                    dataGVSelectedorderheader.Rows.Clear();
                                    InitFilterDataGrid();
                                    dataGVSelectedorderheader.Columns[1].HeaderText = "Inv.Created Date";
                                    dataGVSelectedorderheader.Columns[2].HeaderText = "Inv.Number";
                                    dataGVSelectedorderheader.Columns[4].Visible = false; //davino code merge
                                    dataGVSelectedorderheader.Columns[3].Width = 180;
                                    dataGVSelectedorderheader.Columns[3].HeaderText = "Bill Address";
                                    dataGVSelectedOrders.Visible = false;

                                    int i = 0;

                                    foreach (clsInvoice objclsInv in alTopInvoicelist)
                                    {
                                        dataGVSelectedorderheader.Rows.Add();
                                        dataGVSelectedorderheader.Rows[i].Cells[1].Value = objclsInv.TxnDate.ToShortDateString();
                                        dataGVSelectedorderheader.Rows[i].Cells[2].Value = objclsInv.RefNumber;
                                        dataGVSelectedorderheader.Rows[i].Cells[3].Value = objclsInv.BillAddressAddr1;
                                        i++;
                                    }

                                    if (dataGVSelectedorderheader.AutoSize == true)
                                    {
                                        dataGVSelectedorderheader.AutoSize = false;
                                    }
                                }


                                //below function to show and hide groupbox
                                ShowhideControls();

                                //Invoicepackaging condition added
                                if (rdbInvmultiple.Checked == true)
                                {
                                    txtQtyOnLabel.Visible = false;
                                    lblQtyOnLabel.Visible = false;
                                    if (cmbLabelName.SelectedIndex > 0)
                                        this.btnPrint.Enabled = true;
                                    else
                                        this.btnPrint.Enabled = false;

                                    dataGVSelectedorderheader.Rows[0].Selected = true;

                                    chkorderheader.Checked = true;
                                    chkorderheader_Click(null, null);
                                }


                                if (cmbLabelName.SelectedIndex > 0)
                                {
                                    this.btnPrint.Enabled = true;
                                }
                                else
                                {
                                    this.btnPrint.Enabled = false;
                                }



                            }
                            else
                            {
                                MessageBox.Show("No Invoice found for given dates.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                
                            }



                        }

                        else if (rdbInvoice.Checked == true || rdbSO.Checked == true || rdbSR.Checked == true)
                          
                                {
                            dateTimePicker1.Format = DateTimePickerFormat.Custom;
                            dateTimePicker1.CustomFormat = System.Windows.Forms.Application.CurrentCulture.DateTimeFormat.ShortDatePattern;

                            dateTimePicker2.Format = DateTimePickerFormat.Custom;
                            dateTimePicker2.CustomFormat = System.Windows.Forms.Application.CurrentCulture.DateTimeFormat.ShortDatePattern;

                            this.Cursor = Cursors.WaitCursor;
                            string customercustsettingvalue = string.Empty;
                            string configitemcustomfield = string.Empty;
                            bool qtyprintmultiple = false;
                            //Get Invoices
                            if (rdbInvoice.Checked == true)
                            {
                                using (new HourGlass())
                                {
                                    objInvoice = new clsInvoice();
                                    invnamemessage = "Invoice";
                                    alTopInvoicelist = new ArrayList();
                                    alInvoiceData = new ArrayList();
                                    ArrayList lstbyfiltereditems = new ArrayList();
                                    customercustsettingvalue = lobjQBConfiguration.GetLabelConfigSettings("CustomerCustomFieldText");
                                  
                                    configitemcustomfield = !string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("ItemCustomFieldText")) ? Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("ItemCustomFieldText")).Replace(" ", string.Empty).ToUpper() : string.Empty;
                                  
                                    List<clsInvoiceLine.Itemcustomfields> custcheck = new List<clsInvoiceLine.Itemcustomfields>();
                                 
                                    alTopInvoicelist.Clear();
                                    alInvoiceData.Clear();
                                    if (!string.IsNullOrWhiteSpace(txtrouteno.Text.ToString()))
                                    {

                                        if (!string.IsNullOrWhiteSpace(customercustsettingvalue)) //first level grouping
                                        {
                                            if ((lobjQBConfiguration.GetLabelConfigSettings("MultiInvoiceMode").ToString() == "M"))
                                            {
                                                qtyprintmultiple = true;

                                            }
                                            else
                                            {
                                                qtyprintmultiple = false;
                                            }
                                         
                                            var objmatchedcustomerlist = objInvoice.GetAllcustomersWithMatchedCustomField(customercustsettingvalue, txtrouteno.Text.ToString().ToLower().Trim());
                                            if (objmatchedcustomerlist.Count > 0)
                                            {
                                               
                                                alTopInvoicelist = GetMatchInvoicelist(dateTimePicker1.Value.ToString(), dateTimePicker2.Value.ToString(), configitemcustomfield, qtyprintmultiple, objmatchedcustomerlist);

                                                alInvoiceData.AddRange(alTopInvoicelist);

                                                //show match invoice count
                                                if (alInvoiceData.Count > 0)
                                                {
                                                    pnlmatchinvoicecount.Visible = true;
                                                    lblmatchinvoicecount.Text = alInvoiceData.Count.ToString();
                                                }

                                            }
                                        }
                                    }
                                    else
                                    {
                                       
                                        alTopInvoicelist = GetFilteredInvoicelist(dateTimePicker1.Value.ToString(), dateTimePicker2.Value.ToString());
                                     
                                        objInvoiceLine = new clsInvoiceLine();
                                        alInvoiceData = objInvoiceLine.GetFilterInvoiceForPrint(dateTimePicker1.Value.ToString(), dateTimePicker2.Value.ToString(), out lobjDataExtension1);

                                    }

                                    lblQtyToPrint.Visible = false; //for date range inv make visible false
                                    txtQtyToPrint.Visible = false;
                                    lblQtyOnLabel.Visible = false;
                                    txtQtyOnLabel.Visible = false;

                                }//hourglass end
                            }
                            else if (rdbSO.Checked)
                            {
                                invnamemessage = "Sales Order";
                                alTopInvoicelist = GetFilteredSolist(dateTimePicker1.Value.ToString(), dateTimePicker2.Value.ToString());

                                objSalesOrderLine = new clsSalesOrderLine();
                                alInvoiceData = objSalesOrderLine.GetFilterSalesOrderForPrint(dateTimePicker1.Value.ToString(), dateTimePicker2.Value.ToString(), out lobjDataExtension1);

                            }
                            else
                            {
                                invnamemessage = "Sales Receipt";
                                alTopInvoicelist = GetFilteredSRlist(dateTimePicker1.Value.ToString(), dateTimePicker2.Value.ToString());
                                //Get sales order data for printing
                                objSalesReceiptLine = new clsSalesReceiptLineItems();
                                alInvoiceData = objSalesReceiptLine.GetFilterSalesReceiptForPrint(dateTimePicker1.Value.ToString(), dateTimePicker2.Value.ToString(), out lobjDataExtension1,"");

                            }
                            if (alTopInvoicelist != null && alTopInvoicelist.Count > 0)
                            {

                                if (lstrQBFileMode == "Close")
                                {

                                }
                                else
                                {
                                    dataGVSelectedorderheader.Visible = true;
                                    dataGVSelectedOrders.Visible = true;
                                    dataGVSelectedorderheader.Rows.Clear();
                                    InitFilterDataGrid();

                                    int i = 0;

                                    if (rdbInvoice.Checked == true)
                                    {
                                        foreach (clsInvoice objclsInv in alTopInvoicelist)
                                        {
                                            dataGVSelectedorderheader.Rows.Add();

                                            dataGVSelectedorderheader.Rows[i].Cells[1].Value = objclsInv.TxnDate.ToShortDateString();
                                            dataGVSelectedorderheader.Rows[i].Cells[2].Value = objclsInv.RefNumber;
                                            // dataGVSelectedorderheader.Rows[i].Cells[3].Value = objclsInv.FOB;
                                            dataGVSelectedorderheader.Rows[i].Cells[3].Value = objclsInv.ShipAddressAddr1;
                                            dataGVSelectedorderheader.Rows[i].Cells[4].Value = objclsInv.CustomerRefFullName; //add customername invoice daterange

                                            i++;
                                        }



                                    }
                                    else if (rdbSR.Checked)
                                    {
                                        foreach (clsSalesReceipt objclssr in alTopInvoicelist)
                                        {
                                            dataGVSelectedorderheader.Rows.Add();

                                            dataGVSelectedorderheader.Rows[i].Cells[1].Value = objclssr.TxnDate.ToShortDateString();
                                            dataGVSelectedorderheader.Rows[i].Cells[2].Value = objclssr.RefNumber;
                                            dataGVSelectedorderheader.Rows[i].Cells[3].Value = objclssr.FOB;
                                            dataGVSelectedorderheader.Rows[i].Cells[4].Value = objclssr.ShipAddressAddr1;

                                            i++;
                                        }

                                    }
                                    else
                                    {
                                        foreach (clsSalesOrder objclsso in alTopInvoicelist)
                                        {

                                            dataGVSelectedorderheader.Rows.Add();

                                            dataGVSelectedorderheader.Rows[i].Cells[1].Value = objclsso.TxnDate.ToShortDateString();
                                            dataGVSelectedorderheader.Rows[i].Cells[2].Value = objclsso.RefNumber;
                                            dataGVSelectedorderheader.Rows[i].Cells[3].Value = objclsso.FOB;
                                            dataGVSelectedorderheader.Rows[i].Cells[4].Value = objclsso.ShipAddressAddr1;

                                            i++;
                                        }

                                    }

                                    dataGVSelectedorderheader.AutoSize = true;

                                }

                                //below function to show and hide groupbox
                                ShowhideControls();


                                txtQtyOnLabel.Visible = false;
                                lblQtyOnLabel.Visible = false;


                                txtQtyToPrint.Visible = false;
                                lblQtyToPrint.Visible = false;

                                if (cmbLabelName.SelectedIndex > 0)
                                    this.btnPrint.Enabled = true;
                                else
                                    this.btnPrint.Enabled = false;

                                dataGVSelectedorderheader.Rows[0].Selected = true;

                                chkorderheader.Checked = true;

                                chkorderheader_Click(null, null);



                                if (cmbLabelName.SelectedIndex > 0)
                                {
                                    this.btnPrint.Enabled = true;
                                }
                                else
                                {
                                    this.btnPrint.Enabled = false;
                                }


                            }
                            else
                            {
                                MessageBox.Show("No " + invnamemessage + " found for given dates.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                dataGVSelectedorderheader.Rows.Clear();
                                dataGVSelectedOrders.Rows.Clear();
                                dateTimePicker1.Value = DateTime.Now;
                                dateTimePicker2.Value = DateTime.Now;

                            }
                        }
                        else
                        {
                            if (rdbPO.Checked == false)
                            {
                                MessageBox.Show("Please select date range or enter order number", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                dataGVSelectedorderheader.Rows.Clear();
                                dataGVSelectedOrders.Rows.Clear();
                                dateTimePicker1.Value = DateTime.Now;
                                dateTimePicker2.Value = DateTime.Now;
                            }
                            else
                            {
                                MessageBox.Show("Please enter PO Number", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                dataGVSelectedorderheader.Rows.Clear();
                                dataGVSelectedOrders.Rows.Clear();
                                dateTimePicker1.Value = DateTime.Now;
                                dateTimePicker2.Value = DateTime.Now;

                            }

                        }


                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message, "Label Connector");
                        DataGVOrders.Rows.Clear();
                        txtQtyOnLabel.Text = "";
                        txtQtyToPrint.Text = "";
                    }
                    finally
                    {
                        this.Cursor = Cursors.Default;
                    }



                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
                DataGVOrders.Rows.Clear();
                txtQtyOnLabel.Text = "";
                txtQtyToPrint.Text = "";
                if (ex.Message == "Could not start QuickBooks.")
                {
                    QBconnectionupdate(false);
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
           
        }

        private ArrayList InvoicePackagingdatasource(string pstrFromdate, string pstrTodate)
        {
            string strCriteria = "";
            ArrayList alData = null;
            lobjQBConfiguration = new QBConfiguration();
            lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");

            try
            {
                objInvoice = new clsInvoice();
                if (lstrQBFileMode == "Close")
                {
                   
                }
                else
                {
                    alData = objInvoice.GetInvoiceListPackaging(pstrFromdate, pstrTodate);
                }

                return alData;
            }
            catch (Exception ex)
            {

                throw;
                return null;
            }
            finally
            {

            }



        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void FillOrderGrid(ArrayList alOrder)
        {
            DataGVOrders.Rows.Clear();
            DataGVItems.Rows.Clear();
            int i = 0;
            if (rdbPO.Checked == true)
            {
                foreach (clsPurchaseOrder objclsPO in alOrder)
                {
                    DataGVOrders.Rows.Add();
                    DataGVOrders.Rows[i].Cells[0].Value = objclsPO.TxnDate.ToShortDateString();
                    DataGVOrders.Rows[i].Cells[1].Value = objclsPO.RefNumber;
                    DataGVOrders.Rows[i].Cells[2].Value = objclsPO.RefFullName;
                    i++;
                }
            }
            else if (rdbSO.Checked == true)
            {
                foreach (GetclassHeaderSalesOrder objSO in alOrder)
                {
                    DataGVOrders.Rows.Add();
                    DataGVOrders.Rows[i].Cells[0].Value = objSO.TxnDate.ToShortDateString();
                    DataGVOrders.Rows[i].Cells[1].Value = objSO.RefNumber;
                    DataGVOrders.Rows[i].Cells[2].Value = objSO.CustomerRefFullName;

                    i++;
                }
            }
            else if (rdbSR.Checked == true)
            {
                foreach (clsSalesReceipt objSR in alOrder)
                {
                    DataGVOrders.Rows.Add();
                    DataGVOrders.Rows[i].Cells[0].Value = objSR.TxnDate.ToShortDateString();
                    DataGVOrders.Rows[i].Cells[1].Value = objSR.RefNumber;
                    DataGVOrders.Rows[i].Cells[2].Value = objSR.CustomerRefFullName;
                    DataGVOrders.Rows[i].Cells[3].Value = objSR.CustomerCompanyName;

                    i++;
                }
            }
            else
            {
                foreach (clsInvoice objInvoice in alOrder)
                {
                    DataGVOrders.Rows.Add();
                    DataGVOrders.Rows[i].Cells[0].Value = objInvoice.TxnDate.ToShortDateString();
                    DataGVOrders.Rows[i].Cells[1].Value = objInvoice.RefNumber;
                    DataGVOrders.Rows[i].Cells[2].Value = objInvoice.BillAddressAddr1;
                    InvoiceCustomerName = objInvoice.CustomerRefFullName;
                    i++;
                }
            }
        }
        private void FillSOItemGrid(ArrayList alLineItems)
        {
            int i = 0;
            double dbldivisor;
            int isnumber;
            double decimalnumber;
            DataGVItems.Rows.Clear();
          
                if (rdbB.Checked == true)
                {
                    foreach (clsGridSalesOrderLine objSOLine in alLineItems)
                    {
                        DataGVItems.Rows.Add();
                      
                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Value = objSOLine.SalesOrderLineQuantity;
                        DataGVItems.Rows[i].Cells["SalesOrderLineUnitOfMeasure"].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value = objSOLine.SalesOrderLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["SalesOrderLineDesc"].Value = objSOLine.SalesOrderLineDesc;
                        DataGVItems.Rows[i].Cells["SalesOrderLineTxnLineID"].Value = objSOLine.SalesOrderLineTxnLineID;
                        i++;
                    }
                }
                else
                {
                    //below condition to check if create invoice is check to fill items.
                    if (rdbd.Checked == true)
                    {
                       
                        foreach (clsGridSalesOrderLine objSOLine in alLineItems)
                        {
                            //preinvoice and Toinvoice column is added
                            DataGVItems.Rows.Add();
                            DataGVItems.Rows[i].Cells[1].Value = objSOLine.SalesOrderLineQuantity;
                          
                            dblInvoiceToQuantity = 0.00;
                            DataGVItems.Rows[i].Cells[2].Value = dblInvoiceToQuantity;
                            DataGVItems.Rows[i].Cells[3].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells[4].Value = objSOLine.SalesOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells[5].Value = objSOLine.SalesOrderLineDesc;

                            i++;
                        }

                    }
                    //Add code for packaging of sales order : Date :04/29/2015
                    else if (rdbC.Checked == true)
                    {
                        foreach (clsGridSalesOrderLine objSOLine in alLineItems)
                        {

                            DataGVItems.Rows.Add();
                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Value = objSOLine.SalesOrderLineQuantity;
                            DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value = objSOLine.SalesOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SalesOrderLineUnitOfMeasure"].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["SalesOrderLineDesc"].Value = objSOLine.SalesOrderLineDesc;
                            DataGVItems.Rows[i].Cells["SalesOrderLineTxnLineID"].Value = objSOLine.SalesOrderLineTxnLineID;
                            DataGVItems.Rows[i].Cells["Other1L"].Value = objSOLine.Other1L; //for test 01-Nov-2018
                            i++;
                        }

                    }

                    else
                    {
                       
                        string strsolinecolumnname = string.Empty;
                        string qtypercontianerField = string.Empty;
                        Dictionary<string, string> lobjcustomItemlist = new Dictionary<string, string>();
                        string qtypercontainervalue = string.Empty;
                        string QtyContainercheck = string.Empty;
                        lobjQBConfiguration = new QBConfiguration();
                        lstrMultipleSoMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("MultiSoMode");

                        foreach (clsGridSalesOrderLine objSOLine in alLineItems)
                        {

                            DataGVItems.Rows.Add();
                            //Quantity Adjustment added for multiple sales order : Date 12/01/2014

                            DataGridViewCustomButtonCell objCellIncrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Increase"] = objCellIncrease;
                            DataGVItems.Rows[i].Cells["Increase"].Value = "+";
                            DataGridViewCustomButtonCell objCellDecrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Decrease"] = objCellDecrease;
                            DataGVItems.Rows[i].Cells["Decrease"].Value = "-";

                            if (lstrMultipleSoMode == "M")
                            {
                                qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField");
                                QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer");
                                if (QtyContainercheck == "1")
                                {
                                    lobjcustomItemlist = lobjitem.GetAllItemCustomFieldsWithNameValue(objSOLine.SalesORderItemName);
                                    if (lobjcustomItemlist.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                    {
                                        lobjcustomItemlist.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);


                                    bool isNumeric = int.TryParse(qtypercontainervalue, out isnumber);
                                    bool isdoubleNumeric = Double.TryParse(qtypercontainervalue, out decimalnumber);

                                    if (isNumeric)
                                    {
                                        dbldivisor = Convert.ToInt32(qtypercontainervalue);
                                    }
                                    else if (isdoubleNumeric)
                                    {
                                        dbldivisor = Convert.ToDouble(qtypercontainervalue);
                                    }
                                    else
                                    {
                                        dbldivisor = 1;
                                    }

                                    //divide qty by unitpercase value
                                    DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(objSOLine.SalesOrderLineQuantity) / Convert.ToDouble(qtypercontainervalue)));
                                        //place qty on qtyon label:10-APR-2019
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = Convert.ToDouble(qtypercontainervalue);

                                    }
                                    else
                                    {
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = objSOLine.SalesOrderLineQuantity;
                                        if (objSOLine.SalesOrderLineQuantity == 0 || objSOLine.SalesOrderLineQuantity == 0)
                                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                                        else
                                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = objSOLine.SalesOrderLineQuantity / objSOLine.SalesOrderLineQuantity;

                                    }
                                }
                                else
                                {
                                    DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = objSOLine.SalesOrderLineQuantity;
                                    if (objSOLine.SalesOrderLineQuantity == 0 || objSOLine.SalesOrderLineQuantity == 0)
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                                    else
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = objSOLine.SalesOrderLineQuantity / objSOLine.SalesOrderLineQuantity;

                                }
                            }
                            else
                            {

                                //swap values between soline qty and solinequantityonlabel values :Date 09-Jan-2017
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = objSOLine.SalesOrderLineQuantity / objSOLine.SalesOrderLineQuantity;
                                if (objSOLine.SalesOrderLineQuantity == 0 || objSOLine.SalesOrderLineQuantity == 0)
                                    DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = objSOLine.SalesOrderLineQuantity;

                            }

                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Value = objSOLine.SalesOrderLineQuantity;
                            DataGVItems.Rows[i].Cells["SalesOrderLineUnitOfMeasure"].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value = objSOLine.SalesOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SalesORderItemName"].Value = objSOLine.SalesORderItemName; //29-11-2017
                        DataGVItems.Rows[i].Cells["SubItemof"].Value = objSOLine.SubItemof;
                        DataGVItems.Rows[i].Cells["SalesPrice"].Value = objSOLine.SalesPrice != null ? Convert.ToDecimal(objSOLine.SalesPrice).ToString("C2") : null; // added on 16th Feb 2018
                            if (!string.IsNullOrWhiteSpace(objSOLine.MarkUpPrice))
                            {
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Value = Convert.ToDecimal(objSOLine.MarkUpPrice).ToString("C2"); //added on 16th Feb 2018
                            }
                            else
                            {
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Value = objSOLine.SalesPrice != null ? Convert.ToDecimal(objSOLine.SalesPrice).ToString("C2") : null;
                            }
                            //fill sales order column name value : Date:16-Mar-2020
                            //column name value
                            strsolinecolumnname = lobjQBConfiguration.GetLabelConfigSettings("qbcolumns");
                            if (!string.IsNullOrWhiteSpace(strsolinecolumnname))
                            {
                                switch (strsolinecolumnname.ToLower().Trim())
                                {
                                    case "other1":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.CustomerPOLineNo) ? objSOLine.CustomerPOLineNo : objSOLine.Other1L;
                                        break;
                                    case "other2":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.SOOther2) ? objSOLine.SOOther2 : objSOLine.Other2L;
                                        break;
                                    case "mfr part number":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = objSOLine.MPN;
                                        break;
                                    case "class":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = objSOLine.Class;
                                        break;
                                    case "amount":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.Amount) ? Convert.ToDecimal(objSOLine.Amount).ToString("C2") : null;
                                        break;
                                    case "cost":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.Cost) ? Convert.ToDecimal(objSOLine.Cost).ToString("C2") : null;
                                        break;
                                    case "other1 and other2":
                                    DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.CustomerPOLineNo) ? objSOLine.CustomerPOLineNo : objSOLine.Other1L;
                                    DataGVItems.Rows[i].Cells["SoLineSecondColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.SOOther2) ? objSOLine.SOOther2 : objSOLine.Other2L;
                                    break;
                                default:
                                        break;
                                }
                            }


                            DataGVItems.Rows[i].Cells["SalesOrderLineDesc"].Value = objSOLine.SalesOrderLineDesc;
                            DataGVItems.Rows[i].Cells["SalesOrderLineTxnLineID"].Value = objSOLine.SalesOrderLineTxnLineID;
                            DataGVItems.Rows[i].Cells["GroupItemType"].Value = objSOLine.GroupItemType; //parent item disable : 26-Feb-2020


                            i++;
                        }



                    }
                }
           
        }

        private void FillItemsGrid(ArrayList alLineItems)
        {
            int i = 0;
            double dbldivisor;
            int isnumber;
            double decimalnumber;
            DataGVItems.Rows.Clear();
            if (rdbPO.Checked == true)
            {
                if (rdbB.Checked == true)
                {
                    foreach (clsPurchaseOrderLine objPOLine in alLineItems)
                    {
                        DataGVItems.Rows.Add();
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = objPOLine.PurchaseOrderQty;
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineUnitOfMeasure"].Value = objPOLine.PurchaseOrderLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value = objPOLine.PurchaseOrderLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["SubItemOf"].Value = objPOLine.SubItemOf != null ? objPOLine.SubItemOf : null;
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineDesc"].Value = objPOLine.PurchaseOrderLineDesc;
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineTxnLineID"].Value = objPOLine.PurchaseOrderLineTxnLineID;
                        i++;
                    }
                }
                else
                {
                    Dictionary<string, string> lobjcustomItemlist = new Dictionary<string, string>();
                    string ItemCustomFieldQuickBooksvalue = string.Empty;
                    bool blnisfieldexist = false;
                    int intwithoutdiv = 0;
                    int intwithdiv = 0;
                    lobjQBConfiguration = new QBConfiguration();
                    string qtypercontianerField = string.Empty;
                    string QtyContainercheck = string.Empty;
                    string qtypercontainervalue = string.Empty;
                    
                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("POQtyPercontainer") == "Y" )
                    {
                        qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerCaseCustomField");
                        foreach (clsPurchaseOrderLine objPOLine in alLineItems)
                        {
                            DataGVItems.Rows.Add();

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = objPOLine.PurchaseOrderQty;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineUnitOfMeasure"].Value = objPOLine.PurchaseOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value = objPOLine.PurchaseOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SubItemOf"].Value = objPOLine.SubItemOf != null ? objPOLine.SubItemOf : null;
                            DataGVItems.Rows[i].Cells["MPN"].Value = objPOLine.MPN != null ? objPOLine.MPN : null;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineDesc"].Value = objPOLine.PurchaseOrderLineDesc;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineTxnLineID"].Value = objPOLine.PurchaseOrderLineTxnLineID;

                            lobjcustomItemlist = lobjitem.GetAllItemCustomFieldsWithNameValue(objPOLine.purchaseordercombineItem.ToString()); 

                            if (lobjcustomItemlist.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                            {
                                lobjcustomItemlist.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);

                                bool isNumeric = int.TryParse(qtypercontainervalue, out isnumber);
                                bool isdoubleNumeric = Double.TryParse(qtypercontainervalue, out decimalnumber);

                                if (isNumeric)
                                {
                                    dbldivisor =  Convert.ToInt32(qtypercontainervalue) ;
                                }
                                else if(isdoubleNumeric)
                                {
                                    dbldivisor =  Convert.ToDouble(qtypercontainervalue) ;
                                }
                                else
                                {
                                    dbldivisor = 1;
                                }

                                if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y")
                                {
                                    //print po qty by default
                                    //divide qty by unitpercase value 
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(objPOLine.PurchaseOrderQty) / dbldivisor));
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = dbldivisor;
                                }
                                else
                                {
                                    //print 1 label by default
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = 1;
                                    if (objPOLine.PurchaseOrderQty == 0)
                                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                                    else
                                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = objPOLine.PurchaseOrderQty;
                                }

                            }
                            else
                            {
                                if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y")
                                {
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = objPOLine.PurchaseOrderQty;

                                    if (objPOLine.PurchaseOrderQty == 0)
                                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                                    else
                                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = objPOLine.PurchaseOrderQty / objPOLine.PurchaseOrderQty;
                                }
                                else
                                {
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = objPOLine.PurchaseOrderQty / objPOLine.PurchaseOrderQty;
                                    if (objPOLine.PurchaseOrderQty == 0)
                                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                                    else
                                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = objPOLine.PurchaseOrderQty;

                                }

                            }
                            i++;
                        }

                    }
                    else
                    {
                        foreach (clsPurchaseOrderLine objPOLine in alLineItems) //po multiple
                        {
                            DataGVItems.Rows.Add();

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = objPOLine.PurchaseOrderQty;

                            if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y")
                            {
                                DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = objPOLine.PurchaseOrderQty;

                                if (objPOLine.PurchaseOrderQty == 0)
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = objPOLine.PurchaseOrderQty / objPOLine.PurchaseOrderQty;
                            }
                            else
                            {

                                //swap values between poline qty and polinequantityonlabel values :Date 16-Feb-2017
                                DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = objPOLine.PurchaseOrderQty / objPOLine.PurchaseOrderQty;
                                if (objPOLine.PurchaseOrderQty == 0)
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = objPOLine.PurchaseOrderQty;

                            }

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineUnitOfMeasure"].Value = objPOLine.PurchaseOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value = objPOLine.PurchaseOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SubItemOf"].Value = objPOLine.SubItemOf != null ? objPOLine.SubItemOf : null; //PO SubItemOf
                                                                                                                                     //support for MPN display : 07-Dec-2018
                            DataGVItems.Rows[i].Cells["MPN"].Value = objPOLine.MPN != null ? objPOLine.MPN : null;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineDesc"].Value = objPOLine.PurchaseOrderLineDesc;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineTxnLineID"].Value = objPOLine.PurchaseOrderLineTxnLineID;

                            i++;
                        }

                    }
                }
                
            }
            else if (rdbSO.Checked == true)
            {
                if (rdbB.Checked == true)
                {
                    foreach (clsSalesOrderLine objSOLine in alLineItems)
                    {
                        DataGVItems.Rows.Add();
                       
                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Value = objSOLine.SalesOrderLineQuantity;
                        DataGVItems.Rows[i].Cells["SalesOrderLineUnitOfMeasure"].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value = objSOLine.SalesOrderLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["SalesOrderLineDesc"].Value = objSOLine.SalesOrderLineDesc;
                        DataGVItems.Rows[i].Cells["SalesOrderLineTxnLineID"].Value = objSOLine.SalesOrderLineTxnLineID;
                        i++;
                    }
                }
                else
                {
                    //below condition to check if create invoice is check to fill items.
                    if (rdbd.Checked == true)
                    {
                    
                        foreach (clsSalesOrderLine objSOLine in alLineItems)
                        {
                         
                            DataGVItems.Rows.Add();
                            DataGVItems.Rows[i].Cells[1].Value = objSOLine.SalesOrderLineQuantity;
                          
                            dblInvoiceToQuantity = 0.00;
                            DataGVItems.Rows[i].Cells[2].Value = dblInvoiceToQuantity;
                            DataGVItems.Rows[i].Cells[3].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells[4].Value = objSOLine.SalesOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells[5].Value = objSOLine.SalesOrderLineDesc;

                            i++;
                        }

                    }
                    //Add code for packaging of sales order : Date :04/29/2015
                    else if (rdbC.Checked == true)
                    {
                        foreach (clsSalesOrderLine objSOLine in alLineItems)
                        {

                            DataGVItems.Rows.Add();
                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Value = objSOLine.SalesOrderLineQuantity;
                            DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value = objSOLine.SalesOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SalesOrderLineUnitOfMeasure"].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["SalesOrderLineDesc"].Value = objSOLine.SalesOrderLineDesc;
                            DataGVItems.Rows[i].Cells["SalesOrderLineTxnLineID"].Value = objSOLine.SalesOrderLineTxnLineID;
                            DataGVItems.Rows[i].Cells["Other1"].Value = objSOLine.CustomerPOLineNo;
                            DataGVItems.Rows[i].Cells["Other1L"].Value = objSOLine.Other1L; //for test 01-Nov-2018
                            DataGVItems.Rows[i].Cells["CustNo"].Value = objSOLine.CustNo;


                            i++;
                        }

                    }

                    else
                    {
                      
                        string strsolinecolumnname = string.Empty;
                        string qtypercontianerField = string.Empty;
                        Dictionary<string, string> lobjcustomItemlist = new Dictionary<string, string>();
                        string qtypercontainervalue = string.Empty;
                        string QtyContainercheck = string.Empty;
                        lobjQBConfiguration = new QBConfiguration();
                        lstrMultipleSoMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("MultiSoMode");

                        foreach (clsSalesOrderLine objSOLine in alLineItems)
                        {

                            DataGVItems.Rows.Add();
                            //Quantity Adjustment added for multiple sales order : Date 12/01/2014

                            DataGridViewCustomButtonCell objCellIncrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Increase"] = objCellIncrease;
                            DataGVItems.Rows[i].Cells["Increase"].Value = "+";
                            DataGridViewCustomButtonCell objCellDecrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Decrease"] = objCellDecrease;
                            DataGVItems.Rows[i].Cells["Decrease"].Value = "-";

                            if (lstrMultipleSoMode == "M")
                            {
                                qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField");
                                QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer");
                                if (QtyContainercheck == "1")
                                {
                                    lobjcustomItemlist = lobjitem.GetAllItemCustomFieldsWithNameValue(objSOLine.SalesORderItemName);
                                    if (lobjcustomItemlist.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                    {
                                        lobjcustomItemlist.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);


                                        bool isNumeric = int.TryParse(qtypercontainervalue, out isnumber);
                                        bool isdoubleNumeric = Double.TryParse(qtypercontainervalue, out decimalnumber);

                                        if (isNumeric)
                                        {
                                            dbldivisor = Convert.ToInt32(qtypercontainervalue);
                                        }
                                        else if (isdoubleNumeric)
                                        {
                                            dbldivisor = Convert.ToDouble(qtypercontainervalue);
                                        }
                                        else
                                        {
                                            dbldivisor = 1;
                                        }

                                        //divide qty by unitpercase value
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(objSOLine.SalesOrderLineQuantity) / Convert.ToDouble(qtypercontainervalue)));
                                        //place qty on qtyon label:10-APR-2019
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = Convert.ToDouble(qtypercontainervalue);

                                    }
                                    else
                                    {
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = objSOLine.SalesOrderLineQuantity;
                                        if (objSOLine.SalesOrderLineQuantity == 0 || objSOLine.SalesOrderLineQuantity == 0)
                                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                                        else
                                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = objSOLine.SalesOrderLineQuantity / objSOLine.SalesOrderLineQuantity;

                                    }
                                }
                                else
                                {
                                    DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = objSOLine.SalesOrderLineQuantity;
                                    if (objSOLine.SalesOrderLineQuantity == 0 || objSOLine.SalesOrderLineQuantity == 0)
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                                    else
                                        DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = objSOLine.SalesOrderLineQuantity / objSOLine.SalesOrderLineQuantity;

                                }
                                 }
                            else
                            {

                                //swap values between soline qty and solinequantityonlabel values :Date 09-Jan-2017
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Value = objSOLine.SalesOrderLineQuantity / objSOLine.SalesOrderLineQuantity;
                                if (objSOLine.SalesOrderLineQuantity == 0 || objSOLine.SalesOrderLineQuantity == 0)
                                    DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Value = objSOLine.SalesOrderLineQuantity;

                            }

                            DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Value = objSOLine.SalesOrderLineQuantity;
                            DataGVItems.Rows[i].Cells["SalesOrderLineUnitOfMeasure"].Value = objSOLine.SalesOrderLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value = objSOLine.SalesOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SalesORderItemName"].Value = objSOLine.SalesORderItemName; //29-11-2017
                            DataGVItems.Rows[i].Cells["SalesPrice"].Value = objSOLine.SalesPrice != null ? Convert.ToDecimal(objSOLine.SalesPrice).ToString("C2") : null; // added on 16th Feb 2018
                            if (!string.IsNullOrWhiteSpace(objSOLine.MarkUpPrice))
                            {
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Value = Convert.ToDecimal(objSOLine.MarkUpPrice).ToString("C2"); //added on 16th Feb 2018
                            }
                            else
                            {
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Value = objSOLine.SalesPrice != null ? Convert.ToDecimal(objSOLine.SalesPrice).ToString("C2") : null;
                            }
                            //fill sales order column name value : Date:16-Mar-2020
                            //column name value
                            strsolinecolumnname = lobjQBConfiguration.GetLabelConfigSettings("qbcolumns");
                            if (!string.IsNullOrWhiteSpace(strsolinecolumnname))
                            {
                                switch (strsolinecolumnname.ToLower().Trim())
                                {
                                    case "other1":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.CustomerPOLineNo) ? objSOLine.CustomerPOLineNo : objSOLine.Other1L;
                                        break;
                                    case "other2":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.SOOther2) ? objSOLine.SOOther2 : objSOLine.Other2L;
                                        break;
                                    case "mfr part number":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = objSOLine.MPN;
                                        break;
                                    case "class":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = objSOLine.Class;
                                        break;
                                    case "amount":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.Amount) ? Convert.ToDecimal(objSOLine.Amount).ToString("C2") : null;
                                        break;
                                    case "cost":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.Cost) ? Convert.ToDecimal(objSOLine.Cost).ToString("C2") : null;
                                        break;
                                    case "other1 and other2":
                                        DataGVItems.Rows[i].Cells["SoLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.CustomerPOLineNo) ? objSOLine.CustomerPOLineNo : objSOLine.Other1L;
                                        DataGVItems.Rows[i].Cells["SoLineSecondColumnName"].Value = !string.IsNullOrWhiteSpace(objSOLine.SOOther2) ? objSOLine.SOOther2 : objSOLine.Other2L;
                                        break;
                                    default:
                                        break;
                                }
                            }


                            DataGVItems.Rows[i].Cells["SalesOrderLineDesc"].Value = objSOLine.SalesOrderLineDesc;
                            DataGVItems.Rows[i].Cells["SalesOrderLineTxnLineID"].Value = objSOLine.SalesOrderLineTxnLineID;
                            DataGVItems.Rows[i].Cells["GroupItemType"].Value = objSOLine.GroupItemType; //parent item disable : 26-Feb-2020

                        
                            i++;
                        }



                    }
                }
            }
            else if (rdbSR.Checked == true)
            {
                if (rdbB.Checked == true)
                {
                    foreach (clsSalesReceiptLineItems objSRLine in alLineItems)
                    {
                        DataGVItems.Rows.Add();

                        DataGVItems.Rows[i].Cells["SalesReceiptLineQuantity"].Value = objSRLine.SalesReceiptQty;
                        DataGVItems.Rows[i].Cells["SalesReceiptLineUnitOfMeasure"].Value = objSRLine.SalesReceiptLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["SalesReceiptLineItemRefFullName"].Value = objSRLine.SalesReceiptLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["SalesReceiptLineDesc"].Value = objSRLine.SalesReceiptLineDesc;
                        DataGVItems.Rows[i].Cells["SalesReceiptLineTxnLineID"].Value = objSRLine.SalesReceiptLineTxnLineID;
                        i++;
                    }
                }
                else
                {
                    //below condition to check if create invoice is check to fill items.
                    if (rdbd.Checked == true)
                    {
                        foreach (clsSalesReceiptLineItems objSRLine in alLineItems)
                        {
                            //preinvoice and Toinvoice column is added
                            DataGVItems.Rows.Add();
                            DataGVItems.Rows[i].Cells[1].Value = objSRLine.SalesReceiptQty;
                            dblInvoiceToQuantity = 0.00;
                            DataGVItems.Rows[i].Cells[2].Value = dblInvoiceToQuantity;
                            DataGVItems.Rows[i].Cells[3].Value = objSRLine.SalesReceiptLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells[4].Value = objSRLine.SalesReceiptLineItemRefFullName;
                            DataGVItems.Rows[i].Cells[5].Value = objSRLine.SalesReceiptLineDesc;

                            i++;
                        }

                    }
                    //Add code for packaging of sales order : Date :04/29/2015
                    else if (rdbC.Checked == true)
                    {
                        foreach (clsSalesReceiptLineItems objSRLine in alLineItems)
                        {

                            DataGVItems.Rows.Add();

                            // DataGVItems.Rows[i].Cells["PrintedStatus"].Value = "N";  //commneted on 05/04/2015
                            DataGVItems.Rows[i].Cells["SalesReceiptLineQuantity"].Value = objSRLine.SalesReceiptQty;
                            DataGVItems.Rows[i].Cells["SalesReceiptLineItemRefFullName"].Value = objSRLine.SalesReceiptLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SalesReceiptLineUnitOfMeasure"].Value = objSRLine.SalesReceiptLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["SalesReceiptLineDesc"].Value = objSRLine.SalesReceiptLineDesc;
                            DataGVItems.Rows[i].Cells["SalesReceiptLineTxnLineID"].Value = objSRLine.SalesReceiptLineTxnLineID;
                            DataGVItems.Rows[i].Cells["Other1"].Value = objSRLine.CustomerPOLineNo;
                            DataGVItems.Rows[i].Cells["Other1L"].Value = objSRLine.Other1L; //for test 01-Nov-2018
                            DataGVItems.Rows[i].Cells["CustNo"].Value = objSRLine.CustNo;


                            i++;
                        }

                    }

                    else
                    {
                      
                        string strsolinecolumnname = string.Empty;
                        string qtypercontianerField = string.Empty;
                        Dictionary<string, string> lobjcustomItemlist = new Dictionary<string, string>();
                        string qtypercontainervalue = string.Empty;
                        string QtyContainercheck = string.Empty;
                        lobjQBConfiguration = new QBConfiguration();
                        lstrMultipleSRMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("MultiSRMode");

                        foreach (clsSalesReceiptLineItems objSRLine in alLineItems)
                        {

                            DataGVItems.Rows.Add();
                            //Quantity Adjustment added for multiple sales order : Date 12/01/2014

                            DataGridViewCustomButtonCell objCellIncrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Increase"] = objCellIncrease;
                            DataGVItems.Rows[i].Cells["Increase"].Value = "+";
                            DataGridViewCustomButtonCell objCellDecrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Decrease"] = objCellDecrease;
                            DataGVItems.Rows[i].Cells["Decrease"].Value = "-";

                            DataGVItems.Rows[i].Cells["SalesReceiptLineQuantity"].Value = objSRLine.SalesReceiptQty;

                            if (lstrMultipleSRMode == "M")
                            {
                                //commented on Date 09-APR-2019.Show QtyperContainer calculate value....
                                qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField");
                                QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer");
                                if (QtyContainercheck == "1")
                                {
                                    lobjcustomItemlist = lobjitem.GetAllItemCustomFieldsWithNameValue(objSRLine.SalesReceiptItemName);
                                    if (lobjcustomItemlist.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                    {
                                        lobjcustomItemlist.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);


                                        bool isNumeric = int.TryParse(qtypercontainervalue, out isnumber);
                                        bool isdoubleNumeric = Double.TryParse(qtypercontainervalue, out decimalnumber);

                                        if (isNumeric)
                                        {
                                            dbldivisor = Convert.ToInt32(qtypercontainervalue);
                                        }
                                        else if (isdoubleNumeric)
                                        {
                                            dbldivisor = Convert.ToDouble(qtypercontainervalue);
                                        }
                                        else
                                        {
                                            dbldivisor = 1;
                                        }

                                        //divide qty by unitpercase value
                                        DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityToPrint"].Value = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(objSRLine.SalesReceiptQty) / Convert.ToDouble(qtypercontainervalue)));
                                        //place qty on qtyon label:10-APR-2019
                                        DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityOnLabel"].Value = Convert.ToDouble(qtypercontainervalue);

                                    }
                                    else
                                    {
                                        DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityToPrint"].Value = objSRLine.SalesReceiptQty;
                                        if (objSRLine.SalesReceiptQty == 0 || objSRLine.SalesReceiptQty == 0)
                                            DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityOnLabel"].Value = 0;
                                        else
                                            DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityOnLabel"].Value = objSRLine.SalesReceiptQty / objSRLine.SalesReceiptQty;

                                    }
                                }
                                else
                                {
                                    DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityToPrint"].Value = objSRLine.SalesReceiptQty;
                                    if (objSRLine.SalesReceiptQty == 0 || objSRLine.SalesReceiptQty == 0)
                                        DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityOnLabel"].Value = 0;
                                    else
                                        DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityOnLabel"].Value = objSRLine.SalesReceiptQty / objSRLine.SalesReceiptQty;

                                }
                            }
                            else
                            {

                                //swap values between soline qty and solinequantityonlabel values :Date 09-Jan-2017
                                DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityToPrint"].Value = objSRLine.SalesReceiptQty / objSRLine.SalesReceiptQty;
                                if (objSRLine.SalesReceiptQty == 0 || objSRLine.SalesReceiptQty == 0)
                                    DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["SalesReceiptLineQuantityOnLabel"].Value = objSRLine.SalesReceiptQty;

                            }

                            DataGVItems.Rows[i].Cells["SalesReceiptLineQuantity"].Value = objSRLine.SalesReceiptQty;
                            DataGVItems.Rows[i].Cells["SalesReceiptLineUnitOfMeasure"].Value = objSRLine.SalesReceiptLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["SalesReceiptLineItemRefFullName"].Value = objSRLine.SalesReceiptLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SalesReceiptItemName"].Value = objSRLine.SalesReceiptItemName; //29-11-2017
                            DataGVItems.Rows[i].Cells["SalesPrice"].Value = objSRLine.SalesPrice != null ? Convert.ToDecimal(objSRLine.SalesPrice).ToString("C2") : null; // added on 16th Feb 2018
                            if (!string.IsNullOrWhiteSpace(objSRLine.MarkUpPrice))
                            {
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Value = Convert.ToDecimal(objSRLine.MarkUpPrice).ToString("C2"); //added on 16th Feb 2018
                            }
                            else
                            {
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Value = objSRLine.SalesPrice != null ? Convert.ToDecimal(objSRLine.SalesPrice).ToString("C2") : null;
                            }
                            //fill sales order column name value : Date:16-Mar-2020
                            //column name value
                            strsolinecolumnname = lobjQBConfiguration.GetLabelConfigSettings("qbcolumns");
                            if (!string.IsNullOrWhiteSpace(strsolinecolumnname))
                            {
                                switch (strsolinecolumnname.ToLower().Trim())
                                {
                                    case "other1":
                                        DataGVItems.Rows[i].Cells["SRLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSRLine.CustomerPOLineNo) ? objSRLine.CustomerPOLineNo : objSRLine.Other1L;
                                        break;
                                    case "other2":
                                        DataGVItems.Rows[i].Cells["SRLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSRLine.SROther2) ? objSRLine.SROther2 : objSRLine.Other2L;
                                        break;
                                    case "mfr part number":
                                        DataGVItems.Rows[i].Cells["SRLineColumnName"].Value = objSRLine.MPN;
                                        break;
                                    case "class":
                                        DataGVItems.Rows[i].Cells["SRLineColumnName"].Value = objSRLine.Class;
                                        break;
                                    case "amount":
                                        DataGVItems.Rows[i].Cells["SRLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSRLine.Amount) ? Convert.ToDecimal(objSRLine.Amount).ToString("C2") : null;
                                        break;
                                    case "cost":
                                        DataGVItems.Rows[i].Cells["SRLineColumnName"].Value = !string.IsNullOrWhiteSpace(objSRLine.Cost) ? Convert.ToDecimal(objSRLine.Cost).ToString("C2") : null;
                                        break;
                                    default:
                                        break;
                                }
                            }


                            DataGVItems.Rows[i].Cells["SalesReceiptLineDesc"].Value = objSRLine.SalesReceiptLineDesc;
                            DataGVItems.Rows[i].Cells["SalesReceiptLineTxnLineID"].Value = objSRLine.SalesReceiptLineTxnLineID;
                            DataGVItems.Rows[i].Cells["GroupItemType"].Value = objSRLine.GroupItemType; //parent item disable : 26-Feb-2020

                            i++;
                        }



                    }
                }
            }

            else
            {
                if (rdbB.Checked == true && invpackaging.Checked == false)
                {
                    foreach (clsInvoiceLine objINVLine in alLineItems)
                    {
                        DataGVItems.Rows.Add();
                       
                        DataGVItems.Rows[i].Cells["InvoiceLineQuantity"].Value = objINVLine.InvoiceLineQuantity;
                        DataGVItems.Rows[i].Cells["InvoiceLineUnitOfMeasure"].Value = objINVLine.InvoiceLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["InvoiceLineItemRefFullName"].Value = objINVLine.InvoiceLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["InvoiceLineDesc"].Value = objINVLine.InvoiceLineDesc;
                        DataGVItems.Rows[i].Cells["InvoiceLineTxnLineID"].Value = objINVLine.InvoiceLineTxnLineID;
                       
                        i++;
                    }
                }


                //for packageinvoice single option
                else if (invpackaging.Checked == true && rdbInvsingle.Checked == true)
                {
                    foreach (clsInvoiceLine objINVLine in alLineItems)
                    {
                        DataGVItems.Rows.Add();

                     
                        DataGVItems.Rows[i].Cells["ChkPrintStatus"].Value = "False"; //##1 Date:07-May-2018
                        DataGVItems.Rows[i].Cells["InvoiceLineQuantity"].Value = objINVLine.InvoiceLineQuantity;
                        DataGVItems.Rows[i].Cells["InvoiceLineUnitOfMeasure"].Value = objINVLine.InvoiceLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["InvoiceLineItemRefFullName"].Value = objINVLine.InvoiceLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["InvoiceLineDesc"].Value = objINVLine.InvoiceLineDesc;
                        DataGVItems.Rows[i].Cells["InvoiceLineTxnLineID"].Value = objINVLine.InvoiceLineTxnLineID;
                      
                        DataGVItems.Rows[i].Cells["InvoiceLineRate"].Value = string.Format("{0:N}", objINVLine.InvoiceLineRate);


                        DataGVItems.Rows[i].Cells["InvoiceLineAmount"].Value = string.Format("{0:N}", objINVLine.InvoiceLineAmount);


                        DataGVItems.Rows[i].Cells["Other1"].Value = objINVLine.Other1;

                        i++;
                    }

                }


                else if (rdbC.Checked == true)
                {
                    foreach (clsInvoiceLine objINVLine in alLineItems)
                    {

                        DataGVItems.Rows.Add();
                      
                        DataGVItems.Rows[i].Cells["PrintedStatus"].Value = "N";
                        DataGVItems.Rows[i].Cells["InvoiceLineQuantity"].Value = objINVLine.InvoiceLineQuantity;
                        DataGVItems.Rows[i].Cells["InvoiceLineUnitOfMeasure"].Value = objINVLine.InvoiceLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["InvoiceLineItemRefFullName"].Value = objINVLine.InvoiceLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["InvoiceLineDesc"].Value = objINVLine.InvoiceLineDesc;
                        DataGVItems.Rows[i].Cells["InvoiceLineTxnLineID"].Value = objINVLine.InvoiceLineTxnLineID;

                        i++;
                    }

                }
                else if (rdbA.Checked == true && rdbInvoice.Checked == true) //11-30-2016 bind data for invoice multimode
                {
                    lobjQBConfiguration = new QBConfiguration();
                    string qtypercontianerField = string.Empty;
                    string QtyContainercheck = string.Empty;
                    string qtypercontainervalue = string.Empty;
                    Dictionary<string, string> lobjcustomItemlist = new Dictionary<string, string>();
                    //Regular invoice multimode databinding
                    lstrMultiInvoiceMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("MultiInvoiceMode");
                    //setting for pack/units 15-Feb-2017
                    //comment pack/units code:11-APR-2019....
                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PackperUnits") == "Y" && lstrMultiInvoiceMode == "M")
                    {
                        qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("PackUnitsCustomField");
                        foreach (clsInvoiceLine objINVLine in alLineItems)
                        {
                            DataGVItems.Rows.Add();

                            DataGVItems.Rows[i].Cells["InvoiceLineQuantity"].Value = objINVLine.InvoiceLineQuantity;
                            DataGVItems.Rows[i].Cells["InvoiceLineUnitOfMeasure"].Value = objINVLine.InvoiceLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["InvoiceLineItemRefFullName"].Value = objINVLine.InvoiceLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["InvoiceLineDesc"].Value = objINVLine.InvoiceLineDesc;
                            DataGVItems.Rows[i].Cells["InvoiceLineTxnLineID"].Value = objINVLine.InvoiceLineTxnLineID;
                            lobjcustomItemlist = lobjitem.GetAllItemCustomFieldsWithNameValue(objINVLine.InvoiceItemName); //12-APR-2019
                            if (lobjcustomItemlist.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                            {
                                lobjcustomItemlist.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);


                                bool isNumeric = int.TryParse(qtypercontainervalue, out isnumber);
                                bool isdoubleNumeric = Double.TryParse(qtypercontainervalue, out decimalnumber);

                                if (isNumeric)
                                {
                                    dbldivisor = Convert.ToInt32(qtypercontainervalue);
                                }
                                else if (isdoubleNumeric)
                                {
                                    dbldivisor = Convert.ToDouble(qtypercontainervalue);
                                }
                                else
                                {
                                    dbldivisor = 1;
                                }

                                //divide qty by unitpercase value
                                DataGVItems.Rows[i].Cells["InvoiceLineQuantityToPrint"].Value = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(objINVLine.InvoiceLineQuantity) / Convert.ToDouble(qtypercontainervalue)));
                                DataGVItems.Rows[i].Cells["InvoiceLineQuantityOnLabel"].Value = Convert.ToDouble(qtypercontainervalue);
                             
                            }
                            else
                            {
                                DataGVItems.Rows[i].Cells["InvoiceLineQuantityToPrint"].Value = objINVLine.InvoiceLineQuantity; //12-APR-2019
                                if (objINVLine.InvoiceLineQuantity == 0 || objINVLine.InvoiceLineQuantity == 0)
                                    DataGVItems.Rows[i].Cells["InvoiceLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["InvoiceLineQuantityOnLabel"].Value = objINVLine.InvoiceLineQuantity / objINVLine.InvoiceLineQuantity;

                            }
                           
                            DataGVItems.Rows[i].Cells["InvoiceItemName"].Value = objINVLine.InvoiceItemName;
                            i++;
                        }

                    }
                    else
                    {

                      
                        foreach (clsInvoiceLine objINVLine in alLineItems)
                        {

                            DataGVItems.Rows.Add();

                            DataGridViewCustomButtonCell objCellIncrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Increase"] = objCellIncrease;
                            DataGVItems.Rows[i].Cells["Increase"].Value = "+";
                            DataGridViewCustomButtonCell objCellDecrease = new DataGridViewCustomButtonCell();
                            DataGVItems.Rows[i].Cells["Decrease"] = objCellDecrease;
                            DataGVItems.Rows[i].Cells["Decrease"].Value = "-";
                            DataGVItems.Rows[i].Cells["InvoiceLineQuantity"].Value = objINVLine.InvoiceLineQuantity;
                            //commented on 11-APR-2019
                            if (lstrMultiInvoiceMode == "M")
                            {

                                DataGVItems.Rows[i].Cells["InvoiceLineQuantityToPrint"].Value = objINVLine.InvoiceLineQuantity;
                                if (objINVLine.InvoiceLineQuantity == 0 || objINVLine.InvoiceLineQuantity == 0)
                                    DataGVItems.Rows[i].Cells["InvoiceLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["InvoiceLineQuantityOnLabel"].Value = objINVLine.InvoiceLineQuantity / objINVLine.InvoiceLineQuantity;
                            }
                            else
                            {

                               
                                DataGVItems.Rows[i].Cells["InvoiceLineQuantityToPrint"].Value = objINVLine.InvoiceLineQuantity / objINVLine.InvoiceLineQuantity;
                                if (objINVLine.InvoiceLineQuantity == 0 || objINVLine.InvoiceLineQuantity == 0)
                                    DataGVItems.Rows[i].Cells["InvoiceLineQuantityOnLabel"].Value = 0;
                                else
                                    DataGVItems.Rows[i].Cells["InvoiceLineQuantityOnLabel"].Value = objINVLine.InvoiceLineQuantity;


                            }
                        

                            DataGVItems.Rows[i].Cells["InvoiceLineUnitOfMeasure"].Value = objINVLine.InvoiceLineUnitOfMeasure;
                            DataGVItems.Rows[i].Cells["InvoiceLineItemRefFullName"].Value = objINVLine.InvoiceLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["InvoiceLineDesc"].Value = objINVLine.InvoiceLineDesc;
                            DataGVItems.Rows[i].Cells["InvoiceLineTxnLineID"].Value = objINVLine.InvoiceLineTxnLineID;
                            DataGVItems.Rows[i].Cells["GroupItemType"].Value = objINVLine.GroupItemType;
                            DataGVItems.Rows[i].Cells["InvoiceItemName"].Value = objINVLine.InvoiceItemName;
                            DataGVItems.Rows[i].Cells["SubItemof"].Value = objINVLine.SubItemof;
                            i++;
                        }
                    }
                }
            }
        }

        private void FillPOReceiptItemsGrid(List<clsPurchaseOrderLine> alLineItems)
        {
            int i = 0;
            string locbinvalue = string.Empty;
            string qtyval = "15";


            DataGVItems.Rows.Clear();
            if (rdbPO.Checked == true)
            {

               
                foreach (var line in lobjclsPurchaseOrderLine.GroupBy(info => info.PurchaseOrderLineItemRefFullName).Select(group => new
                {
                    Metric = group.Key,
                    Count = group.Count()
                }).OrderBy(x => x.Metric))
                {
                    
                    if (line.Count > 1) // for group receive item
                    {
                        int z = 0;
                        var groupItemList = alLineItems.Where(p => p.PurchaseOrderLineItemRefFullName == line.Metric).ToList();
                        z = groupItemList.Count;
                        foreach (var item in groupItemList)
                        {

                            item.Reccount = z;
                            z--;

                        }

                        var top = (from q in groupItemList
                                   orderby q.POReceivedItemCreatedTime.Count() //descending
                                   select q).Take(1);
                        foreach (clsPurchaseOrderLine objPOLine in top)
                        {
                            if (!string.IsNullOrWhiteSpace(objPOLine.Site) && !string.IsNullOrWhiteSpace(objPOLine.Bin))
                            {
                                locbinvalue = objPOLine.Site + " / " + objPOLine.Bin;

                            }
                            else if (!string.IsNullOrWhiteSpace(objPOLine.Site))
                            {
                                locbinvalue = objPOLine.Site;

                            }
                            else
                            {
                                locbinvalue = objPOLine.Bin;
                            }
                            DataGVItems.Rows.Add();
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value = objPOLine.PurchaseOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SubItemOf"].Value = objPOLine.SubItemOf != null ? objPOLine.SubItemOf : null;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineDesc"].Value = objPOLine.PurchaseOrderLineDesc != null ? objPOLine.PurchaseOrderLineDesc : string.Empty;

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = objPOLine.RecQty;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = 1;
                           
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineSN"].Value = objPOLine.Entry2 != null ? objPOLine.Entry2 : string.Empty;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineExpDate"].Value = string.Empty;//DateTime.Today.ToString("MM/dd/yyyy");

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineBin"].Value = locbinvalue;

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineBarCode"].Value = objPOLine.BarCodeValue;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLinePONumber"].Value = objPOLine.RefNumber;
                            //serialNo
                            DataGVItems.Rows[i].Cells["SerialNo"].Value = objPOLine.ReceiptSerialNumber;

                            //make value with bold font
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineSN"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineExpDate"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                            DataGVItems.Rows[i].Cells["purchaseordercombineItem"].Value = objPOLine.purchaseordercombineItem;
                            //CustomerJob for receiptmode: 28-Aug-2018
                            DataGVItems.Rows[i].Cells["customerjob"].Value = objPOLine.CustomerJob;

                          

                            i++;

                        }
                      

                    }
                    else
                    {
                       
                        var IndvidualItemList = alLineItems.Where(p => p.PurchaseOrderLineItemRefFullName == line.Metric).ToList();

                        
                        foreach (clsPurchaseOrderLine objPOLine in IndvidualItemList)
                        {

                            if (!string.IsNullOrWhiteSpace(objPOLine.Site) && !string.IsNullOrWhiteSpace(objPOLine.Bin))
                            {
                                locbinvalue = objPOLine.Site + " / " + objPOLine.Bin;

                            }
                            else if (!string.IsNullOrWhiteSpace(objPOLine.Site))
                            {
                                locbinvalue = objPOLine.Site;

                            }
                            else
                            {
                                locbinvalue = objPOLine.Bin;
                            }

                            DataGVItems.Rows.Add();
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value = objPOLine.PurchaseOrderLineItemRefFullName;
                            DataGVItems.Rows[i].Cells["SubItemOf"].Value = objPOLine.SubItemOf != null ? objPOLine.SubItemOf : null;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineDesc"].Value = objPOLine.PurchaseOrderLineDesc != null ? objPOLine.PurchaseOrderLineDesc : string.Empty;

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = objPOLine.RecQty;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = 1;
                          
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineSN"].Value = objPOLine.Entry2 != null ? objPOLine.Entry2 : string.Empty;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineExpDate"].Value = string.Empty; //DateTime.Today.ToString("MM/dd/yyyy");

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineBin"].Value = locbinvalue;

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineBarCode"].Value = objPOLine.BarCodeValue;
                            DataGVItems.Rows[i].Cells["PurchaseOrderLinePONumber"].Value = objPOLine.RefNumber;
                            //serialNo
                            DataGVItems.Rows[i].Cells["SerialNo"].Value = objPOLine.ReceiptSerialNumber;

                         
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineSN"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineExpDate"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                            DataGVItems.Rows[i].Cells["purchaseordercombineItem"].Value = objPOLine.purchaseordercombineItem;
                          
                            DataGVItems.Rows[i].Cells["customerjob"].Value = objPOLine.CustomerJob;



                            i++;
                        }
                      
                    }
                   
                }


            }
        }

        private void InitDataGrid()
        {
            //make filter button visible true
            if (rdbPO.Checked == true) //pwh
            {
                btnfilterlabel.Visible = false;
            }
            else
            {
                btnfilterlabel.Visible = true;
            }
          
            chkorderheader.Visible = false;
            if (DataGVOrders.Visible == false)
            {
                DataGVOrders.Visible = true;
            }

            DataGVOrders.Columns.Clear();
            DataGVItems.Columns.Clear();

            dataGVSelectedOrders.Visible = false;
            dataGVSelectedorderheader.Visible = false;

            //  //show Txn date filter invoice/so:Date 07-09-2016

            //if (txtOrderNumber.Text == "")
            //{
            //    DataGridViewCheckBoxColumn Column2 = new DataGridViewCheckBoxColumn();
            //    Column2.Name = "CheckBoxDatefilter";
            //    Column2.HeaderText = "";
            //    DataGVOrders.Columns.Add(Column2);
            //    DataGVOrders.Columns["CheckBoxDatefilter"].Width = 50;
            //    DataGVOrders.Columns["CheckBoxDatefilter"].ReadOnly = false;
            //    DataGVOrders.Columns["CheckBoxDatefilter"].Visible = false;

            //    chkordergrid.Visible = true;
            //    DataGVOrders.Columns["CheckBoxDatefilter"].Visible = true;


            //}

            //disable date range filter for multiple po : date 11-23-2016
            if (rdbPO.Checked == true && (rdbA.Checked == true || rdbB.Checked == true))
            {
                groupBox3.Enabled = false;
            }
            else
            {
                groupBox3.Enabled = true;
            }

            //checkbox collection :PWH
            if (!(rdbPO.Checked == true && rdbA.Checked == true))
            {
                chkreceiptall.Visible = false;
                lblprintheader.Visible = false;
                lblreceiptheader.Visible = false;


            }

            if (rdbPO.Checked == true)
            {

                DataGVOrders.Columns.Add("TxnDate", "PO Created Date");
                DataGVOrders.Columns["TxnDate"].Width = 120;
                DataGVOrders.Columns.Add("RefNumber", "PO Number");
                DataGVOrders.Columns["RefNumber"].Width = 90;
                DataGVOrders.Columns.Add("VendorRefFullName", "Vendor name");
                DataGVOrders.Columns["VendorRefFullName"].Width = 280;

                if (rdbB.Checked == true)
                {
                    //DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();
                    //DataGVItems.Columns.Add("Increase","+");
                    //colIncrease.HeaderText = "+";
                    //colIncrease.Text = "+";
                    //colIncrease.UseColumnTextForButtonValue = true;
                    //DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();

                    //DataGVItems.Columns.Add("Decrease","-");
                    //colDecrease.HeaderText = "-";
                    //colDecrease.Text = "-";
                    //colDecrease.UseColumnTextForButtonValue = true;

                    chkSelectAll.Visible = false;
                    DataGVItems.Columns.Add("PurchaseOrderLineQuantity", "PO Qty");
                    DataGVItems.Columns["PurchaseOrderLineQuantity"].Width = 50;
                    DataGVItems.Columns.Add("PurchaseOrderLineUnitOfMeasure", "PO UoM");
                    DataGVItems.Columns["PurchaseOrderLineUnitOfMeasure"].Width = 50;
                    DataGVItems.Columns.Add("PurchaseOrderLineItemRefFullName", "PO Item");
                    DataGVItems.Columns["PurchaseOrderLineItemRefFullName"].Width = 250;
                    DataGVItems.Columns.Add("SubItemOf", "SubItemOf");
                    DataGVItems.Columns["SubItemOf"].Width = 80;

                    DataGVItems.Columns.Add("PurchaseOrderLineDesc", "PO Item Desc");
                    DataGVItems.Columns["PurchaseOrderLineDesc"].Width = 300;
                    DataGVItems.Columns["PurchaseOrderLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                    DataGVItems.Columns.Add("PurchaseOrderLineTxnLineID", "Txn No.");
                    DataGVItems.Columns["PurchaseOrderLineTxnLineID"].Visible = false;
                }
                else
                {
                    //check if po multiple or po item receipt option is enable
                    lobjQBConfiguration = new QBConfiguration();
                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0")
                    {

                        chkSelectAll.Visible = true;
                        chkreceiptall.Visible = true;
                        lblprintheader.Visible = true;
                        lblreceiptheader.Visible = true;
                        //lobjQBConfiguration = new QBConfiguration();


                        DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                        Column.Name = "CheckBox";
                        Column.HeaderText = "";
                        DataGVItems.Columns.Add(Column);

                        DataGVItems.Columns["CheckBox"].Width = 40;
                        DataGVItems.Columns["CheckBox"].ReadOnly = false;

                        //new checkbox collection added:PWH
                        DataGridViewCheckBoxColumn Columnpoitem = new DataGridViewCheckBoxColumn();
                        Columnpoitem.Name = "CheckBoxPOItemreceipt";
                        Columnpoitem.HeaderText = "";
                        DataGVItems.Columns.Add(Columnpoitem);

                        DataGVItems.Columns["CheckBoxPOItemreceipt"].Width = 40;
                        DataGVItems.Columns["CheckBoxPOItemreceipt"].ReadOnly = false;



                        DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();

                        colIncrease.Width = 25;
                        colIncrease.Name = "Decrease";
                        colIncrease.HeaderText = "";
                        colIncrease.CellTemplate.Style.Font = new Font("Verdana", 28);

                        colIncrease.Text = "<<";
                        DataGVItems.Columns.Add(colIncrease);

                        colIncrease.UseColumnTextForButtonValue = true;


                        DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();

                        colDecrease.Name = "Increase";
                        colDecrease.HeaderText = "";
                        colDecrease.Width = 25;
                        colDecrease.CellTemplate.Style.Font = new Font("Verdana", 20);
                        colDecrease.Text = ">>";
                        DataGVItems.Columns.Add(colDecrease);

                        colDecrease.UseColumnTextForButtonValue = true;


                        //DataGVItems.Columns.Add("PurchaseOrderLineQuantity", "PO Qty");
                        //DataGVItems.Columns["PurchaseOrderLineQuantity"].Width = 50;
                        //DataGVItems.Columns.Add("PurchaseOrderLineUnitOfMeasure", "PO UoM");
                        //DataGVItems.Columns["PurchaseOrderLineUnitOfMeasure"].Width = 50;
                        //DataGVItems.Columns.Add("PurchaseOrderLineItemRefFullName", "PO Item");
                        //DataGVItems.Columns["PurchaseOrderLineItemRefFullName"].Width = 250;
                        //DataGVItems.Columns.Add("PurchaseOrderLineDesc", "PO Item Desc");
                        //DataGVItems.Columns["PurchaseOrderLineDesc"].Width = 300;

                        //DataGVItems.Columns.Add("PurchaseOrderLineTxnLineID", "Txn No.");
                        //DataGVItems.Columns["PurchaseOrderLineTxnLineID"].Visible = false;

                        //DataGVItems.Columns.Add("PurchaseOrderLineItemRefFullName", "P/N");
                        DataGVItems.Columns.Add("PurchaseOrderLineItemRefFullName", "Item");
                        DataGVItems.Columns["PurchaseOrderLineItemRefFullName"].Width = 125;

                        DataGVItems.Columns.Add("SubItemOf", "SubItemOf");
                        DataGVItems.Columns["SubItemOf"].Width = 80;

                        DataGVItems.Columns.Add("PurchaseOrderLineDesc", "Description");
                        DataGVItems.Columns["PurchaseOrderLineDesc"].Width = 150;

                        DataGVItems.Columns.Add("PurchaseOrderLineQuantity", "Qty on Lbl"); //"Qty on Lbl"
                        DataGVItems.Columns["PurchaseOrderLineQuantity"].Width = 40;

                        DataGVItems.Columns.Add("PurchaseOrderLineQuantityToPrint", "Print Lbl Qty"); //"Print Lbl Qty"
                        DataGVItems.Columns["PurchaseOrderLineQuantityToPrint"].Width = 40;

                        //DataGVItems.Columns.Add("PurchaseOrderLineSN", Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PoSNHeader")));
                        //DataGVItems.Columns["PurchaseOrderLineSN"].Width = 70; 


                        //DataGVItems.Columns.Add("PurchaseOrderLineExpDate", Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PoExpDateHeader")));
                        //DataGVItems.Columns["PurchaseOrderLineExpDate"].Width = 100;

                        //exchange column position expdate and SN
                        DataGVItems.Columns.Add("PurchaseOrderLineExpDate", Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PoExpDateHeader")));
                        DataGVItems.Columns["PurchaseOrderLineExpDate"].Width = 100;

                        DataGVItems.Columns.Add("PurchaseOrderLineSN", Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PoSNHeader")));
                        DataGVItems.Columns["PurchaseOrderLineSN"].Width = 70;

                        //CalendarColumn col = new CalendarColumn();
                        //col.Name = "PurchaseOrderLineExpDate";
                        //col.HeaderText = "Exp Date";
                        //col.Width = 100;
                        //this.DataGVItems.Columns.Add(col);

                        DataGVItems.Columns.Add("PurchaseOrderLineBin", "Loc / Bin");
                        DataGVItems.Columns["PurchaseOrderLineBin"].Width = 75;


                        DataGVItems.Columns.Add("PurchaseOrderLineBarCode", "BarCode");
                        DataGVItems.Columns["PurchaseOrderLineBarCode"].Visible = false;

                        DataGVItems.Columns.Add("PurchaseOrderLinePONumber", "PONumber");
                        DataGVItems.Columns["PurchaseOrderLinePONumber"].Visible = false;


                        DataGVItems.Columns.Add("PurchaseOrderLineRecCount", "ItemRecount");
                        DataGVItems.Columns["PurchaseOrderLineRecCount"].Visible = false;

                        DataGVItems.Columns.Add("purchaseordercombineItem", "POfullItemname");
                        DataGVItems.Columns["purchaseordercombineItem"].Visible = false;

                        //SerialNo:Date 03-Mar-2017
                        DataGVItems.Columns.Add("SerialNo", "SerialNo");
                        DataGVItems.Columns["SerialNo"].Visible = false;
                        //CustomerJob for Receipt mode: 28-Aug-2018
                        DataGVItems.Columns.Add("customerjob", "receiptcustomerjob");
                        DataGVItems.Columns["customerjob"].Visible = false;

                    }
                    else
                    {   //show po multiple option
                        chkSelectAll.Visible = true;
                        DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                        Column.Name = "CheckBox";
                        Column.HeaderText = "";
                        DataGVItems.Columns.Add(Column);

                        DataGVItems.Columns["CheckBox"].Width = 45;
                        DataGVItems.Columns["CheckBox"].ReadOnly = false;
                        //Add edit column for PO multiple : 17-Feb-2017
                        DataGridViewCustomButtonColumn pocoledit = new DataGridViewCustomButtonColumn();
                        pocoledit.Width = 45;
                        pocoledit.Name = "Edit";
                        pocoledit.HeaderText = "Edit";
                        pocoledit.Text = "Edit";
                        pocoledit.UseColumnTextForButtonValue = true;
                        DataGVItems.Columns.Add(pocoledit);

                        DataGVItems.Columns.Add("PurchaseOrderLineQuantity", "PO Qty");
                        DataGVItems.Columns["PurchaseOrderLineQuantity"].Width = 40;
                        //New column print lbl qty & qty on lbl : Date 16-Feb-2017
                        DataGVItems.Columns.Add("PurchaseOrderLineQuantityToPrint", "Print Lbl Qty");
                        DataGVItems.Columns["PurchaseOrderLineQuantityToPrint"].Width = 40;

                        DataGVItems.Columns.Add("PurchaseOrderLineQuantityOnLabel", "Qty On Lbl");
                        DataGVItems.Columns["PurchaseOrderLineQuantityOnLabel"].Width = 40;

                        DataGVItems.Columns.Add("PurchaseOrderLineUnitOfMeasure", "PO UoM");
                        DataGVItems.Columns["PurchaseOrderLineUnitOfMeasure"].Width = 50;
                        DataGVItems.Columns.Add("PurchaseOrderLineItemRefFullName", "PO Item");
                        DataGVItems.Columns["PurchaseOrderLineItemRefFullName"].Width = 180;
                        DataGVItems.Columns.Add("SubItemOf", "SubItemOf");
                        DataGVItems.Columns["SubItemOf"].Width = 80;
                        //MPN support:07-Dec-2018
                        DataGVItems.Columns.Add("MPN", "MPN");
                        DataGVItems.Columns["MPN"].Width = 80;
                        DataGVItems.Columns.Add("PurchaseOrderLineDesc", "PO Item Desc");
                        DataGVItems.Columns["PurchaseOrderLineDesc"].Width = 240;
                        DataGVItems.Columns["PurchaseOrderLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                        DataGVItems.Columns.Add("PurchaseOrderLineTxnLineID", "Txn No.");
                        DataGVItems.Columns["PurchaseOrderLineTxnLineID"].Visible = false;

                    }

                }
            }
            else if (rdbSO.Checked == true)
            {
                DataGVOrders.Columns.Add("TxnDate", "SO Created Date");
                DataGVOrders.Columns["TxnDate"].Width = 120;
                DataGVOrders.Columns.Add("RefNumber", "SO Number");
                DataGVOrders.Columns["RefNumber"].Width = 150;
                DataGVOrders.Columns.Add("CustomerRefFullName", "Customer name");
                DataGVOrders.Columns["CustomerRefFullName"].Width = 300;

                DataGVOrders.Columns.Add("CompanyName", "CompanyName");
                // DataGVOrders.Columns["CompanyName"].Width = 200;
                DataGVOrders.Columns["CompanyName"].Visible = false;


                if (rdbB.Checked == true)
                {
                    chkSelectAll.Visible = false;

                    //DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();
                    //DataGVItems.Columns.Add("Increase", "+");
                    //colIncrease.HeaderText = "+";
                    //colIncrease.Text = "+";
                    //colIncrease.UseColumnTextForButtonValue = true;
                    //DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();

                    //DataGVItems.Columns.Add("Decrease", "-");
                    //colDecrease.HeaderText = "-";
                    //colDecrease.Text = "-";
                    //colDecrease.UseColumnTextForButtonValue = true;

                    DataGVItems.Columns.Add("SalesOrderLineQuantity", "SO Qty");
                    DataGVItems.Columns["SalesOrderLineQuantity"].Width = 100;
                    DataGVItems.Columns.Add("SalesOrderLineUnitOfMeasure", "SO UoM ");
                    DataGVItems.Columns["SalesOrderLineUnitOfMeasure"].Width = 100;
                    DataGVItems.Columns.Add("SalesOrderLineItemRefFullName", "SO Item ");
                    DataGVItems.Columns["SalesOrderLineItemRefFullName"].Width = 150;
                    DataGVItems.Columns.Add("SalesOrderLineDesc", "So Item Desc");
                    DataGVItems.Columns["SalesOrderLineDesc"].Width = 230;
                    DataGVItems.Columns["SalesOrderLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                    DataGVItems.Columns.Add("SalesOrderLineTxnLineID", "Txn No.");
                    DataGVItems.Columns["SalesOrderLineTxnLineID"].Visible = false;



                }
                //below code to add new column preInvoice and ToInvoice
                else if (rdbd.Checked == true)
                {
                    chkSelectAll.Visible = false;
                    DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                    Column.Name = "CheckBox";
                    Column.HeaderText = "";
                    DataGVItems.Columns.Add(Column);
                    DataGVItems.Columns["CheckBox"].Width = 50;
                    DataGVItems.Columns["CheckBox"].ReadOnly = false;
                    DataGVItems.Columns.Add("SalesOrderLineQuantity", "SO Qty");


                    //This column is commented
                    // DataGVItems.Columns.Add("SalesOrderLinePreInvoice", "Prev.Invoiced");
                    // DataGVItems.Columns[1].Width = 100;

                    DataGridViewTextBoxColumn col = new DataGridViewTextBoxColumn();
                    col.Name = "SalesOrderLineToInvoice";
                    col.DataPropertyName = "SalesOrderLineToInvoice";
                    col.HeaderText = "ToInvoice";
                    col.ValueType = typeof(double);
                    // col.Frozen = true;
                    DataGVItems.Columns.Add(col);
                    DataGVItems.Columns["SalesOrderLineToInvoice"].Width = 100;


                    DataGVItems.Columns.Add("SalesOrderLineUoM", "SO UoM ");
                    DataGVItems.Columns["SalesOrderLineUoM"].Width = 100;

                    DataGVItems.Columns.Add("SalesOrderLineItemRefName", "SO Item ");
                    DataGVItems.Columns["SalesOrderLineItemRefName"].Width = 150;

                    DataGVItems.Columns.Add("SalesOrderLineDescription", "So Item Desc");
                    DataGVItems.Columns["SalesOrderLineDescription"].Width = 300;
                    DataGVItems.Columns["SalesOrderLineDescription"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                }



                //Add packaging option for sales order : Date:04/29/2015
                else if (rdbC.Checked == true)
                {
                    //make filter button visible false
                    btnfilterlabel.Visible = false;
                    //commented on 05/04/2015
                    //chkSelectAll.Visible = true;
                    //DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                    //Column.Name = "CheckBox";
                    //Column.HeaderText = "";
                    //DataGVItems.Columns.Add(Column);

                    //Add checkbox support for Bartender so packging mode: Date 4-Feb-2020
                    chkSelectAll.Visible = true;
                    DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                    Column.Name = "CheckBox";
                    Column.HeaderText = "";
                    DataGVItems.Columns.Add(Column);
                    DataGVItems.Columns["CheckBox"].Width = 35;
                    DataGVItems.Columns["CheckBox"].ReadOnly = false;

                    //DataGVItems.Columns["CheckBox"].Width = 50;
                    //DataGVItems.Columns["CheckBox"].ReadOnly = false;

                    //DataGVItems.Columns.Add("PrintedStatus", "Print Status");
                    //DataGVItems.Columns["PrintedStatus"].Width = 90;
                    DataGridViewCustomButtonColumn sopackcoledit = new DataGridViewCustomButtonColumn();
                    sopackcoledit.Width = 45;
                    sopackcoledit.Name = "Edit";
                    sopackcoledit.HeaderText = "Edit";
                    sopackcoledit.Text = "Edit";
                    sopackcoledit.UseColumnTextForButtonValue = true;
                    DataGVItems.Columns.Add(sopackcoledit);

                    DataGVItems.Columns.Add("SalesOrderLineQuantity", "SO Qty");
                    DataGVItems.Columns["SalesOrderLineQuantity"].Width = 100;

                    DataGVItems.Columns.Add("SalesOrderLineItemRefFullName", "SO Item ");
                    DataGVItems.Columns["SalesOrderLineItemRefFullName"].Width = 100;
                    DataGVItems.Columns.Add("SalesOrderLineUnitOfMeasure", "SO UoM ");
                    DataGVItems.Columns["SalesOrderLineUnitOfMeasure"].Width = 100;
                    DataGVItems.Columns.Add("SalesOrderLineDesc", "SO Item Desc");
                    DataGVItems.Columns["SalesOrderLineDesc"].Width = 230;
                    DataGVItems.Columns["SalesOrderLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                    DataGVItems.Columns.Add("SalesOrderLineTxnLineID", "Txn No.");
                    DataGVItems.Columns["SalesOrderLineTxnLineID"].Visible = false;

                    DataGVItems.Columns.Add("Other1", "Other1");
                    DataGVItems.Columns["Other1"].Visible = false;
                    //for test :Date 01-Nov-2018
                    DataGVItems.Columns.Add("Other1L", "Other1L");
                    DataGVItems.Columns["Other1L"].Visible = false;

                    DataGVItems.Columns.Add("CustNo", "CustNo");
                    DataGVItems.Columns["CustNo"].Visible = false;
                    rdbd.Enabled = false;
                }

                else
                {
                    chkSelectAll.Visible = true;
                    DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                    Column.Name = "CheckBox";
                    Column.HeaderText = "";
                    DataGVItems.Columns.Add(Column);
                    DataGVItems.Columns["CheckBox"].Width = 35;
                    DataGVItems.Columns["CheckBox"].ReadOnly = false;
                    //Add Quantity Adjustment in multilple sales order Date 12/01/2014

                    DataGridViewCustomButtonColumn coledit = new DataGridViewCustomButtonColumn();
                    coledit.Width = 35;
                    coledit.Name = "Edit";
                    coledit.HeaderText = "Edit";
                    coledit.Text = "Edit";
                    coledit.UseColumnTextForButtonValue = true;
                    DataGVItems.Columns.Add(coledit);



                    DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();
                    colIncrease.Width = 30;
                    colIncrease.Name = "Increase";
                    colIncrease.HeaderText = "+";
                    colIncrease.CellTemplate.Style.Font = new Font("Verdana", 28);


                    colIncrease.HeaderText = "+";
                    colIncrease.Text = "+";
                    DataGVItems.Columns.Add(colIncrease);

                    colIncrease.UseColumnTextForButtonValue = true;
                    DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();
                    colDecrease.Name = "Decrease";
                    colDecrease.Width = 30;

                    colDecrease.HeaderText = "-";
                    colDecrease.CellTemplate.Style.Font = new Font("Verdana", 28);
                    colDecrease.Text = "-";

                    DataGVItems.Columns.Add(colDecrease);

                    colDecrease.UseColumnTextForButtonValue = true;


                    DataGVItems.Columns.Add("SalesOrderLineQuantity", "SO Qty");
                    DataGVItems.Columns["SalesOrderLineQuantity"].Width = 35;

                    //DataGVItems.Columns.Add("ToPickQty", "To Pick Qty");
                    //DataGVItems.Columns["TopickQty"].Width = 35;

                    DataGVItems.Columns.Add("SalesOrderLineQuantityToPrint", "Print Lbl Qty");
                    DataGVItems.Columns["SalesOrderLineQuantityToPrint"].Width = 35;

                    DataGVItems.Columns.Add("SalesOrderLineQuantityOnLabel", "Qty On Lbl");
                    DataGVItems.Columns["SalesOrderLineQuantityOnLabel"].Width = 35;

                    DataGVItems.Columns.Add("SalesOrderLineUnitOfMeasure", "SO UoM ");
                    DataGVItems.Columns["SalesOrderLineUnitOfMeasure"].Width = 35;

                    DataGVItems.Columns.Add("SubItemof", "Sub Item of");
                    DataGVItems.Columns["SubItemof"].Width = 140;

                    DataGVItems.Columns.Add("SalesOrderLineItemRefFullName", "SO Item ");
                    DataGVItems.Columns["SalesOrderLineItemRefFullName"].Width = 140;


                    DataGVItems.Columns.Add("SalesORderItemName", "SO Item "); //29-11-2017
                    DataGVItems.Columns["SalesORderItemName"].Width = 140;

                    

                    DataGVItems.Columns.Add("SalesOrderLineDesc", "So Item Desc");
                    DataGVItems.Columns["SalesOrderLineDesc"].Width = 180;
                    DataGVItems.Columns["SalesOrderLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
                    //show sales order columns from setting:Date 16-Mar-2020
                    if (!string.IsNullOrWhiteSpace(Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("qbcolumnsvalue"))))
                    {
                        DataGVItems.Columns.Add("SoLineColumnName", Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("qbcolumnsvalue")));
                        DataGVItems.Columns["SoLineColumnName"].Width = 80;
                    }
                    if (!string.IsNullOrWhiteSpace(Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("qbSecondcolumnsvalue"))))
                    {
                        DataGVItems.Columns.Add("SoLineSecondColumnName", Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("qbSecondcolumnsvalue")));
                        DataGVItems.Columns["SoLineSecondColumnName"].Width = 80;
                    }

                    DataGVItems.Columns.Add("SalesPrice", "Sales Price"); //added on 16th Feb-2018
                    DataGVItems.Columns["SalesPrice"].Width = 55;

                    DataGVItems.Columns.Add("MarkUpPrice", "Adjusted Label Price"); //added on 16th Feb-2018
                    DataGVItems.Columns["MarkUpPrice"].Width = 85;

              

                    DataGVItems.Columns.Add("SalesOrderLineTxnLineID", "Txn No.");
                    DataGVItems.Columns["SalesOrderLineTxnLineID"].Visible = false;

          
                    //26-Feb-2020
                    DataGVItems.Columns.Add("GroupItemType", "GroupItemType."); //29-11-2017
                    DataGVItems.Columns["GroupItemType"].Visible = false;
            
                    string columnVisible = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("SoColumnVisible");
                    string columnHide = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("SoColumnHide");
                   
                    List<string> columnNameHide = new List<string>();
                    if (columnHide.Length > 1)
                        columnNameHide = columnHide.Split(',').ToList();

                    foreach (string clmname in columnNameHide)
                    {
                        DataGVItems.Columns[clmname].Visible = false;
                       
                    }
                    columnNameHide = new List<string>();
                    if (columnVisible.Length > 1)
                        columnNameHide = columnVisible.Split(',').ToList();
                    int i = 7;
                    foreach (string clmname in columnNameHide)
                    {
                        DataGVItems.Columns[clmname].DisplayIndex = i;
                        i = i + 1;
                    }


                    if ((lobjQBConfiguration.GetLabelConfigSettings("EnableParentwithItemName").ToString() == "1"))
                    {
                        DataGVItems.Columns["SalesORderItemName"].Visible = true;
                        DataGVItems.Columns["SalesORderItemName"].DisplayIndex = 9;
                        DataGVItems.Columns["SalesOrderLineItemRefFullName"].Visible = false;
                        DataGVItems.Columns["SubItemof"].Visible = false;
                    }
                    else
                    {
                        DataGVItems.Columns["SalesORderItemName"].Visible = false;
                        DataGVItems.Columns["SalesOrderLineItemRefFullName"].Visible = true;
                    }



                }

            }
            else if (rdbSR.Checked == true)
            {
                DataGVOrders.Columns.Add("TxnDate", "SR Created Date");
                DataGVOrders.Columns["TxnDate"].Width = 120;
                DataGVOrders.Columns.Add("RefNumber", "SR Number");
                DataGVOrders.Columns["RefNumber"].Width = 150;
                DataGVOrders.Columns.Add("CustomerRefFullName", "Customer name");
                DataGVOrders.Columns["CustomerRefFullName"].Width = 300;

                DataGVOrders.Columns.Add("CompanyName", "CompanyName");
                DataGVOrders.Columns["CompanyName"].Visible = false;

                chkSelectAll.Visible = true;
                DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                Column.Name = "CheckBox";
                Column.HeaderText = "";
                DataGVItems.Columns.Add(Column);
                DataGVItems.Columns["CheckBox"].Width = 35;
                DataGVItems.Columns["CheckBox"].ReadOnly = false;
                //Add Quantity Adjustment in multilple sales order Date 12/01/2014

                DataGridViewCustomButtonColumn coledit = new DataGridViewCustomButtonColumn();
                coledit.Width = 35;
                coledit.Name = "Edit";
                coledit.HeaderText = "Edit";
                coledit.Text = "Edit";
                coledit.UseColumnTextForButtonValue = true;
                DataGVItems.Columns.Add(coledit);



                DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();
                colIncrease.Width = 30;
                colIncrease.Name = "Increase";
                colIncrease.HeaderText = "+";
                colIncrease.CellTemplate.Style.Font = new Font("Verdana", 28);


                colIncrease.HeaderText = "+";
                colIncrease.Text = "+";
                DataGVItems.Columns.Add(colIncrease);

                colIncrease.UseColumnTextForButtonValue = true;
                DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();
                colDecrease.Name = "Decrease";
                colDecrease.Width = 30;

                colDecrease.HeaderText = "-";
                colDecrease.CellTemplate.Style.Font = new Font("Verdana", 28);
                colDecrease.Text = "-";

                DataGVItems.Columns.Add(colDecrease);

                colDecrease.UseColumnTextForButtonValue = true;


                DataGVItems.Columns.Add("SalesReceiptLineQuantity", "SR Qty");
                DataGVItems.Columns["SalesReceiptLineQuantity"].Width = 35;

                DataGVItems.Columns.Add("SalesReceiptLineQuantityToPrint", "Print Lbl Qty");
                DataGVItems.Columns["SalesReceiptLineQuantityToPrint"].Width = 35;

                DataGVItems.Columns.Add("SalesReceiptLineQuantityOnLabel", "Qty On Lbl");
                DataGVItems.Columns["SalesReceiptLineQuantityOnLabel"].Width = 35;

                DataGVItems.Columns.Add("SalesReceiptLineUnitOfMeasure", "SR UoM ");
                DataGVItems.Columns["SalesReceiptLineUnitOfMeasure"].Width = 35;
                DataGVItems.Columns.Add("SalesReceiptLineItemRefFullName", "SR Item ");
                DataGVItems.Columns["SalesReceiptLineItemRefFullName"].Width = 140;
                DataGVItems.Columns.Add("SalesReceiptLineDesc", "SR Item Desc");
                DataGVItems.Columns["SalesReceiptLineDesc"].Width = 180;
                DataGVItems.Columns["SalesReceiptLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                //show sales Receipt columns from setting:Date 16-Mar-2020
                if (!string.IsNullOrWhiteSpace(Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("qbcolumnsvalue"))))
                {
                    DataGVItems.Columns.Add("SRLineColumnName", Convert.ToString(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("qbcolumnsvalue")));
                    DataGVItems.Columns["SRLineColumnName"].Width = 80;
                }

                DataGVItems.Columns.Add("SalesPrice", "Sales Price"); //added on 16th Feb-2018
                DataGVItems.Columns["SalesPrice"].Width = 55;

                DataGVItems.Columns.Add("MarkUpPrice", "Adjusted Label Price"); //added on 16th Feb-2018
                DataGVItems.Columns["MarkUpPrice"].Width = 85;

                DataGVItems.Columns.Add("SalesReceiptLineTxnLineID", "Txn No.");
                DataGVItems.Columns["SalesReceiptLineTxnLineID"].Visible = false;

                DataGVItems.Columns.Add("SalesReceiptItemName", "Sub Item of"); //29-11-2017
                DataGVItems.Columns["SalesReceiptItemName"].Visible = false;
                //26-Feb-2020
                DataGVItems.Columns.Add("GroupItemType", "GroupItemType."); //29-11-2017
                DataGVItems.Columns["GroupItemType"].Visible = false;


                //////}

            }
            else
            {


                if (invpackaging.Checked == true && rdbInvmultiple.Checked == true) //davino
                {
                    DataGVOrders.Columns.Add("TxnDate", "Inv.Created Date");
                    DataGVOrders.Columns["TxnDate"].Width = 120;
                    DataGVOrders.Columns.Add("RefNumber", "Inv. Number");
                    DataGVOrders.Columns["RefNumber"].Width = 90;
                    DataGVOrders.Columns.Add("BillAddressAddr1", "Bill Address");
                    DataGVOrders.Columns["BillAddressAddr1"].Width = 280;

                }
                else if (rdbSR.Checked == true)
                {
                }
                else
                {
                    //////////common grid for date filter/////////
                    DataGVOrders.Columns.Add("TxnDate", "Inv.Created Date");
                    DataGVOrders.Columns["TxnDate"].Width = 120;
                    DataGVOrders.Columns.Add("RefNumber", "Inv. Number");
                    DataGVOrders.Columns["RefNumber"].Width = 90;
                    DataGVOrders.Columns.Add("BillAddressAddr1", "Bill Address");
                    DataGVOrders.Columns["BillAddressAddr1"].Width = 280;
                }

                if (rdbB.Checked == true && invpackaging.Checked == false) //01/04/2017
                {
                    //make filter button visible true
                    btnfilterlabel.Visible = true;
                    chkSelectAll.Visible = false;
                    //DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();
                    //DataGVItems.Columns.Add("Increase", "+");
                    //colIncrease.HeaderText = "+";
                    //colIncrease.Text = "+";
                    //colIncrease.UseColumnTextForButtonValue = true;
                    //DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();

                    //DataGVItems.Columns.Add("Decrease", "-");
                    //colDecrease.HeaderText = "-";
                    //colDecrease.Text = "-";
                    //colDecrease.UseColumnTextForButtonValue = true;
                    DataGVItems.Columns.Add("InvoiceLineQuantity", "Inv. Qty");
                    DataGVItems.Columns["InvoiceLineQuantity"].Width = 100;
                    DataGVItems.Columns.Add("InvoiceLineUnitOfMeasure", "Inv. UoM ");
                    DataGVItems.Columns["InvoiceLineUnitOfMeasure"].Width = 100;
                    DataGVItems.Columns.Add("InvoiceLineItemRefFullName", "Inv. Item ");
                    DataGVItems.Columns["InvoiceLineItemRefFullName"].Width = 150;
                    DataGVItems.Columns.Add("InvoiceLineDesc", "Inv. Item Desc");
                    DataGVItems.Columns["InvoiceLineDesc"].Width = 230;
                    DataGVItems.Columns["InvoiceLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                    DataGVItems.Columns.Add("InvoiceLineTxnLineID", "Txn No.");
                    DataGVItems.Columns["InvoiceLineTxnLineID"].Visible = false;
                }
                else if (rdbC.Checked == true)
                {
                    //make filter button visible false
                    btnfilterlabel.Visible = false;
                    chkSelectAll.Visible = true;
                    DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                    Column.Name = "CheckBox";
                    Column.HeaderText = "";
                    DataGVItems.Columns.Add(Column);
                    DataGVItems.Columns["CheckBox"].Width = 50;
                    DataGVItems.Columns["CheckBox"].ReadOnly = false;
                    //DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();
                    //DataGVItems.Columns.Add("Increase", "+");
                    //colIncrease.HeaderText = "+";
                    //colIncrease.Text = "+";
                    //colIncrease.UseColumnTextForButtonValue = true;
                    //DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();

                    //DataGVItems.Columns.Add("Decrease", "-");
                    //colDecrease.HeaderText = "-";
                    //colDecrease.Text = "-";
                    //colDecrease.UseColumnTextForButtonValue = true;

                    DataGVItems.Columns.Add("PrintedStatus", "Print Status");
                    DataGVItems.Columns["PrintedStatus"].Width = 90;
                    DataGVItems.Columns.Add("InvoiceLineQuantity", "Inv. Qty");
                    DataGVItems.Columns["InvoiceLineQuantity"].Width = 100;
                    DataGVItems.Columns.Add("InvoiceLineUnitOfMeasure", "Inv. UoM ");
                    DataGVItems.Columns["InvoiceLineUnitOfMeasure"].Width = 100;
                    DataGVItems.Columns.Add("InvoiceLineItemRefFullName", "Inv. Item ");
                    DataGVItems.Columns["InvoiceLineItemRefFullName"].Width = 100;
                    DataGVItems.Columns.Add("InvoiceLineDesc", "Inv. Item Desc");
                    DataGVItems.Columns["InvoiceLineDesc"].Width = 230;
                    DataGVItems.Columns["InvoiceLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                    DataGVItems.Columns.Add("InvoiceLineTxnLineID", "Txn No.");
                    DataGVItems.Columns["InvoiceLineTxnLineID"].Visible = false;
                    rdbd.Enabled = false;
                }

                //for packaging option merger with master version Date 01/04-2017
                // else if (rdbInvsingle.Checked == true)
                // {

                else if (invpackaging.Checked == true && rdbInvsingle.Checked == true)
                {

                    //make filter button visible false
                    btnfilterlabel.Visible = false;
                    chkSelectAll.Visible = true;
                    DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                    Column.Name = "CheckBox";
                    Column.HeaderText = "";
                    DataGVItems.Columns.Add(Column);
                    DataGVItems.Columns["CheckBox"].Width = 40;
                    DataGVItems.Columns["CheckBox"].ReadOnly = false;


                    // DataGVItems.Columns.Add("PrintedStatus", "Print Status"); ##1
                    // DataGVItems.Columns["PrintedStatus"].Width = 40; ##1
                    //Add print status column ##1 : 07-May-2018
                    DataGridViewCheckBoxColumn Colprintstatus = new DataGridViewCheckBoxColumn();
                    Colprintstatus.Name = "ChkPrintStatus";
                    Colprintstatus.HeaderText = "Print Status";
                    DataGVItems.Columns.Add(Colprintstatus);
                    DataGVItems.Columns["ChkPrintStatus"].Width = 40;
                    DataGVItems.Columns["ChkPrintStatus"].ReadOnly = false;





                    DataGVItems.Columns.Add("InvoiceLineQuantity", "Inv. Qty");
                    DataGVItems.Columns["InvoiceLineQuantity"].Width = 60;
                    DataGVItems.Columns.Add("InvoiceLineUnitOfMeasure", "Inv. UoM ");
                    DataGVItems.Columns["InvoiceLineUnitOfMeasure"].Width = 100;
                    DataGVItems.Columns.Add("InvoiceLineItemRefFullName", "Inv. Item ");
                    DataGVItems.Columns["InvoiceLineItemRefFullName"].Width = 100;
                    DataGVItems.Columns.Add("InvoiceLineDesc", "Inv. Item Desc");
                    DataGVItems.Columns["InvoiceLineDesc"].Width = 230;
                    DataGVItems.Columns["InvoiceLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                    //add new column priceeach and amount
                    DataGVItems.Columns.Add("InvoiceLineRate", "Price Each");
                    DataGVItems.Columns["InvoiceLineRate"].Width = 90;
                    DataGVItems.Columns.Add("InvoiceLineAmount", "Amount");
                    DataGVItems.Columns["InvoiceLineAmount"].Width = 90;

                    DataGVItems.Columns.Add("InvoiceLineTxnLineID", "Txn No.");
                    DataGVItems.Columns["InvoiceLineTxnLineID"].Visible = false;
                    //new column other1 added:11-25-2016
                    DataGVItems.Columns.Add("Other1", "Other1");
                    DataGVItems.Columns["Other1"].Visible = false;
                    // DataGVItems.Columns["PrintedStatus"].Visible = false; // ##1 check print status :Date:07-May-2018
                    rdbd.Enabled = false;

                }
         
                else
                {
                    if (invpackaging.Checked == false) //inovoice multiple 
                    {

                        //make filter button visible true
                        btnfilterlabel.Visible = true;
                        chkSelectAll.Visible = true;
                        DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                        Column.Name = "CheckBox";
                        Column.HeaderText = "";
                        DataGVItems.Columns.Add(Column);
                        DataGVItems.Columns["CheckBox"].Width = 50;
                        DataGVItems.Columns["CheckBox"].ReadOnly = false;


                        DataGridViewCustomButtonColumn Invoicecoledit = new DataGridViewCustomButtonColumn();
                        Invoicecoledit.Width = 45;
                        Invoicecoledit.Name = "Edit";
                        Invoicecoledit.HeaderText = "Edit";
                        Invoicecoledit.Text = "Edit";
                        Invoicecoledit.UseColumnTextForButtonValue = true;
                        DataGVItems.Columns.Add(Invoicecoledit);


                        DataGridViewCustomButtonColumn colIncrease = new DataGridViewCustomButtonColumn();
                        colIncrease.Width = 30;
                        colIncrease.Name = "Increase";
                        colIncrease.HeaderText = "+";
                        colIncrease.CellTemplate.Style.Font = new Font("Verdana", 28);
                        //DataGVItems.Columns.Add("Increase", "+");

                        colIncrease.HeaderText = "+";
                        colIncrease.Text = "+";
                        DataGVItems.Columns.Add(colIncrease);

                        colIncrease.UseColumnTextForButtonValue = true;
                        DataGridViewCustomButtonColumn colDecrease = new DataGridViewCustomButtonColumn();
                        colDecrease.Name = "Decrease";
                        colDecrease.Width = 30;
                        //DataGVItems.Columns.Add("Decrease", "-");
                        colDecrease.HeaderText = "-";
                        colDecrease.CellTemplate.Style.Font = new Font("Verdana", 28);
                        colDecrease.Text = "-";

                        DataGVItems.Columns.Add(colDecrease);

                        colDecrease.UseColumnTextForButtonValue = true;

                        DataGVItems.Columns.Add("InvoiceLineQuantity", "Inv. Qty");
                        DataGVItems.Columns["InvoiceLineQuantity"].Width = 40;

                        DataGVItems.Columns.Add("InvoiceLineQuantityToPrint", "Print Lbl Qty");
                        DataGVItems.Columns["InvoiceLineQuantityToPrint"].Width = 40;

                        DataGVItems.Columns.Add("InvoiceLineQuantityOnLabel", "Qty On Lbl");
                        DataGVItems.Columns["InvoiceLineQuantityOnLabel"].Width = 40;

                        DataGVItems.Columns.Add("InvoiceLineUnitOfMeasure", "Inv. UoM ");
                        DataGVItems.Columns["InvoiceLineUnitOfMeasure"].Width = 60;
                        DataGVItems.Columns.Add("InvoiceLineItemRefFullName", "Inv. Item ");
                        DataGVItems.Columns["InvoiceLineItemRefFullName"].Width = 150;
                        DataGVItems.Columns.Add("InvoiceLineDesc", "Inv. Item Desc");
                        DataGVItems.Columns["InvoiceLineDesc"].Width = 270;
                        DataGVItems.Columns["InvoiceLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

                        DataGVItems.Columns.Add("InvoiceLineTxnLineID", "Txn No.");
                        DataGVItems.Columns["InvoiceLineTxnLineID"].Visible = false;

                        //setting for pack/units 15-Feb-2017
                        //commented pack/units Date: 11-APR-2019
                        if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PackperUnits") == "Y")
                        {
                            //DataGVItems.Columns["Increase"].Visible = false; // 15-Feb-2017 //12-APR-2019
                            // DataGVItems.Columns["Decrease"].Visible = false; // 15-Feb-2017
                            // DataGVItems.Columns["InvoiceLineQuantityToPrint"].Visible = true; // 15-Feb-2017//12-APR-2019
                            //DataGVItems.Columns["InvoiceLineQuantityOnLabel"].Visible = true; // 15-Feb-2017//12-APR-2019
                            //DataGVItems.Columns.Add("PackPerUnits", "Pack/Units"); //12-APR-2019
                            //DataGVItems.Columns["PackPerUnits"].Visible = false;  //20-Feb-2017
                            DataGVItems.Columns["InvoiceLineUnitOfMeasure"].Visible = false; //make pack/units col visible
                                                                                             //DataGVItems.Columns["InvoiceLineQuantityOnLabel"].DisplayIndex = 6;
                                                                                             // DataGVItems.Columns["PackPerUnits"].DisplayIndex = 6;
                       

                        }
                        //11/07/2020 -tamilRk
                        DataGVItems.Columns.Add("GroupItemType", "GroupItemType."); 
                        DataGVItems.Columns["GroupItemType"].Visible = false;
                        DataGVItems.Columns.Add("InvoiceItemName", "Inv. Item ");
                        DataGVItems.Columns["InvoiceItemName"].Width = 150;
                        DataGVItems.Columns["InvoiceItemName"].Visible = false;

                        DataGVItems.Columns.Add("SubItemof", "Sub Item of");
                        DataGVItems.Columns["SubItemof"].Width = 150;
                        DataGVItems.Columns["SubItemof"].Visible = false;

                        if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvParentwithItemName").ToString() == "1"))
                        {
                            DataGVItems.Columns["InvoiceItemName"].Visible = true;
                            DataGVItems.Columns["InvoiceItemName"].DisplayIndex = 9;
                            DataGVItems.Columns["InvoiceLineItemRefFullName"].Visible = false;
                        }
                        else
                        {
                            DataGVItems.Columns["InvoiceItemName"].Visible = false;
                            DataGVItems.Columns["InvoiceLineItemRefFullName"].Visible = true;
                        }
                        if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvSubItemof").ToString() == "1"))
                        {
                            DataGVItems.Columns["SubItemof"].Visible = true;
                            DataGVItems.Columns["SubItemof"].DisplayIndex = 9;
                        }
                        else
                        {
                            DataGVItems.Columns["SubItemof"].Visible = false;
                        }
                    }




                }

            }
        }


        private void InitFilterDataGrid()
        {
            dataGVSelectedorderheader.Columns.Clear();
            DataGVOrders.Visible = false;

            DataGVItems.Columns.Clear();
            dataGVSelectedOrders.Columns.Clear();

            DataGridViewCheckBoxColumn Column2 = new DataGridViewCheckBoxColumn();
            Column2.Name = "CheckBoxDatefilter";
            Column2.HeaderText = "";
            dataGVSelectedorderheader.Columns.Add(Column2);
            dataGVSelectedorderheader.Columns["CheckBoxDatefilter"].Width = 50;
            dataGVSelectedorderheader.Columns["CheckBoxDatefilter"].ReadOnly = false;
            dataGVSelectedorderheader.Columns["CheckBoxDatefilter"].Visible = false;

            if (this.rdbSO.Checked == true)
            {

                dataGVSelectedorderheader.Columns.Add("TxnDate", "Sales Order Date");
                dataGVSelectedorderheader.Columns["TxnDate"].Width = 120;
                dataGVSelectedorderheader.Columns.Add("RefNumber", "SO Number");
                dataGVSelectedorderheader.Columns["RefNumber"].Width = 100;
                dataGVSelectedorderheader.Columns.Add("FOB", "Total Cases");
                dataGVSelectedorderheader.Columns["FOB"].Width = 90;
                dataGVSelectedorderheader.Columns.Add("ShipAddressAddr1", "Ship Address");
                dataGVSelectedorderheader.Columns["ShipAddressAddr1"].Width = 280;

                //show sales order items

                dataGVSelectedOrders.Columns.Add("SalesOrderLineQuantity", "SO Qty");
                dataGVSelectedOrders.Columns["SalesOrderLineQuantity"].Width = 100;
                dataGVSelectedOrders.Columns.Add("SalesOrderLineUnitOfMeasure", "SO UoM ");
                dataGVSelectedOrders.Columns["SalesOrderLineUnitOfMeasure"].Width = 100;
                dataGVSelectedOrders.Columns.Add("SalesOrderLineItemRefFullName", "SO Item ");
                dataGVSelectedOrders.Columns["SalesOrderLineItemRefFullName"].Width = 100;
                dataGVSelectedOrders.Columns.Add("SalesOrderLineDesc", "SO Item Desc");
                dataGVSelectedOrders.Columns["SalesOrderLineDesc"].Width = 230;
                dataGVSelectedOrders.Columns["SalesOrderLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            }
            else if (this.rdbSR.Checked)
            {

                dataGVSelectedorderheader.Columns.Add("TxnDate", "Sales Receipt Date");
                dataGVSelectedorderheader.Columns["TxnDate"].Width = 120;
                dataGVSelectedorderheader.Columns.Add("RefNumber", "SR Number");
                dataGVSelectedorderheader.Columns["RefNumber"].Width = 100;
                dataGVSelectedorderheader.Columns.Add("FOB", "Total Cases");
                dataGVSelectedorderheader.Columns["FOB"].Width = 90;
                dataGVSelectedorderheader.Columns.Add("ShipAddressAddr1", "Ship Address");
                dataGVSelectedorderheader.Columns["ShipAddressAddr1"].Width = 280;

                //show sales order items

                dataGVSelectedOrders.Columns.Add("SalesReceiptLineQuantity", "SR Qty");
                dataGVSelectedOrders.Columns["SalesReceiptLineQuantity"].Width = 100;
                dataGVSelectedOrders.Columns.Add("SalesReceiptLineUnitOfMeasure", "SR UoM ");
                dataGVSelectedOrders.Columns["SalesReceiptLineUnitOfMeasure"].Width = 100;
                dataGVSelectedOrders.Columns.Add("SalesReceiptLineItemRefFullName", "SR Item ");
                dataGVSelectedOrders.Columns["SalesReceiptLineItemRefFullName"].Width = 100;
                dataGVSelectedOrders.Columns.Add("SalesReceiptLineDesc", "SR Item Desc");
                dataGVSelectedOrders.Columns["SalesReceiptLineDesc"].Width = 230;
                dataGVSelectedOrders.Columns["SalesReceiptLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

            }
          
            else
            {


                dataGVSelectedorderheader.Columns.Add("TxnDate", "Invoice Date");
                dataGVSelectedorderheader.Columns["TxnDate"].Width = 100;
                dataGVSelectedorderheader.Columns.Add("RefNumber", "Invoice Number");
                dataGVSelectedorderheader.Columns["RefNumber"].Width = 120;
                dataGVSelectedorderheader.Columns.Add("ShipAddressAddr1", "Ship Address");
                dataGVSelectedorderheader.Columns["ShipAddressAddr1"].Width = 220;
                dataGVSelectedorderheader.Columns.Add("CustomerRefFullName", "Customer Name");
                dataGVSelectedorderheader.Columns["CustomerRefFullName"].Width = 220;

                //show item detail grid for only one order

                dataGVSelectedOrders.Columns.Add("InvoiceLineQuantity", "Inv. Qty");
                dataGVSelectedOrders.Columns["InvoiceLineQuantity"].Width = 80;

                dataGVSelectedOrders.Columns.Add("InvoiceLineUnitOfMeasure", "Inv. UoM ");
                dataGVSelectedOrders.Columns["InvoiceLineUnitOfMeasure"].Width = 80;
                dataGVSelectedOrders.Columns.Add("InvoiceLineItemRefFullName", "Inv. Item ");
                dataGVSelectedOrders.Columns["InvoiceLineItemRefFullName"].Width = 150;
                dataGVSelectedOrders.Columns.Add("InvoiceLineDesc", "Inv. Item Desc");
                dataGVSelectedOrders.Columns["InvoiceLineDesc"].Width = 280;
                dataGVSelectedOrders.Columns["InvoiceLineDesc"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
           
              

                if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvParentwithItemName").ToString() == "1"))
                {
                    dataGVSelectedOrders.Columns.Add("InvoiceItemName", "Inv. Item ");
                    dataGVSelectedOrders.Columns["InvoiceItemName"].Width = 150;
                    dataGVSelectedOrders.Columns["InvoiceItemName"].Visible = true;
                    dataGVSelectedOrders.Columns["InvoiceItemName"].DisplayIndex = 3;
                    dataGVSelectedOrders.Columns["InvoiceLineItemRefFullName"].Visible = false;
                }
                else
                {
                    dataGVSelectedOrders.Columns.Add("InvoiceItemName", "Inv. Item ");
                    dataGVSelectedOrders.Columns["InvoiceItemName"].Width = 150;
                    dataGVSelectedOrders.Columns["InvoiceItemName"].Visible = false;
                    dataGVSelectedOrders.Columns["InvoiceLineItemRefFullName"].Visible = true;
                }
                if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvSubItemof").ToString() == "1"))
                {
                    dataGVSelectedOrders.Columns.Add("SubItemof", "Sub Item of");
                    dataGVSelectedOrders.Columns["SubItemof"].Width = 150;
                    dataGVSelectedOrders.Columns["SubItemof"].Visible = true;
                    dataGVSelectedOrders.Columns["SubItemof"].DisplayIndex = 3;
                }
                else
                {
                    dataGVSelectedOrders.Columns.Add("SubItemof", "Sub Item of");
                    dataGVSelectedOrders.Columns["SubItemof"].Width = 150;
                    dataGVSelectedOrders.Columns["SubItemof"].Visible = false;
                }


            }
            dataGVSelectedorderheader.Rows.Clear();

         
            chkorderheader.Visible = true;
            chkorderheader.Checked = false;
            dataGVSelectedorderheader.Columns["CheckBoxDatefilter"].Visible = true;
            gbOrderDetail.Enabled = false;
        }

        private void ShowhideControls()
        {
            if (rdbd.Checked)
            {
                gbOrderDetail.Visible = false;
                gbInvoiceDetail.Visible = true;
                gbInvoiceDetail.Enabled = true;
            }

            else
            {
                gbInvoiceDetail.Visible = false;
                gbOrderDetail.Visible = true;
                gbOrderDetail.Enabled = true;
            }

        }


        private void frmPrintLabel_FormClosing(object sender, FormClosingEventArgs e)
        {
            //Delete current rdp login user from xml file : Date 29-Aug-2018
            string strRdpUser = string.Empty;
            string strStartupPath = string.Empty;
           
            if (MessageBox.Show("Are you sure you want to exit?", "Label Connector", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                e.Cancel = false;

                strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "RdpUsers.xml");
                strRdpUser = clsRdpUser.GetRdpUserName();
                if (File.Exists(strStartupPath))
                {
                    clsRdpUser.DeleteXmlNode(strStartupPath, clsRdpUser.GetUserId(strRdpUser));
                }
                LabelConnector.QBHelper.CloseQBConnection((Interop.QBFC13.QBSessionManager)lQBSessionManager);

                LabelConnector.WebReference.LicenseService UpdateSession = new LabelConnector.WebReference.LicenseService();
                UpdateSession.UpdateLogOutDetails(Globalvariables.EncryptLoginMailID, "QBLC2021");
                UpdateSession.UpdateCustomersVersionUpgrade(Globalvariables.EncryptLoginMailID, "", "QBLC2021", 3);
                Sessionthread.Abort();
            }
            else
            {
                e.Cancel = true;
            }
        }


        private void PrintReceiptwithSerialNo(int pintItemIncrement, int pintQuantitytoPrint, string snpartno)
        {

            ArrayList alPoItems = new ArrayList();
            string binlocation = string.Empty;
            char[] delim = new char[] { '/' };
            string[] parts;

            lobjQBConfiguration = new QBConfiguration();

            try
            {

                lobjDataExtension = null;

                foreach (Process clsProcess in Process.GetProcesses())
                {
                    if (clsProcess.ProcessName.StartsWith("bartend"))
                    {
                        clsProcess.Kill();
                        clsProcess.WaitForExit();
                    }
                }
                BarTender.Application BtApp = default(BarTender.Application);
                BarTender.Format BtFormat = default(BarTender.Format);
                BarTender.SubString BtSubString = default(BarTender.SubString);

                OdbcConnection Cn = new OdbcConnection(ConfigurationManager.AppSettings["quickbookDSN"]);

                string btNamedSubString = string.Empty;
                string strProdLblPath = "";

                string strProdPrinter = "";
                XmlDocument xmlDoc = new XmlDocument();
                // Uses reflection to find the location of the config file.
                System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                if (!FileInfo.Exists)
                {
                    throw new Exception("Missing config file");
                }
                xmlDoc.Load(FileInfo.FullName);
                // Finds the right node and change it to the new value.
                System.Xml.XmlNode Node = null;
                XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");
                foreach (XmlNode Node_loopVariable in appsettingNodes)
                {
                    Node = Node_loopVariable;
                    if (Node.Name == "add")
                    {
                        if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                        {
                            strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                        }

                    }
                }
                string strLabelName = string.Empty;

                strLabelName = cmbLabelName.Text;

                strProdPrinter = cmbLabelPrinter.Text;

                string lstrPropertyValue = string.Empty;
                BtApp = new BarTender.ApplicationClass();
                BtFormat = new BarTender.Format();

                if ((cmbLabelName.SelectedIndex != 0))
                {
                    try
                    {

                        this.Cursor = Cursors.WaitCursor;


                        BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                        int i = 1;
                        int boxqtynumerator = 1;

                        ArrayList alLineItem = null;


                        clsPurchaseOrderLine objclsPurchaseOrderLine = null;
                        Type objClsType;
                        object strPropertyValue = null;


                        objclsPurchaseOrderLine = new clsPurchaseOrderLine();
                        if (lstrQBFileMode != "Close")
                        {

                            // logic for printing serialNo

                            objclsPurchaseOrderLine.PurchaseOrderLineItemRefFullName = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineItemRefFullName"].Value);

                            objclsPurchaseOrderLine.SubItemOf = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["purchaseordercombineItem"].Value);

                            objclsPurchaseOrderLine.PurchaseOrderLineDesc = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineDesc"].Value);
                            objclsPurchaseOrderLine.RecQty = Convert.ToDouble(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineQuantity"].Value);
                            objclsPurchaseOrderLine.PurchaseOrderLineQtytoPrint = Convert.ToDouble(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineQuantityToPrint"].Value);
                            objclsPurchaseOrderLine.Entry2 = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineSN"].Value);

                            objclsPurchaseOrderLine.Entry1 = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineExpDate"].Value);
                            objclsPurchaseOrderLine.ReceiptSerialNumber = snpartno; //SerailNo

                            parts = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineBin"].Value).Split(delim, StringSplitOptions.RemoveEmptyEntries);
                            if (parts.Length > 1)
                            {
                                objclsPurchaseOrderLine.Site = parts[0] != null ? parts[0].ToString() : null;
                                objclsPurchaseOrderLine.Bin = parts[1] != null ? parts[1].ToString() : null;
                            }
                            else if (parts.Length == 1)
                            {
                                objclsPurchaseOrderLine.Site = parts[0] != null ? parts[0].ToString() : null;
                            }

                            objclsPurchaseOrderLine.BarCodeValue = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineBarCode"].Value);
                            objclsPurchaseOrderLine.RefNumber = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLinePONumber"].Value);
                            alPoItems.Add(objclsPurchaseOrderLine);
                            alLineItem = alPoItems;


                        }
                        else
                        {

                        }
                        objClsType = objclsPurchaseOrderLine.GetType();


                        boxqtynumerator = 0;

                        btNamedSubString = "";
                        i = 1;

                        while (i <= BtFormat.NamedSubStrings.Count)
                        {

                            BtSubString = BtFormat.NamedSubStrings.GetSubString(i);
                            int y = 0;
                            while (y <= alLineItem.Count - 1)
                            {
                                try
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.Trim());

                                    strPropertyValue = objPropertyInfo.GetValue((clsPurchaseOrderLine)alLineItem[y], null);


                                }
                                catch (Exception ex)
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;
                                        if (lobjDataExtension.ContainsKey(BtSubString.Name.ToString().Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(BtSubString.Name.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception exExt)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    finally
                                    {
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strPropertyValue);
                                    }
                                }
                                lstrPropertyValue = Convert.ToString(strPropertyValue);

                                btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                                y += 1;
                            }
                            i += 1;

                        } //end of while

                        string strDelimiter = string.Concat('\r', '\n');

                        BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);


                        //BtFormat.IdenticalCopiesOfLabel = pintQuantitytoPrint;
                        BtFormat.IdenticalCopiesOfLabel = 1;

                        BtFormat.PrintOut(false, false);
                        boxqtynumerator += 1;
                        // } //end of first while

                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show(ex.Message, "Label Connector");
                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Label Printing is having some problem.:-" + ex.Message + ":" + ex.StackTrace);
                    }
                    finally
                    {
                        BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                        BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                        BtSubString = null;
                        BtFormat = null;
                        BtApp = null;
                        foreach (Process clsProcess in Process.GetProcesses())
                        {
                            if (clsProcess.ProcessName.StartsWith("bartend"))
                            {
                                clsProcess.Kill();
                                clsProcess.WaitForExit();
                            }
                        }

                        if (Cn.State == ConnectionState.Open)
                        {
                            Cn.Close();
                            Cn.Dispose();
                        }
                        System.Threading.Thread.Sleep(1000);
                        this.Cursor = Cursors.Default;
                        btnPrint.Enabled = true;
                    }
                }
                else
                {
                    MessageBox.Show("Printing Error: " + "Please Select Label");
                }
                // }


                // }
                //save selected label :Date 23-Feb-2017
                //lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicelabel");

                // }
                //}
                // }

                //}
                //else
                //{
                //    MessageBox.Show("Select Label", "Label Connector");
                //}
                //btnClear.Enabled = true;
                //btnPrint.Enabled = true;
            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
                System.Threading.Thread.Sleep(500);
                btnPrint.Enabled = false;
                btnClear.Enabled = true;
            }
        }

        //print po receipt item with serial numbers for UDF Labels
        private void PrintReceiptwithSerialNoUDF(int pintItemIncrement, int pintQuantitytoPrint, string snpartno, string pstrLabelName, string pstrTemplateWidth, string pstrTemplateHeight, string pstrTemplateTransType, int pintquantity, int pintpoquantity, bool isIncrementcounter, List<clsTemplateLabelXmlwork> objfieldlist, Dictionary<string, string> lobjDataExtension)
        {

            ArrayList alPoItems = new ArrayList();
            string binlocation = string.Empty;
            char[] delim = new char[] { '/' };
            string[] parts;
            string editDesc = string.Empty;

            lobjQBConfiguration = new QBConfiguration();

            try
            {

                lobjDataExtension = null;



                string btNamedSubString = string.Empty;
                string strProdLblPath = "";

                string strProdPrinter = "";

                string strLabelName = string.Empty;

                strLabelName = cmbLabelName.Text;

                strProdPrinter = cmbLabelPrinter.Text;

                string lstrPropertyValue = string.Empty;

                if ((cmbLabelName.SelectedIndex != 0))
                {
                    try
                    {

                        // this.Cursor = Cursors.WaitCursor;


                        //  BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                        int i = 1;
                        int boxqtynumerator = 1;

                        ArrayList alLineItem = null;


                        clsPurchaseOrderLine objclsPurchaseOrderLine = null;
                        // Type objClsType;
                        //object strPropertyValue = null;


                        objclsPurchaseOrderLine = new clsPurchaseOrderLine();
                        //  if (lstrQBFileMode != "Close")
                        // {

                        // logic for printing serialNo
                        editDesc = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineDesc"].Value);
                        objclsPurchaseOrderLine.PurchaseOrderLineItemRefFullName = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineItemRefFullName"].Value);

                        objclsPurchaseOrderLine.SubItemOf = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["purchaseordercombineItem"].Value);

                        objclsPurchaseOrderLine.PurchaseOrderLineDesc = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineDesc"].Value);
                        objclsPurchaseOrderLine.RecQty = Convert.ToDouble(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineQuantity"].Value);
                        objclsPurchaseOrderLine.PurchaseOrderLineQtytoPrint = Convert.ToDouble(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineQuantityToPrint"].Value);
                        objclsPurchaseOrderLine.Entry2 = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineSN"].Value);

                        objclsPurchaseOrderLine.Entry1 = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineExpDate"].Value);
                        objclsPurchaseOrderLine.ReceiptSerialNumber = snpartno; //SerailNo

                        parts = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineBin"].Value).Split(delim, StringSplitOptions.RemoveEmptyEntries);
                        if (parts.Length > 1)
                        {
                            objclsPurchaseOrderLine.Site = parts[0] != null ? parts[0].ToString() : null;
                            objclsPurchaseOrderLine.Bin = parts[1] != null ? parts[1].ToString() : null;
                        }
                        else if (parts.Length == 1)
                        {
                            objclsPurchaseOrderLine.Site = parts[0] != null ? parts[0].ToString() : null;
                        }

                        objclsPurchaseOrderLine.BarCodeValue = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLineBarCode"].Value);
                        objclsPurchaseOrderLine.RefNumber = Convert.ToString(DataGVItems.Rows[pintItemIncrement].Cells["PurchaseOrderLinePONumber"].Value);
                        alPoItems.Add(objclsPurchaseOrderLine);
                        alLineItem = alPoItems;
                        //put create pdf, image function

                        //create pdf and  image
                        //foreach (var varintemincr in objfieldlist)
                        //{
                        //    if (varintemincr.datasourcetext != null)
                        //    {
                        //        if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                        //        {
                        //            isIncrementcounter = true;
                        //            break;
                        //        }
                        //    }
                        //}
                        foreach (var varintemincr in objfieldlist)
                        {
                            if (varintemincr.datasourcetext != null)
                            {

                                if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
                                {
                                    char charArr = varintemincr.delimiter.ToCharArray()[0];

                                    string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

                                    for (int h = 0; h < incrementfieldlist.Length; h++) //loop
                                    {
                                        if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
                                        {
                                            isIncrementcounter = true;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                    {
                                        isIncrementcounter = true;
                                        break;
                                    }

                                }
                            }
                        }
                        if (isIncrementcounter == true)
                        {

                            lobjporeceiptTemplatexml.PrintTemplateForPOIncrementCounter(pstrLabelName, pstrTemplateWidth, pstrTemplateHeight, pstrTemplateTransType, pintquantity, pintpoquantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                            //print multiple images:10-APR-2019
                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");
                            PrintMultipleImages(filePath);
                        }
                        else
                        {
                            lobjporeceiptTemplatexml.PrintTemplateForPOMultiple(pstrLabelName, pstrTemplateWidth, pstrTemplateHeight, pstrTemplateTransType, pintquantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());

                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff");

                            Print(filePath, pintquantity);
                        }


                        //}
                        //else
                        //{

                        //}
                        // objClsType = objclsPurchaseOrderLine.GetType();


                        //  boxqtynumerator = 0;

                        //btNamedSubString = "";
                        //i = 1;

                        //while (i <= BtFormat.NamedSubStrings.Count)
                        //{

                        //    BtSubString = BtFormat.NamedSubStrings.GetSubString(i);
                        //    int y = 0;
                        //    while (y <= alLineItem.Count - 1)
                        //    {
                        //        try
                        //        {

                        //            PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.Trim());

                        //            strPropertyValue = objPropertyInfo.GetValue((clsPurchaseOrderLine)alLineItem[y], null);


                        //        }
                        //        catch (Exception ex)
                        //        {
                        //            try
                        //            {
                        //                string lstrPropertyValExt = string.Empty;
                        //                if (lobjDataExtension.ContainsKey(BtSubString.Name.ToString().Trim().ToUpper()))
                        //                {
                        //                    lobjDataExtension.TryGetValue(BtSubString.Name.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                        //                    strPropertyValue = lstrPropertyValExt;
                        //                }
                        //                else
                        //                {
                        //                    strPropertyValue = string.Empty;
                        //                }
                        //            }
                        //            catch (Exception exExt)
                        //            {
                        //                strPropertyValue = string.Empty;
                        //            }
                        //            finally
                        //            {
                        //                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strPropertyValue);
                        //            }
                        //        }
                        //        lstrPropertyValue = Convert.ToString(strPropertyValue);

                        //        btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                        //        y += 1;
                        //    }
                        //    i += 1;

                        //} //end of while

                        //  string strDelimiter = string.Concat('\r', '\n');

                        // BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);


                        //BtFormat.IdenticalCopiesOfLabel = pintQuantitytoPrint;
                        // BtFormat.IdenticalCopiesOfLabel = 1;

                        // BtFormat.PrintOut(false, false);
                        boxqtynumerator += 1;
                        // } //end of first while

                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show(ex.Message, "Label Connector");
                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Label Printing is having some problem.:-" + ex.Message + ":" + ex.StackTrace);
                    }
                    finally
                    {


                        System.Threading.Thread.Sleep(1000);
                        this.Cursor = Cursors.Default;
                        btnPrint.Enabled = true;
                    }
                }
                else
                {
                    MessageBox.Show("Printing Error: " + "Please Select Label");
                }
                // }


                // }
                //save selected label :Date 23-Feb-2017
                //lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicelabel");

                // }
                //}
                // }

                //}
                //else
                //{
                //    MessageBox.Show("Select Label", "Label Connector");
                //}
                //btnClear.Enabled = true;
                //btnPrint.Enabled = true;
            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
                System.Threading.Thread.Sleep(500);
                btnPrint.Enabled = false;
                btnClear.Enabled = true;
            }
        }



        private async void btnPrint_Click(object sender, EventArgs e)
        {
            
            if (lobjQBConfiguration.GetLabelConfigSettings("PrintLabelType") == "U") // print label based on setting for bartender or user defined label
            {
                if (Globalvariables.PrintTemplateStatus == "2")
                {
                    DialogResult dialog = new DialogResult();

                    lbltempName.Text = "";
                    dialog = MessageBox.Show("You have updated the new change in this template, so please reselect the template.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    if (dialog == DialogResult.OK)
                    {
                        Globalvariables.PrintTemplateStatus = "0";
                        btnSelect_Click(sender, e);
                    }
                 }

                    if (rdbInvoice.Checked == true && rdbA.Checked == true)
                       
                {
                    //print Invoice UDF Label

                    PrintInvoiceUDFLabel();

                }
                else if (rdbPO.Checked == true && rdbA.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                {
                    //print Purchase Order UDF Label
                    PrintPOUDFLabel();
                }
                else if (rdbPO.Checked == true && rdbA.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0")
                {
                    //print po item receipts

                    PrintPOReceiptsLabel();

                }
                else if (rdbSO.Checked == true && rdbA.Checked == true)
                {
                    //print Sales Order UDF Label

                    if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {
                        await Task.Run(() => PrintSOLabel());
                    }
                    else
                    {
                        PrintSOUDFLabel();
                    }


                }
                else if (rdbSR.Checked == true && rdbA.Checked == true)
                {
                    //print Sales receipt UDF Label
                    PrintSRUDFLabel();

                }
                return;
            }


            ArrayList arrList = null;
            bool checkAutoStatus = false;
            int sno = 0;
            string fileName = string.Empty;
            string QtyContainercheck = string.Empty;
            string qtypercontainervalue = string.Empty;
            string qtypercontianerField = string.Empty;
            ArrayList alPoItems = new ArrayList();
            string binlocation = string.Empty;
            char[] delim = new char[] { '/' };
            string[] parts;

            clsPurchaseOrderLine objPOLine = new clsPurchaseOrderLine(); //Added by Srinivas on 28-Nov-2017 for getting Item Barcode value
            string strBarcode = string.Empty;//Added by Srinivas on 28-Nov-2017 for assigning Item Barcode value

            StringBuilder sb = new StringBuilder();
            string AutoManualPath = lobjQBConfiguration.GetLabelConfigSettings("AutoManualPath");
            lobjQBConfiguration = new QBConfiguration();
            string checkAuto = lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck");

            int cntChk = 0;

            try
            {
                if (txtQtyToPrint.Visible == true && Convert.ToInt32(txtQtyToPrint.Text) <= 0)
                {
                    MessageBox.Show("Quantity to print should be greater than zero.", "Label Connector");
                    txtQtyToPrint.Focus();
                    return;
                }

                if (cmbLabelPrinter.SelectedIndex == 0) //check printer selection
                {
                    MessageBox.Show("Select Printer", "Label Connector");
                    return;

                }

                if (cmbLabelName.SelectedIndex > 0 || checkAuto == "Auto")
                {
                    btnPrint.Enabled = false;
                    #region Printing Code Using BarTender
                    #region Printing invoice packaging
                    // for invoicepackaging option
                    if (invpackaging.Checked == true && (rdbInvsingle.Checked == true || rdbInvmultiple.Checked == true))
                    {


                        BarTender.Application BtApp = null;
                        BarTender.Format BtFormat = null;
                        BarTender.SubString BtSubString = null;

                        StringBuilder btNamedSubString = new StringBuilder("");
                        int lintPrintedItemCount = 0;
                        try
                        {
                            if (CheckMandetory())
                            {
                                if (DataGVItems.Rows.Count > 0)
                                {

                                    BtApp = default(BarTender.Application);
                                    BtFormat = default(BarTender.Format);
                                    BtSubString = default(BarTender.SubString);
                                    string strProdLblPath = "";
                                    string strProdPrinter = "";
                                    XmlDocument xmlDoc = new XmlDocument();
                                    // Uses reflection to find the location of the config file.
                                    System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                                    System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                                    if (!FileInfo.Exists)
                                    {
                                        throw new Exception("Missing config file");
                                    }
                                    xmlDoc.Load(FileInfo.FullName);
                                    // Finds the right node and change it to the new value.
                                    System.Xml.XmlNode Node = null;
                                    XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");

                                    #region New Code

                                    foreach (XmlNode Node_loopVariable in appsettingNodes)
                                    {
                                        Node = Node_loopVariable;
                                        if (Node.Name == "add")
                                        {
                                            if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                                            {
                                                strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                                            }

                                        }
                                    }
                                    strProdPrinter = cmbLabelPrinter.Text;
                                    string strLabelName = cmbLabelName.Text;
                                    int intQuantity = 0;
                                    string lstrPropertyValExt = string.Empty;

                                    BtApp = new BarTender.ApplicationClass();
                                    BtFormat = new BarTender.FormatClass();
                                    string strPropertyValue = string.Empty;

                                    this.Cursor = Cursors.WaitCursor;
                                    BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                                    lintLastItemIndex1 = 0;
                                    lintLastItemIndex2 = 0;


                                    int lintRowCount = DataGVItems.Rows.Count;
                                    int[] lintarrSubstringIndex = new int[13];
                                    int totalItemsInLabel = 0;
                                    int lntCountRows = 0;
                                    int exitcount = 0;
                                    for (int i = 1; i <= BtFormat.NamedSubStrings.Count; i++)
                                    {
                                        if (BtFormat.NamedSubStrings.GetSubString(i).Name.Contains("InvoiceLineItemRefFullName"))
                                        {
                                            totalItemsInLabel++;
                                        }
                                    }

                                    try
                                    {
                                        int printQuantity = 0;
                                        int qntPrint = Convert.ToInt32(txtQtyToPrint.Text);
                                        do
                                        {
                                            int quantityToPrint = PackagingSettings.QuantityToPrint();
                                            if (totalItemsInLabel < quantityToPrint)
                                            {
                                                MessageBox.Show("Label items does not match with the number of items per page to be printed. Please select proper label", "Label Connector : Error");
                                                this.btnPrint.Enabled = true;
                                                this.btnClear.Enabled = true;
                                                return;
                                            }
                                            int qnt = quantityToPrint;

                                            int selectedRows = 0;
                                            List<int> Row = new List<int>();


                                            foreach (DataGridViewRow dgvr in DataGVItems.Rows)
                                            {
                                                if (Convert.ToBoolean(dgvr.Cells[0].Value) == true)
                                                {

                                                    Row.Add(dgvr.Cells[0].RowIndex);

                                                    selectedRows++;
                                                }
                                            }


                                            lntCountRows = PackagingSettings.GetPrintPageCount(quantityToPrint, selectedRows);

                                            alData = await GetDataSource();
                                            clsInvoice cl = (clsInvoice)alData[0];

                                            int lntprintlable = 0; int lntlabelcount = 0;
                                            int qnty = 1;
                                            int Setrowval = 0;
                                            int matchval = 0;
                                            int lntcountperprint = 0;

                                            int matchprintcount = 0;
                                            ArrayList larritemlist = new ArrayList();


                                        PrintLable:
                                            for (int i = lntlabelcount; i < quantityToPrint; i++) //quantityToPrint
                                            {
                                                if (matchval > 0)
                                                {
                                                    continue;
                                                }
                                                for (int pint = 0; pint < Row.Count; pint++)
                                                {

                                                    Setrowval = (int)Row[pint];

                                                    lntcountperprint++;
                                                    if (lntcountperprint > PackagingSettings.QuantityToPrint())
                                                    {
                                                        int remove = Math.Max(0, PackagingSettings.QuantityToPrint());
                                                        Row.RemoveRange(0, remove);


                                                        break;
                                                    }


                                                    if (Setrowval < DataGVItems.Rows.Count)

                                                    {
                                                        for (int z = 1; z <= BtFormat.NamedSubStrings.Count; z++)
                                                        {
                                                            BtSubString = BtFormat.NamedSubStrings.GetSubString(z);
                                                            if (BtSubString.Name.Equals("InvoiceLineDesc" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 5);
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.Equals("InvoiceLineItemRefFullName" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 4);
                                                                larritemlist.Add(strPropertyValue);
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.Equals("InvoiceLineQuantity" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 2);
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                                                DataGVItems.Rows[Setrowval].Cells["ChkPrintStatus"].Value = "True"; // ##1 :Date 07-May-2018
                                                                                                                                    // DataGVItems.Rows[Setrowval].Cells["ChkPrintStatus"].Style.BackColor = Color.Azure;
                                                            }
                                                            //add new columns price Each and Amount
                                                            if (BtSubString.Name.Equals("InvoiceLineRate" + qnty))
                                                            {

                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 6);

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.Equals("InvoiceLineAmount" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 7);
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            //new colomn other1 added: date 11-25-2016 single mode
                                                            if (BtSubString.Name.ToString().ToLower().Equals("other1" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 9);
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }

                                                            //add  item custom filed support for invoice packaging single:Date:12-02-2016

                                                            foreach (QBLC.clsInvoiceLine.Itemcustomfields item in lobjcustDataExt)
                                                            {
                                                                if (item.CustItemRefFullName.ToLower() == Convert.ToString(DataGVItems.Rows[Setrowval].Cells["InvoiceLineItemRefFullName"].Value).ToLower())
                                                                {
                                                                    if (BtSubString.Name.ToLower().Equals(item.CustItemkey.ToLower() + qnty))
                                                                    {
                                                                        strPropertyValue = item.CustItemkeyvalue;
                                                                        btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                                                    }
                                                                }

                                                            }


                                                            string sourceName = BtSubString.Name.Trim();
                                                            switch (sourceName)
                                                            {
                                                                case "RefNumber":
                                                                    strPropertyValue = Convert.ToString(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[1].Value);
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "ShipAddressAddr1":
                                                                    strPropertyValue = cl.ShipAddressAddr1;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "ShipAddressAddr2":
                                                                    strPropertyValue = cl.ShipAddressAddr2;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "ShipAddressAddr3":
                                                                    strPropertyValue = cl.ShipAddressAddr3;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "ShipAddressAddr4":
                                                                    strPropertyValue = cl.ShipAddressAddr4;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "ShipAddressAddr5":
                                                                    strPropertyValue = cl.ShipAddressAddr5;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "ShipAddress":
                                                                    strPropertyValue = cl.ShipAddressCity + ", " + cl.ShipAddressState + " " + cl.ShipAddressPostalCode;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "ShipDate":
                                                                    btNamedSubString.Append("ShipDate" + '\r' + '\n' + Convert.ToDateTime(cl.ShipDate).ToShortDateString() + '\r' + '\n');
                                                                    break;
                                                                case "BillAddressAddr1":
                                                                    strPropertyValue = cl.BillAddressAddr1;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "BillAddressAddr2":
                                                                    strPropertyValue = cl.BillAddressAddr2;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "BillAddressAddr3":
                                                                    strPropertyValue = cl.BillAddressAddr3;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "BillAddressAddr4":
                                                                    strPropertyValue = cl.BillAddressAddr4;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "BillAddressAddr5":
                                                                    strPropertyValue = cl.BillAddressAddr5;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "BillAddress":
                                                                    strPropertyValue = cl.BillAddressCity + ", " + cl.BillAddressState + " " + cl.BillAddressPostalCode;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "PONumber":
                                                                    strPropertyValue = cl.PONumber;
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "TxnDate":
                                                                    strPropertyValue = cl.TxnDate.ToShortDateString();
                                                                    btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    break;
                                                                case "SalesTaxTotal":
                                                                    if (lntprintlable == lntCountRows - 1)
                                                                    {
                                                                        strPropertyValue = "TAX $ " + cl.SalesTaxTotal.ToString();

                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    }
                                                                    break;
                                                                case "BalanceRemaining":
                                                                    if (lntprintlable == lntCountRows - 1)
                                                                    {
                                                                        strPropertyValue = "TOTAL $ " + cl.BalanceRemaining.ToString();
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    }
                                                                    break;
                                                                case "TotalQty":
                                                                    if (lntprintlable == lntCountRows - 1)
                                                                    {
                                                                        decimal totalQty = 0;
                                                                        for (int k = 0; k < DataGVItems.Rows.Count; k++)
                                                                        {

                                                                            totalQty += Convert.ToDecimal(DataGVItems.Rows[k].Cells["InvoiceLineQuantity"].Value);

                                                                        }
                                                                        strPropertyValue = totalQty.ToString();
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    }
                                                                    break;
                                                                default:
                                                                    break;

                                                            }
                                                        }
                                                        qnty++;
                                                    } //end of for loop items
                                                      //}//true
                                                      //  }
                                                      // }
                                                }
                                                matchval++;
                                                // }// item loop
                                            } //end of for

                                            lntprintlable++;
                                            lntlabelcount = quantityToPrint;
                                            quantityToPrint = quantityToPrint + qnt;

                                            if (lntprintlable <= lntCountRows)
                                            {
                                                matchval = 0;
                                                lntcountperprint = 0;
                                                matchprintcount++;


                                                string strDelimiter = string.Concat('\r', '\n');
                                                BtFormat.NamedSubStrings.SetAll(btNamedSubString.ToString(), strDelimiter);
                                                intQuantity = Convert.ToInt32(txtQtyToPrint.Text.Trim());
                                                strPropertyValue = string.Empty;

                                                BtFormat.PrintOut(false, false);

                                                btNamedSubString.Remove(0, btNamedSubString.Length);
                                                BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                                BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                                BtSubString = null;
                                                BtFormat = null;
                                                BtApp = null;
                                                BtApp = default(BarTender.Application);
                                                BtFormat = default(BarTender.Format);
                                                BtSubString = default(BarTender.SubString);
                                                BtApp = new BarTender.ApplicationClass();
                                                BtFormat = new BarTender.FormatClass();
                                                this.Cursor = Cursors.WaitCursor;
                                                BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);


                                                //larritemlist.Clear();
                                                if (selectedRows <= PackagingSettings.QuantityToPrint() && Row.Count == selectedRows)
                                                {
                                                    break;
                                                }
                                                if (lntprintlable != lntCountRows)
                                                {

                                                    qnty = 1;
                                                    goto PrintLable;
                                                }
                                            }

                                            printQuantity++;
                                        }
                                        while (printQuantity < qntPrint);
                                        //save selected label :Date 27-Mar-2017
                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicePacklabel");


                                        #endregion new code

                                    }
                                    catch (System.Exception ex)
                                    {
                                        MessageBox.Show(ex.Message, "Label Connector");
                                    }
                                    finally
                                    {
                                        BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                        BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                        BtSubString = null;
                                        BtFormat = null;
                                        BtApp = null;
                                        foreach (Process clsProcess in Process.GetProcesses())
                                        {
                                            if (clsProcess.ProcessName.StartsWith("bartend"))
                                            {
                                                clsProcess.Kill();
                                                clsProcess.WaitForExit();
                                            }
                                        }
                                        System.Threading.Thread.Sleep(500);
                                        this.Cursor = Cursors.Default;
                                    }
                                }
                                //To print multiple invoice packaging
                                else
                                {
                                    for (int p = 0; p < dataGVSelectedorderheader.Rows.Count; p++)
                                    {
                                        if (Convert.ToString(dataGVSelectedorderheader.Rows[p].Cells[0].Value) == "True")
                                        {
                                            lstrInvnumber = Convert.ToString(dataGVSelectedorderheader.Rows[p].Cells[2].Value);
                                            dtPrintInvoicedata = new DataTable();
                                            dtPrintInvoicedata = GetSelectedInvoiceItemsToPrint(lstrInvnumber, lobjcustDataExt);

                                            BtApp = default(BarTender.Application);
                                            BtFormat = default(BarTender.Format);
                                            BtSubString = default(BarTender.SubString);
                                            string strProdLblPath = "";
                                            string strProdPrinter = "";
                                            XmlDocument xmlDoc = new XmlDocument();
                                            // Uses reflection to find the location of the config file.
                                            System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                                            System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                                            if (!FileInfo.Exists)
                                            {
                                                throw new Exception("Missing config file");
                                            }
                                            xmlDoc.Load(FileInfo.FullName);
                                            // Finds the right node and change it to the new value.
                                            System.Xml.XmlNode Node = null;
                                            XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");

                                            #region New Code

                                            foreach (XmlNode Node_loopVariable in appsettingNodes)
                                            {
                                                Node = Node_loopVariable;
                                                if (Node.Name == "add")
                                                {
                                                    if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                                                    {
                                                        strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                                                    }

                                                }
                                            }
                                            strProdPrinter = cmbLabelPrinter.Text;
                                            string strLabelName = cmbLabelName.Text;
                                            int intQuantity = 0;

                                            BtApp = new BarTender.ApplicationClass();
                                            BtFormat = new BarTender.FormatClass();
                                            string strPropertyValue = string.Empty;

                                            this.Cursor = Cursors.WaitCursor;
                                            BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                                            lintLastItemIndex1 = 0;
                                            lintLastItemIndex2 = 0;

                                            int lintRowCount = dtPrintInvoicedata.Rows.Count;
                                            int[] lintarrSubstringIndex = new int[13];
                                            int totalItemsInLabel = 0;
                                            int lntCountRows = 0;

                                            for (int i = 1; i <= BtFormat.NamedSubStrings.Count; i++)
                                            {
                                                if (BtFormat.NamedSubStrings.GetSubString(i).Name.Contains("InvoiceLineItemRefFullName"))
                                                {
                                                    totalItemsInLabel++;
                                                }
                                            }

                                            try
                                            {
                                                int printQuantity = 0;
                                                string checkcolname = string.Empty;
                                                int ndxvalue = 0;
                                                int qntPrint = Convert.ToInt32(txtQtyToPrint.Text);
                                                do
                                                {
                                                    int quantityToPrint = PackagingSettings.QuantityToPrint();
                                                    if (totalItemsInLabel < quantityToPrint)
                                                    {
                                                        MessageBox.Show("Label items does not match with the number of items per page to be printed. Please select proper label", "Label Connector : Error");
                                                        this.btnPrint.Enabled = true;
                                                        this.btnClear.Enabled = true;
                                                        return;
                                                    }
                                                    int qnt = quantityToPrint;

                                                    lntCountRows = PackagingSettings.GetPrintPageCount(quantityToPrint, lintRowCount);


                                                    int lntprintlable = 0; int lntlabelcount = 0;
                                                    int qnty = 1;


                                                PrintLable:
                                                    objInvoice = new clsInvoice();
                                                    alData = objInvoice.GetInvoiceList(lstrInvnumber);
                                                    clsInvoice cl = (clsInvoice)alData[0];
                                                    for (int i = lntlabelcount; i < quantityToPrint; i++)
                                                    {

                                                        if (i < dtPrintInvoicedata.Rows.Count)
                                                        {
                                                            for (int z = 1; z <= BtFormat.NamedSubStrings.Count; z++)
                                                            {
                                                                BtSubString = BtFormat.NamedSubStrings.GetSubString(z);
                                                                if (BtSubString.Name.Equals("InvoiceLineDesc" + qnty))
                                                                {
                                                                    strPropertyValue = GetPropertyValueForInvMultiple(i, 4); //change 3 to 4
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                }
                                                                if (BtSubString.Name.Equals("InvoiceLineItemRefFullName" + qnty))
                                                                {
                                                                    strPropertyValue = GetPropertyValueForInvMultiple(i, 3); //change  2 to 3
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                }
                                                                if (BtSubString.Name.Equals("InvoiceLineQuantity" + qnty))
                                                                {
                                                                    strPropertyValue = GetPropertyValueForInvMultiple(i, 1); //change index 0 to 1
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                                                }
                                                                //add new columns price Each and Amount
                                                                if (BtSubString.Name.Equals("InvoiceLineRate" + qnty))
                                                                {

                                                                    strPropertyValue = GetPropertyValueForInvMultiple(i, 5);//change 4 to 5

                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                }
                                                                if (BtSubString.Name.Equals("InvoiceLineAmount" + qnty))
                                                                {
                                                                    strPropertyValue = GetPropertyValueForInvMultiple(i, 6); //change 5 to 6
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                }
                                                                //add new column other1 : date 11-25-2016
                                                                if (BtSubString.Name.ToString().ToLower().Equals("other1" + qnty)) //change 6 to 7
                                                                {
                                                                    strPropertyValue = GetPropertyValueForInvMultiple(i, 7);
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                }
                                                                //support item custom fields-method-1 : date 11-28-2016



                                                                for (int c = 8; c < dtPrintInvoicedata.Columns.Count; c++)
                                                                {

                                                                    checkcolname = dtPrintInvoicedata.Columns[c].ColumnName.ToString().ToLower();
                                                                    if (BtSubString.Name.ToString().ToLower().Equals(checkcolname + qnty))
                                                                    {

                                                                        strPropertyValue = dtPrintInvoicedata.Rows[i][checkcolname].ToString();
                                                                        btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                    }
                                                                }


                                                                string sourceName = BtSubString.Name.Trim();
                                                                switch (sourceName)
                                                                {
                                                                    case "RefNumber":
                                                                        strPropertyValue = Convert.ToString(dataGVSelectedorderheader.Rows[p].Cells[2].Value);
                                                                        btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "ShipAddressAddr1":
                                                                        strPropertyValue = cl.ShipAddressAddr1;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "ShipAddressAddr2":
                                                                        strPropertyValue = cl.ShipAddressAddr2;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "ShipAddressAddr3":
                                                                        strPropertyValue = cl.ShipAddressAddr3;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "ShipAddressAddr4":
                                                                        strPropertyValue = cl.ShipAddressAddr4;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "ShipAddressAddr5":
                                                                        strPropertyValue = cl.ShipAddressAddr5;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "ShipAddress":
                                                                        strPropertyValue = cl.ShipAddressCity + ", " + cl.ShipAddressState + " " + cl.ShipAddressPostalCode;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "ShipDate":
                                                                        btNamedSubString.Append("ShipDate" + '\r' + '\n' + Convert.ToDateTime(cl.ShipDate).ToShortDateString() + '\r' + '\n');
                                                                        break;
                                                                    case "BillAddressAddr1":
                                                                        strPropertyValue = cl.BillAddressAddr1;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "BillAddressAddr2":
                                                                        strPropertyValue = cl.BillAddressAddr2;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "BillAddressAddr3":
                                                                        strPropertyValue = cl.BillAddressAddr3;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "BillAddressAddr4":
                                                                        strPropertyValue = cl.BillAddressAddr4;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "BillAddressAddr5":
                                                                        strPropertyValue = cl.BillAddressAddr5;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "BillAddress":
                                                                        strPropertyValue = cl.BillAddressCity + ", " + cl.BillAddressState + " " + cl.BillAddressPostalCode;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "PONumber":
                                                                        strPropertyValue = cl.PONumber;
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "TxnDate":
                                                                        strPropertyValue = cl.TxnDate.ToShortDateString();
                                                                        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;
                                                                    case "SalesTaxTotal":
                                                                        if (lntprintlable == lntCountRows - 1)
                                                                        {
                                                                            strPropertyValue = "TAX $ " + cl.SalesTaxTotal.ToString();
                                                                            btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        }
                                                                        break;
                                                                    case "BalanceRemaining":
                                                                        if (lntprintlable == lntCountRows - 1)
                                                                        {
                                                                            strPropertyValue = "TOTAL $ " + cl.BalanceRemaining.ToString();
                                                                            btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        }
                                                                        break;
                                                                    case "TotalQty":
                                                                        if (lntprintlable == lntCountRows - 1)
                                                                        {
                                                                            decimal totalQty = 0;
                                                                            for (int k = 0; k < dtPrintInvoicedata.Rows.Count; k++)
                                                                            {
                                                                                totalQty += Convert.ToDecimal(dtPrintInvoicedata.Rows[k]["Inv Qty"].ToString());
                                                                            }
                                                                            strPropertyValue = totalQty.ToString();
                                                                            btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        }
                                                                        break;
                                                                    default:
                                                                        break;

                                                                }
                                                            }
                                                            qnty++;
                                                        }
                                                    }
                                                    lntprintlable++;
                                                    lntlabelcount = quantityToPrint;
                                                    quantityToPrint = quantityToPrint + qnt;

                                                    if (lntprintlable <= lntCountRows)
                                                    {
                                                        string strDelimiter = string.Concat('\r', '\n');
                                                        BtFormat.NamedSubStrings.SetAll(btNamedSubString.ToString(), strDelimiter);
                                                        intQuantity = Convert.ToInt32(txtQtyToPrint.Text.Trim());

                                                        BtFormat.PrintOut(false, false);
                                                        btNamedSubString.Remove(0, btNamedSubString.Length);
                                                        BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                                        BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                                        BtSubString = null;
                                                        BtFormat = null;
                                                        BtApp = null;
                                                        BtApp = default(BarTender.Application);
                                                        BtFormat = default(BarTender.Format);
                                                        BtSubString = default(BarTender.SubString);
                                                        BtApp = new BarTender.ApplicationClass();
                                                        BtFormat = new BarTender.FormatClass();
                                                        this.Cursor = Cursors.WaitCursor;
                                                        BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);
                                                        if (lntprintlable != lntCountRows)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            qnty = 1;
                                                            goto PrintLable;
                                                        }
                                                    }

                                                    printQuantity++;
                                                }
                                                while (printQuantity < qntPrint);

                                                #endregion new code

                                            }
                                            catch (System.Exception ex)
                                            {
                                                MessageBox.Show(ex.Message, "Label Connector");
                                            }
                                            finally
                                            {
                                                BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                                BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                                BtSubString = null;
                                                BtFormat = null;
                                                BtApp = null;
                                                foreach (Process clsProcess in Process.GetProcesses())
                                                {
                                                    if (clsProcess.ProcessName.StartsWith("bartend"))
                                                    {
                                                        clsProcess.Kill();
                                                        clsProcess.WaitForExit();
                                                    }
                                                }
                                                System.Threading.Thread.Sleep(500);
                                                this.Cursor = Cursors.Default;
                                            }
                                        }
                                    }
                                    //save selected label :Date 27-Mar-2017
                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicePacklabel");

                                }
                            }
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show(ex.Message, "Label Connector");
                        }
                        finally
                        {
                            this.Cursor = Cursors.Default;
                        }
                    }
                    #endregion
                    else if (rdbB.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()) && invpackaging.Checked == false)
                    {
                        if (CheckMandetory())
                        {

                            foreach (Process clsProcess in Process.GetProcesses())
                            {
                                if (clsProcess.ProcessName.StartsWith("bartend"))
                                {
                                    clsProcess.Kill();
                                    clsProcess.WaitForExit();
                                }
                            }


                            BarTender.Application BtApp = default(BarTender.Application);
                            BarTender.Format BtFormat = default(BarTender.Format);
                            BarTender.SubString BtSubString = default(BarTender.SubString);


                            OdbcCommand printCmd = default(OdbcCommand);
                            OdbcDataReader printReader = default(OdbcDataReader);
                            OdbcConnection Cn = new OdbcConnection(ConfigurationManager.AppSettings["quickbookDSN"]);


                            string btNamedSubString = "";
                            string strPrintQuery = "";
                            //Dim strProdLblPath As String = System.Configuration.ConfigurationManager.AppSettings("LabelPath").ToString()
                            string strProdLblPath = "";
                            string strProdPrinter = "";
                            //string strWeatherLabel = "";
                            XmlDocument xmlDoc = new XmlDocument();
                            // Uses reflection to find the location of the config file.
                            System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                            System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                            if (!FileInfo.Exists)
                            {
                                throw new Exception("Missing config file");
                            }
                            xmlDoc.Load(FileInfo.FullName);
                            // Finds the right node and change it to the new value.
                            System.Xml.XmlNode Node = null;
                            XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");


                            foreach (XmlNode Node_loopVariable in appsettingNodes)
                            {
                                Node = Node_loopVariable;
                                // skip any comments
                                if (Node.Name == "add")
                                {
                                    if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                                    {
                                        strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                                    }
                                    //weateher label code commented on 01/13/2015
                                    //if (Node.Attributes.GetNamedItem("key").Value == "WeatherLabelPath")
                                    //{
                                    //    strWeatherLabel = Node.Attributes.GetNamedItem("value").Value;
                                    //}
                                }
                            }

                            string strLabelName = cmbLabelName.Text;
                            strProdPrinter = cmbLabelPrinter.Text;
                            int intQuantity = 0;
                            string lstrPropertyValue = string.Empty;
                            string QuantityToPrintOnLabel = string.Empty;


                            BtApp = new BarTender.ApplicationClass();

                            BtFormat = new BarTender.Format();



                            if ((cmbLabelName.SelectedIndex != 0) || (checkAuto == "Auto"))
                            {
                                try
                                {
                                    lobjDataExtension = null;
                                    this.Cursor = Cursors.WaitCursor;
                                    intQuantity = Convert.ToInt32(txtQtyToPrint.Text);



                                    BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                                    int i = 1;
                                    ArrayList alLineItem = null;
                                    clsPurchaseOrderLine objclsPurchaseOrderLine = null;
                                    clsSalesOrderLine objclsSalesOrderLine = null;
                                    clsInvoiceLine objclsInvoiceLine = null;
                                    Type objClsType;
                                    object strPropertyValue = null;

                                    if (rdbPO.Checked == true)
                                    {
                                        objclsPurchaseOrderLine = new clsPurchaseOrderLine();
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Purchase Order Line Item object is Created...");
                                        if (lstrQBFileMode == "Close")
                                        {
                                            alLineItem = objclsPurchaseOrderLine.GetPOLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, lQBSessionManager, moQuickBooksAccountConfig);
                                        }
                                        else
                                        {

                                            alLineItem = objclsPurchaseOrderLine.GetPOLine(txtQtyOnLabel.Text.ToString(), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);
                                        }
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Purchase Order Line Item object is filled with data, fetched from QuickBooks...");
                                        objClsType = objclsPurchaseOrderLine.GetType();
                                    }
                                    else if (rdbSO.Checked == true)
                                    {
                                        objclsSalesOrderLine = new clsSalesOrderLine();

                                        objClsType = objclsSalesOrderLine.GetType();
                                        //add out parameter to print custom field in sales order:added by khushal:date:01/24/2013


                                        if (lstrQBFileMode == "Close")
                                        {
                                            alLineItem = objclsSalesOrderLine.GetSOLine(txtQtyOnLabel.Text.ToString(), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["SalesOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                                        }
                                        else
                                        {
                                            //for sales order single
                                            alLineItem = objclsSalesOrderLine.GetSOLine(txtQtyOnLabel.Text.ToString(), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["SalesOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value, lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField").ToString().ToUpper(), out lobjDataExtension);
                                        }


                                    }
                                    else
                                    {
                                        objclsInvoiceLine = new clsInvoiceLine();

                                        //To add shipAddress


                                        if (lstrQBFileMode == "Close")
                                        {

                                            alLineItem = objclsInvoiceLine.GetINVLine(txtQtyOnLabel.Text.ToString(), Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                                        }
                                        else
                                        {


                                            alLineItem = objclsInvoiceLine.GetINVLine(txtQtyOnLabel.Text.ToString(), Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, InvoiceCustomerName, out lobjDataExtension, string.Empty, string.Empty);

                                        }

                                        objClsType = objclsInvoiceLine.GetType();


                                    }


                                    i = 1;
                                    while (i <= BtFormat.NamedSubStrings.Count)
                                    {
                                        BtSubString = BtFormat.NamedSubStrings.GetSubString(i);

                                        int y = 0;

                                        while (y <= alLineItem.Count - 1)
                                        {
                                            try
                                            {
                                                //PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name);//Commented by Srinivas on 11-Aug-2017
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.ToString().Replace(System.Environment.NewLine, string.Empty).Trim()); //Added by Srinivas on 11-Aug-2017

                                                if (rdbPO.Checked == true)
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsPurchaseOrderLine)alLineItem[y], null);
                                                }
                                                else if (rdbSO.Checked == true)
                                                {


                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesOrderLine)alLineItem[y], null);


                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsInvoiceLine)alLineItem[y], null);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(BtSubString.Name.ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(BtSubString.Name.ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;

                                                }
                                                finally
                                                {

                                                }
                                            }

                                            lstrPropertyValue = Convert.ToString(strPropertyValue);



                                            if (BtSubString.Name == "SalesOrderLineQuantity")
                                            {
                                                QuantityToPrintOnLabel = txtQtyOnLabel.Text;//Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim()) / Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantityToPrint"].Value.ToString().Trim());
                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + QuantityToPrintOnLabel.ToString() + '\r' + '\n';
                                            }
                                            else if (BtSubString.Name == "InvoiceLineQuantity")
                                            {
                                                QuantityToPrintOnLabel = txtQtyOnLabel.Text;//Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim()) / Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantityToPrint"].Value.ToString().Trim());
                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + QuantityToPrintOnLabel.ToString() + '\r' + '\n';
                                            }
                                            else
                                            {
                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';//BtSubString.Name + '\r' + '\n' + Convert.ToString(txtQtyOnLabel.Text) + '\r' + '\n';

                                            }
                                            y += 1;
                                        }
                                        i += 1;
                                    }
                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender file is opened to get label names end...");

                                    if (btNamedSubString != string.Empty)
                                    {
                                        string strDelimiter = string.Concat('\r', '\n');
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " String to be Printed:-" + btNamedSubString);
                                        BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " No Of copies to be printed:-" + intQuantity.ToString());
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Printer Name:-" + strProdPrinter.ToString());
                                        BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "Substring values are send to Bartender for printing start...");
                                        BtFormat.PrintOut(false, false);
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Substring values are send to Bartender for printing end...");
                                    }
                                }
                                catch (System.Exception ex)
                                {

                                    MessageBox.Show(ex.Message, "Label Connector");
                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label Printing is having some problem.:-" + ex.Message + ":" + ex.StackTrace);

                                }
                                finally
                                {
                                    BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                    BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                    BtSubString = null;
                                    BtFormat = null;
                                    BtApp = null;
                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender is closed.");
                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender object clean up start.");
                                    foreach (Process clsProcess in Process.GetProcesses())
                                    {
                                        if (clsProcess.ProcessName.StartsWith("bartend"))
                                        {
                                            clsProcess.Kill();
                                            clsProcess.WaitForExit();
                                        }
                                    }

                                    if (Cn.State == ConnectionState.Open)
                                    {
                                        Cn.Close();
                                        Cn.Dispose();
                                    }
                                    System.Threading.Thread.Sleep(1000);
                                    this.Cursor = Cursors.Default;
                                    btnPrint.Enabled = true;
                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender object clean up end.");

                                }
                                //save label path for single mode : 13-Mar-2017
                                if (rdbPO.Checked == true && rdbB.Checked == true)
                                {
                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveposinglelabel");

                                }
                            }
                            else
                            {
                                MessageBox.Show("Printing Error: " + "Please Select Label");
                            }
                        }
                    }

                    //print filter Invoices or sales orders :Date 08-09-2015
                    else if (string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {
                        //int WL = 1;
                        string Invsearchno = string.Empty;
                        // ArrayList lstSoarraylist = new ArrayList();
                        //clsSalesOrderLine clsfilterso = null;
                        List<clsInvoiceLine> clsfilterinv = new List<clsInvoiceLine>();

                        if (CheckMandetory())
                        {

                            if (dataGVSelectedorderheader.Rows.Count > 0)
                            {
                                for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                                {
                                    if (dataGVSelectedorderheader.Rows[i].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "False")
                                    {
                                        cntChk = cntChk + 1;
                                    }
                                }
                                if (cntChk == dataGVSelectedorderheader.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }


                                for (int j = 0; j < dataGVSelectedorderheader.Rows.Count; j++)
                                {

                                    if (dataGVSelectedorderheader.Rows[j].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "True")
                                    {

                                        Invsearchno = Convert.ToString(dataGVSelectedorderheader.Rows[j].Cells[2].Value);

                                        //check if selected type is invoice or sales order

                                        if (rdbInvoice.Checked == true)
                                        {

                                            GetInvFilterOrders(Invsearchno);

                                        }
                                        else
                                        {
                                            GetSoFilterOrders(Invsearchno);
                                        }

                                    }


                                }
                            }//end of if
                        }


                    }
                    else if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {
                        int WL = 1;
                        if (CheckMandetory())
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                {
                                    if (DataGVItems.Rows[i].Cells["CheckBox"].Value != null)
                                    {
                                        if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                        {
                                            cntChk = cntChk + 1;
                                        }
                                    }
                                }
                                if (cntChk == DataGVItems.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }
                                clsInvoiceLine objclsInvoiceLine1 = new clsInvoiceLine();
                                int increment = 1;
                                int serialnocount = 0;
                                string snoindex = string.Empty;
                                string[] SerialNoParts;
                                char[] snsplit = new char[] { ',' };
                                int qtyvalue = 0;
                                bool isNumericQuantity = false;

                                for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                {


                                    //SerialNo:Date 03-Mar-2017
                                    //print items with serial number
                                    if (DataGVItems.Columns.Contains("SerialNo"))
                                    {
                                        if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0" && !string.IsNullOrWhiteSpace(Convert.ToString(DataGVItems.Rows[j].Cells["SerialNo"].Value)))
                                        {

                                            if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                            {
                                                SerialNoParts = Convert.ToString(DataGVItems.Rows[j].Cells["SerialNo"].Value).Split(snsplit, StringSplitOptions.RemoveEmptyEntries);

                                                var objreceiptqty = (from receiptqty in lobjclsPurchaseOrderLine
                                                                     where receiptqty.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineItemRefFullName"].Value)
                                                                     select receiptqty.RecQty).LastOrDefault();



                                                //If receiptqty less than or equal to serial numbers
                                                //if (Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value) <= objreceiptqty && SerialNoParts.Length >= Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value))
                                                //if (Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value) <= objreceiptqty && SerialNoParts.Length >= Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))
                                                if (Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value) <= Convert.ToInt32(SerialNoParts.Length))
                                                {

                                                    for (int k = 0; k < SerialNoParts.Length; k++)
                                                    {
                                                        // if (k < Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value))
                                                        if (k < Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))
                                                        {
                                                            PrintReceiptwithSerialNo(j, Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value), SerialNoParts[k].ToString());
                                                        }

                                                    }

                                                } //If receiptqty grater than  to serial number
                                                  // else if (Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value) >= objreceiptqty)
                                                  // else if (Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value) >= objreceiptqty)
                                                else if (Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value) >= Convert.ToInt32(SerialNoParts.Length))
                                                {

                                                    // while (increment <= Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value))
                                                    while (increment <= Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))
                                                    {
                                                        if (SerialNoParts.ElementAtOrDefault(serialnocount) != null)
                                                        {
                                                            snoindex = SerialNoParts[serialnocount].ToString();
                                                        }
                                                        else
                                                        {
                                                            snoindex = string.Empty;
                                                        }

                                                        PrintReceiptwithSerialNo(j, Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value), snoindex);
                                                        increment++;
                                                        serialnocount++;

                                                    }

                                                }
                                            }
                                            continue;

                                        }
                                    }

                                    if (checkAuto == "Auto" && rdbInvoice.Checked == true && rdbA.Checked == true)
                                    {
                                        arrList = objclsInvoiceLine1.GetINVLine(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value), Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, InvoiceCustomerName, out lobjDataExtension, AutoManualPath, lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck"));
                                        foreach (clsInvoiceLine cl in arrList)
                                        {
                                            checkAutoStatus = cl.IsAuto;
                                            fileName = cl.InvoiceLineItemRefFullName;
                                            if (!checkAutoStatus)
                                            {
                                                sno = sno + 1;
                                                goto Found;
                                            }



                                        }
                                    }

                                    if (!((rdbPO.Checked == true || rdbInvoice.Checked == true) && rdbA.Checked == true)) //support purchaseordercustomer for multiple purchase order
                                    {

                                        //skip item having non numeric quantity : 19-Apr-2018
                                        isNumericQuantity = int.TryParse(Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()), out qtyvalue);
                                        if (!isNumericQuantity)
                                        {
                                            continue;
                                        }
                                        //skip items having print lbl qty is 0
                                        else if (Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()) == 0)
                                        {
                                            continue;
                                        }
                                    }

                                    //skip po qty having count zero:Date 22-Feb-2017
                                    if ((rdbA.Checked == true || rdbB.Checked == true) && rdbPO.Checked == true)
                                    {
                                        isNumericQuantity = int.TryParse(Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim()), out qtyvalue);
                                        if (!isNumericQuantity)
                                        {
                                            continue;
                                        }
                                        //skip items having print lbl qty is 0
                                        else if (Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim()) == 0)
                                        {
                                            continue;
                                        }

                                    }
                                    //skip invoice qty having count zero and nonumeric qty :Date 19-Apr-2017
                                    if (rdbInvoice.Checked == true && rdbA.Checked == true)
                                    {
                                        isNumericQuantity = int.TryParse(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim()), out qtyvalue);
                                        if (!isNumericQuantity)
                                        {
                                            continue;
                                        }
                                        //skip items having print lbl qty is 0
                                        else if (Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim()) == 0)
                                        {
                                            continue;
                                        }

                                    }


                                    lobjDataExtension = null;
                                    if (checkAuto == "Manual" || (rdbInvoice.Checked == true || rdbA.Checked == true))
                                    {
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "BarTender service Exist check start...");

                                        if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                        {
                                            foreach (Process clsProcess in Process.GetProcesses())
                                            {
                                                if (clsProcess.ProcessName.StartsWith("bartend"))
                                                {
                                                    clsProcess.Kill();
                                                    clsProcess.WaitForExit();
                                                }
                                            }
                                            QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "BarTender service Exist check end...");

                                            BarTender.Application BtApp = default(BarTender.Application);
                                            BarTender.Format BtFormat = default(BarTender.Format);
                                            BarTender.SubString BtSubString = default(BarTender.SubString);


                                            OdbcCommand printCmd = default(OdbcCommand);
                                            OdbcDataReader printReader = default(OdbcDataReader);
                                            OdbcConnection Cn = new OdbcConnection(ConfigurationManager.AppSettings["quickbookDSN"]);

                                            string btNamedSubString = "";
                                            string strPrintQuery = "";
                                            //Dim strProdLblPath As String = System.Configuration.ConfigurationManager.AppSettings("LabelPath").ToString()
                                            string strProdLblPath = "";
                                            // string strWeatherLabel = "";
                                            string strProdPrinter = "";
                                            XmlDocument xmlDoc = new XmlDocument();
                                            // Uses reflection to find the location of the config file.
                                            System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                                            System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                                            if (!FileInfo.Exists)
                                            {
                                                throw new Exception("Missing config file");
                                            }
                                            xmlDoc.Load(FileInfo.FullName);
                                            // Finds the right node and change it to the new value.
                                            System.Xml.XmlNode Node = null;
                                            XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");
                                            QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "Get label folder path start...");
                                            foreach (XmlNode Node_loopVariable in appsettingNodes)
                                            {
                                                Node = Node_loopVariable;
                                                if (Node.Name == "add")
                                                {
                                                    if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                                                    {
                                                        strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                                                    }
                                                    //weather label code commented on 01/13/2015
                                                    //if (Node.Attributes.GetNamedItem("key").Value == "WeatherLabelPath")
                                                    //{
                                                    //     strWeatherLabel = Node.Attributes.GetNamedItem("value").Value;
                                                    //}
                                                }
                                            }
                                            QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "Get label folder path end...");
                                            string strLabelName = string.Empty;
                                            if (lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck") == "Auto" && (rdbInvoice.Checked == true && rdbA.Checked == true))
                                            {
                                                strProdLblPath = AutoManualPath;
                                                strLabelName = DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value.ToString().Trim() + ".btw";
                                            }
                                            else
                                            {
                                                strLabelName = cmbLabelName.Text;
                                            }


                                            strProdPrinter = cmbLabelPrinter.Text;
                                            int intQuantity = 0;
                                            int intQuantityToPrintOnLabel = 0;
                                            string lstrPropertyValue = string.Empty;
                                            QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Batrender Object Creation start...");
                                            BtApp = new BarTender.ApplicationClass();
                                            // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Batrender Object is Created...");
                                            BtFormat = new BarTender.Format();
                                            QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Batrender Object Creation end...");
                                            // ----------- Code Start Printing Weather Label -----------------
                                            //Printing weather label code commented on 01/13/2015

                                            //if ((ckbWeatherLabel.Checked == true) && (WL == 1) && (lblLowTempValue.Text.ToString() != string.Empty || lblHighTempValue.Text.ToString() != string.Empty))
                                            //    //(ckbWeatherLabel.Checked == true && WL == 1)
                                            //{
                                            //    int k = 1;
                                            //    BtFormat = BtApp.Formats.Open(strWeatherLabel, true, strProdPrinter);
                                            //    while (k <= BtFormat.NamedSubStrings.Count)
                                            //    {
                                            //        BtSubString = BtFormat.NamedSubStrings.GetSubString(k);

                                            //        if (BtSubString.Name == "ShipAddressAddr1") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblStoreNameValue.Text.ToString() + '\r' + '\n';
                                            //        if (BtSubString.Name == "RefNumber") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblInvoiceNumberValue.Text.ToString() + '\r' + '\n';
                                            //        if (BtSubString.Name == "LowTemp") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblLowTempValue.Text.ToString() + '\r' + '\n';
                                            //        if (BtSubString.Name == "HighTemp") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblHighTempValue.Text.ToString() + '\r' + '\n';
                                            //        k++;
                                            //    }
                                            //    if (btNamedSubString != string.Empty)
                                            //    {
                                            //        string strDelimiter = string.Concat('\r', '\n');
                                            //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " String to be Printed:-" + btNamedSubString);
                                            //        BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);
                                            //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " No Of copies to be printed:-" + intQuantity.ToString());
                                            //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Printer Name:-" + strProdPrinter.ToString());
                                            //        BtFormat.IdenticalCopiesOfLabel = 1;//Convert.ToInt32(intQuantity);
                                            //        BtFormat.PrintOut(false, false);
                                            //        WL = 2;
                                            //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Substring values are send to Bartender for printing...");
                                            //    }
                                            //}

                                            //btNamedSubString = "";

                                            //------------Code End for Printing Weather Label---------------


                                            if ((cmbLabelName.SelectedIndex != 0) || (checkAuto == "Auto"))
                                            {
                                                try
                                                {

                                                    this.Cursor = Cursors.WaitCursor;

                                                    if (rdbPO.Checked == true)
                                                    {
                                                        intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value);
                                                    }
                                                    else if (rdbSO.Checked == true)
                                                    {
                                                        intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantity"].Value);
                                                    }
                                                    else
                                                    {
                                                        intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value);
                                                    }

                                                    //if (intQuantity > 30)
                                                    //{
                                                    //    intQuantity = 30;
                                                    //}

                                                    BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender(.btw) file is opened for printing start");

                                                    int i = 1;

                                                    ArrayList alLineItem = null;
                                                    clsPurchaseOrderLine objclsPurchaseOrderLine = null;
                                                    clsSalesOrderLine objclsSalesOrderLine = null;
                                                    clsInvoiceLine objclsInvoiceLine = null;
                                                    Type objClsType;
                                                    object strPropertyValue = null;
                                                    string flipPoQtyvalue = string.Empty;

                                                    if (rdbPO.Checked == true)
                                                    {



                                                        objclsPurchaseOrderLine = new clsPurchaseOrderLine();
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Purchase Order Line Item object is Created...");
                                                        if (lstrQBFileMode == "Close")
                                                        {
                                                            alLineItem = objclsPurchaseOrderLine.GetPOLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, lQBSessionManager, moQuickBooksAccountConfig);
                                                        }
                                                        else
                                                        {
                                                            //print multiple po
                                                            if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                                            {
                                                                //PO QtyperCase: remove select divisor condtion Date:13-Dec-2018

                                                                //if (cmbcustomfield.SelectedIndex == 0)
                                                                //{
                                                                //    MessageBox.Show("Please select divisor.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                                //    cmbcustomfield.Focus();
                                                                //    return;
                                                                //}

                                                                int QtyOnLableValue = 0;
                                                                //Print 1 Label by default is selected,pass the Quotient to Qty
                                                                flipPoQtyvalue = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty");
                                                                if (cmbcustomfield.SelectedIndex > 0)
                                                                {
                                                                    //if (flipPoQtyvalue == "N")
                                                                    //{
                                                                    //    if (cmbcustomfield.SelectedIndex > 0)
                                                                    //    {
                                                                    //        QtyOnLableValue = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value) / Convert.ToDouble(cmbcustomfield.SelectedValue)));
                                                                    //    }

                                                                    //}
                                                                    //else if (flipPoQtyvalue == "Y")
                                                                    //{
                                                                    //    // QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                                                                    //    if (cmbcustomfield.SelectedIndex > 0)
                                                                    //    {
                                                                    //        QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value);
                                                                    //    }

                                                                    //}

                                                                    QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                                                                }
                                                                else //pirnt prev original
                                                                {
                                                                    QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                                                                }
                                                                //add qtyonlabel parameter to print Date: 16-Feb-2017
                                                                alLineItem = objclsPurchaseOrderLine.GetPOLine(Convert.ToString(QtyOnLableValue), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);
                                                            }
                                                            else
                                                            {


                                                                // Changed logic for multiple PO PWH:Date 11-22-2016

                                                                //alLineItem = GetPOItemReceiptPrintDetails();
                                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " read receipt item data from datagrid started...");

                                                                objclsPurchaseOrderLine.PurchaseOrderLineItemRefFullName = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineItemRefFullName"].Value);
                                                                objclsPurchaseOrderLine.SubItemOf = Convert.ToString(DataGVItems.Rows[j].Cells["purchaseordercombineItem"].Value);
                                                                objclsPurchaseOrderLine.PurchaseOrderLineDesc = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineDesc"].Value);
                                                                objclsPurchaseOrderLine.RecQty = Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value);
                                                                objclsPurchaseOrderLine.PurchaseOrderLineQtytoPrint = Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value);
                                                                objclsPurchaseOrderLine.Entry2 = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineSN"].Value);
                                                                //customerJob for receiptmode: 28-Aug-2018
                                                                objclsPurchaseOrderLine.CustomerJob = Convert.ToString(DataGVItems.Rows[j].Cells["customerjob"].Value);

                                                                // expirtydate = Convert.ToDateTime(DataGVItems.Rows[j].Cells["PurchaseOrderLineExpDate"].Value);
                                                                //expirtydate.ToString("MM-dd-yyyy");
                                                                // objclsPurchaseOrderLine.Entry1 = expirtydate.ToString("MM-dd-yyyy");
                                                                objclsPurchaseOrderLine.Entry1 = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineExpDate"].Value);
                                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " read receipt item data bin data started...");
                                                                parts = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineBin"].Value).Split(delim, StringSplitOptions.RemoveEmptyEntries);
                                                                if (parts.Length > 1)
                                                                {
                                                                    objclsPurchaseOrderLine.Site = parts[0] != null ? parts[0].ToString() : null;
                                                                    objclsPurchaseOrderLine.Bin = parts[1] != null ? parts[1].ToString() : null;
                                                                }
                                                                else if (parts.Length == 1)
                                                                {
                                                                    objclsPurchaseOrderLine.Site = parts[0] != null ? parts[0].ToString() : null;
                                                                }
                                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " read receipt item data bin data ended...");
                                                                objclsPurchaseOrderLine.BarCodeValue = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineBarCode"].Value);
                                                                objclsPurchaseOrderLine.RefNumber = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLinePONumber"].Value);

                                                                //Get custom item field for receipt : Date 07-Feb-2017
                                                                arrReceiptCustomItems = objclsPurchaseOrderLine.PoItemDetails(Convert.ToString(DataGVItems.Rows[j].Cells["purchaseordercombineItem"].Value), out lobjDataExtension);

                                                                if (arrReceiptCustomItems.Count > 0 && arrReceiptCustomItems != null)
                                                                {
                                                                    foreach (clsPurchaseOrderLine receiptitem in arrReceiptCustomItems)
                                                                    {
                                                                        objclsPurchaseOrderLine.SalesPrice = receiptitem.SalesPrice;
                                                                    }
                                                                }

                                                                alPoItems.Add(objclsPurchaseOrderLine);

                                                                alLineItem = alPoItems;



                                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " read receipt item data from datagrid end...");

                                                            }
                                                        }
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Purchase Order Line Item object is filled with data, fetched from QuickBooks...");
                                                        objClsType = objclsPurchaseOrderLine.GetType();
                                                    }
                                                    else if (rdbSO.Checked == true)
                                                    {
                                                        QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer");
                                                        qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField");

                                                        objclsSalesOrderLine = new clsSalesOrderLine();
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Sales Order Line Item object is Creation start...");
                                                        objClsType = objclsSalesOrderLine.GetType();
                                                        //out parameter added by khushal:date:01/24/13
                                                        if (lstrQBFileMode == "Close")
                                                        {
                                                            alLineItem = objclsSalesOrderLine.GetSOLine(Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityonLabel"].Value), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                                                        }
                                                        else
                                                        {
                                                            //for sales order multiple
                                                            alLineItem = objclsSalesOrderLine.GetSOLine(Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityonLabel"].Value), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value, lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField").ToString().ToUpper(), out lobjDataExtension);

                                                            //Add support of sales price and discount price : 16th Feb 2018
                                                            if (DataGVItems.Rows[j].Cells["SalesPrice"].Value != null && DataGVItems.Rows[j].Cells["MarkUpPrice"].Value != null)
                                                            {
                                                                foreach (clsSalesOrderLine objitem in alLineItem)
                                                                {
                                                                    objitem.SalesPrice = Convert.ToString(DataGVItems.Rows[j].Cells["SalesPrice"].Value);
                                                                    objitem.MarkUpPrice = Convert.ToString(DataGVItems.Rows[j].Cells["MarkUpPrice"].Value);
                                                                }

                                                                //strMarkUpPriceField = lobjQBConfiguration.GetLabelConfigSettings("MarkUpPriceField");
                                                            }


                                                        }
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Sales Order Line Item object is Creation end");
                                                    }
                                                    else
                                                    {
                                                        objclsInvoiceLine = new clsInvoiceLine();
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Invoice Line Item object is creation start...");
                                                        if (lstrQBFileMode == "Close")
                                                        {
                                                            //alLineItem = objclsInvoiceLine.GetINVLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                                                            alLineItem = objclsInvoiceLine.GetINVLine(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value), Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                                                        }
                                                        else
                                                        {

                                                            //alLineItem = objclsInvoiceLine.GetINVLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);
                                                            //add one perametar AutoManualPath 
                                                            alLineItem = objclsInvoiceLine.GetINVLine(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value), Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, InvoiceCustomerName, out lobjDataExtension, AutoManualPath, lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck"));
                                                            // arrList = alLineItem;

                                                        }
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Invoice Line Item object is creation end...");
                                                        objClsType = objclsInvoiceLine.GetType();
                                                    }
                                                    i = 1;
                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender File is opened to get Label Names start");
                                                    while (i <= BtFormat.NamedSubStrings.Count)
                                                    {

                                                        BtSubString = BtFormat.NamedSubStrings.GetSubString(i);
                                                        int y = 0;
                                                        // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender File is opened to get Label Names start");
                                                        while (y <= alLineItem.Count - 1)
                                                        {
                                                            try
                                                            {
                                                                //PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name); //Commented by Srinivas on 11-Aug-2017
                                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.ToString().Replace(System.Environment.NewLine, string.Empty).Trim()); //Added by Srinivas on 11-Aug-2017
                                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Substring Name:-" + BtSubString.Name);

                                                                if (rdbPO.Checked == true)
                                                                {

                                                                    strPropertyValue = objPropertyInfo.GetValue((clsPurchaseOrderLine)alLineItem[y], null);

                                                                    //commented on 11-22-2016
                                                                    //if (BtSubString.Name.ToLower() == "purchaseorderlinequantity") //set qty on label to 1 for multiple po

                                                                    //{
                                                                    //    strPropertyValue = 1;
                                                                    //}
                                                                    //else
                                                                    //{
                                                                    //    strPropertyValue = objPropertyInfo.GetValue((clsPurchaseOrderLine)alLineItem[y], null);
                                                                    //    //show full customer name for purchase order multiple :H-H 
                                                                    //    //if (lstrPropertyValue.IndexOf(":") > 0 && BtSubString.Name.ToLower() == "purchaseordercustomer")
                                                                    //    //{
                                                                    //    //    lstrPropertyValue = lstrPropertyValue.Substring(0, lstrPropertyValue.IndexOf(':'));
                                                                    //    //}

                                                                    //}
                                                                }
                                                                else if (rdbSO.Checked == true)
                                                                {
                                                                    //commented to show dcno & carrier field in both condition: 16-jan 2017
                                                                    //if (QtyContainercheck == "1") //add dcnumber and carrier field to print label
                                                                    //{
                                                                    //    int printOutQty=0;

                                                                    //    if (BtSubString.Name.ToUpper() == "ENTRYONE")
                                                                    //    {

                                                                    //       strPropertyValue = (txtdecnumber.Text != "" && pnldcnumber.Visible==true) ? txtdecnumber.Text.ToString() : null;

                                                                    //    }
                                                                    //    else if (BtSubString.Name.ToUpper() == "ENTRYTWO")
                                                                    //    {
                                                                    //         if (BtSubString.Value.ToString().ToUpper() == "CARRIER")
                                                                    //         {
                                                                    //             strPropertyValue = (txtcarrier.Text != "" &&  pnlcarrier.Visible==true) ? txtcarrier.Text.ToString() : null;

                                                                    //         }
                                                                    //         else
                                                                    //         {
                                                                    //             strPropertyValue = "SWIFT";
                                                                    //         }

                                                                    //    }
                                                                    //    //Date 19-12-2016
                                                                    //    else  if (BtSubString.Name.ToUpper() == "CONTAINERQTY")
                                                                    //    {
                                                                    //        //provide Total print Qty to label:19-12-2016
                                                                    //        if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                                                    //        {
                                                                    //            lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
                                                                    //            //divide qty by unitpercase value and sent to print

                                                                    //            printOutQty = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()) / Convert.ToDouble(qtypercontainervalue)));

                                                                    //            strPropertyValue = Convert.ToInt32(printOutQty);
                                                                    //            btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                                                                    //        }


                                                                    //    }

                                                                    //    else
                                                                    //    {
                                                                    //        strPropertyValue = objPropertyInfo.GetValue((clsSalesOrderLine)alLineItem[y], null);
                                                                    //    }

                                                                    //}
                                                                    //else
                                                                    //{
                                                                    //    strPropertyValue = objPropertyInfo.GetValue((clsSalesOrderLine)alLineItem[y], null);
                                                                    //}

                                                                    //add QtyContainercheck=0 condtion
                                                                    if (QtyContainercheck == "1" || QtyContainercheck == "0") //add dcnumber and carrier field to print label
                                                                    {
                                                                        int printOutQty = 0;

                                                                        if (BtSubString.Name.ToUpper() == "ENTRYONE")
                                                                        {

                                                                            strPropertyValue = (txtdecnumber.Text != "" && pnldcnumber.Visible == true) ? txtdecnumber.Text.ToString() : null;

                                                                        }
                                                                        else if (BtSubString.Name.ToUpper() == "ENTRYTWO")
                                                                        {
                                                                            //Carrier conditionis commented by srinivas on 28-Sep-2017 for supporting printing value in Entry two
                                                                            //if (BtSubString.Value.ToString().ToUpper() == "CARRIER")
                                                                            //{
                                                                            strPropertyValue = (txtcarrier.Text != "" && pnlcarrier.Visible == true) ? txtcarrier.Text.ToString() : null;

                                                                            //}
                                                                            //else
                                                                            //{
                                                                            //    strPropertyValue = "SWIFT";
                                                                            //}

                                                                        }
                                                                        //Date 19-12-2016
                                                                        else if (BtSubString.Name.ToUpper() == "CONTAINERQTY")
                                                                        {
                                                                            //provide Total print Qty to label:19-12-2016
                                                                            if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                                                            {
                                                                                lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
                                                                                //divide qty by unitpercase value and sent to print

                                                                                printOutQty = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()) / Convert.ToDouble(qtypercontainervalue)));

                                                                                strPropertyValue = Convert.ToInt32(printOutQty);
                                                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                                                                            }


                                                                        }

                                                                        else
                                                                        {
                                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesOrderLine)alLineItem[y], null);
                                                                        }

                                                                    }
                                                                    else
                                                                    {
                                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesOrderLine)alLineItem[y], null);
                                                                    }



                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = objPropertyInfo.GetValue((clsInvoiceLine)alLineItem[y], null);
                                                                }
                                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strPropertyValue);

                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                try
                                                                {
                                                                    string lstrPropertyValExt = string.Empty;
                                                                    if (lobjDataExtension.ContainsKey(BtSubString.Name.ToString().Trim().ToUpper()))
                                                                    {
                                                                        lobjDataExtension.TryGetValue(BtSubString.Name.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                                        strPropertyValue = lstrPropertyValExt;
                                                                    }
                                                                    else
                                                                    {
                                                                        strPropertyValue = string.Empty;
                                                                    }
                                                                }
                                                                catch (Exception exExt)
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }
                                                                finally
                                                                {
                                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strPropertyValue);
                                                                }
                                                            }
                                                            lstrPropertyValue = Convert.ToString(strPropertyValue);
                                                            //commented on 28-oct-2015
                                                            //if (BtSubString.Name.ToLower() != "purchaseordercustomer")
                                                            //{
                                                            //   lstrPropertyValue = lstrPropertyValue.Substring(lstrPropertyValue.LastIndexOf(':') + 1);


                                                            //}

                                                            //Add dcnumber and carrier field for printing
                                                            //if (BtSubString.Name.ToUpper().Trim() == "ENTRY1" || BtSubString.Name.ToUpper().Trim() == "ENTRY2")
                                                            //{
                                                            //    if (rdbSO.Checked == true && rdbA.Checked == true)
                                                            //    {
                                                            //        if (QtyContainercheck == "1" && (pnldcnumber.Visible == true || pnlcarrier.Visible == true))
                                                            //        {
                                                            //            if (txtdecnumber.Text != "" && BtSubString.Name.ToUpper().Trim() == "ENTRY1")
                                                            //            {

                                                            //                btNamedSubString += BtSubString.Name + '\r' + '\n' + txtdecnumber.Text.ToString().Trim() + '\r' + '\n';
                                                            //            }
                                                            //            if (BtSubString.Name.ToUpper().Trim() == "ENTRY2")
                                                            //            {
                                                            //                if (BtSubString.Value.ToString().ToUpper() == "CARRIER")
                                                            //                {
                                                            //                    btNamedSubString += BtSubString.Name + '\r' + '\n' + txtcarrier.Text.ToString().Trim() + '\r' + '\n';
                                                            //                }
                                                            //                else
                                                            //                {
                                                            //                    btNamedSubString += BtSubString.Name + '\r' + '\n' + "SWIFT" + '\r' + '\n';
                                                            //                }

                                                            //            }

                                                            //        }
                                                            //    }

                                                            //}

                                                            if (BtSubString.Name == "InvoiceLineQuantity")
                                                            {
                                                                intQuantityToPrintOnLabel = Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim()) / Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantityToPrint"].Value.ToString().Trim());
                                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + intQuantityToPrintOnLabel.ToString() + '\r' + '\n';
                                                            }
                                                            //beolow condition added to divide quanity for sales order :Date 12/01/2014
                                                            else if (BtSubString.Name == "SalesOrderLineQuantity")
                                                            {
                                                                //below line commented to show as it is values for qty on lbl & qty to print
                                                                // intQuantityToPrintOnLabel = Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantity"].Value.ToString().Trim()) / Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim());

                                                                intQuantityToPrintOnLabel = Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityOnLabel"].Value.ToString().Trim());
                                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + intQuantityToPrintOnLabel.ToString() + '\r' + '\n';
                                                            }
                                                            else if (BtSubString.Name.ToUpper() == "LQTY")
                                                            {
                                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value.ToString().Trim());
                                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value.ToString().Trim() + '\r' + '\n';
                                                            }
                                                            //else if (BtSubString.Name.ToUpper() == "BARCODEVALUE") // changed to BarcodeValue to support both Item Custom field and Item barcode value on 13-Dec-2017
                                                            //{
                                                            //    // strBarcode =  objPOLine.GetItemsBarCode(DataGVItems.Rows[j].Cells["SalesOrderLineItemRefFullName"].Value.ToString().Trim());
                                                            //    //change filter criteria to support barcode for parent item: 29-11-2017
                                                            //    if (rdbSO.Checked == true)
                                                            //    {
                                                            //        strBarcode = objPOLine.GetItemsBarCode(DataGVItems.Rows[j].Cells["SalesORderItemName"].Value.ToString().Trim());


                                                            //        // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strBarcode);
                                                            //        btNamedSubString += BtSubString.Name + '\r' + '\n' + strBarcode + '\r' + '\n';
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';
                                                            //        //QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + " Value:-" + lstrPropertyValue);
                                                            //    }
                                                            //}


                                                            else if (BtSubString.Name.ToUpper() == "BARCODEVALUE") // changed to BarcodeValue to support both Item Custom field and Item barcode value on 13-Dec-2017
                                                            {

                                                                //change filter criteria to support barcode for parent item: 29-11-2017
                                                                if (rdbSO.Checked == true)
                                                                {
                                                                    strBarcode = objPOLine.GetItemsBarCode(DataGVItems.Rows[j].Cells["SalesORderItemName"].Value.ToString().Trim(),true);
                                                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + strBarcode + '\r' + '\n';
                                                                }
                                                                else if (rdbPO.Checked == true) //12-Mar-2018 for po receipt
                                                                {
                                                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';
                                                                }
                                                                else
                                                                {

                                                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + strBarcode + '\r' + '\n';
                                                                }
                                                            }
                                                            else
                                                            {
                                                                btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                                                            }
                                                            y += 1;
                                                        }
                                                        i += 1;
                                                        // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender File is opened to get Label Names end");

                                                    }
                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender File is opened to get Label Names end");

                                                    //if (BtSubString.Name.ToUpper() == "LQTY")
                                                    //{

                                                    //    btNamedSubString += BtSubString.Name + '\r' + '\n' + DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value.ToString().Trim() + '\r' + '\n';
                                                    //}

                                                    //Add dcnumber and carrier field for printing
                                                    //if (rdbSO.Checked == true && rdbA.Checked == true)
                                                    //{
                                                    //    if (QtyContainercheck == "1" && (pnldcnumber.Visible==true || pnlcarrier.Visible==true))
                                                    //    {
                                                    //        if (txtdecnumber.Text != "")
                                                    //        {

                                                    //            btNamedSubString += BtSubString.Name + '\r' + '\n' + txtdecnumber.Text.ToString().Trim() + '\r' + '\n';
                                                    //        }

                                                    //    }
                                                    //}


                                                    string strDelimiter = string.Concat('\r', '\n');
                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " String to be Printed:-" + btNamedSubString);
                                                    BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);

                                                    if (rdbInvoice.Checked == true)
                                                    {
                                                        intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantityToPrint"].Value.ToString().Trim());
                                                        BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);
                                                        BtFormat.PrintOut(false, false); //new line added on 15-Jan-2019
                                                    }
                                                    //quantity division for sales order Date :12/01/2014
                                                    if (rdbSO.Checked == true)
                                                    {
                                                        intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim());
                                                        // passed quantity/container value :Date 05-23-2016
                                                        if (QtyContainercheck == "1") //16-jan-2017 add QtyContainercheck=0 condition
                                                        {

                                                            //if (lobjDataExtension.ContainsKey("qtypercontainer".Trim().ToUpper()))
                                                            //{
                                                            //    lobjDataExtension.TryGetValue("qtypercontainer".Trim().ToUpper(), out qtypercontainervalue);
                                                            //    //divide qty by unitpercase value
                                                            //    intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(intQuantity) / Convert.ToDouble(qtypercontainervalue)));
                                                            //}

                                                            if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
                                                                //divide qty by unitpercase value
                                                                intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(intQuantity) / Convert.ToDouble(qtypercontainervalue)));

                                                            }
                                                            else
                                                            {
                                                                //divide qty by unitpercase value
                                                                intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(intQuantity) / Convert.ToDouble(1)));

                                                            }

                                                        }
                                                        BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);
                                                        BtFormat.PrintOut(false, false); //new line added :15-Jan-2019
                                                    }
                                                    if (rdbA.Checked == true && rdbPO.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0") //for multiple po change qty to print
                                                    {
                                                        //commented on 11-22-2016
                                                        //intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value.ToString().Trim());
                                                        // BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);

                                                        // intQuantity = Convert.ToInt32(txtQtyToPrint.Text.ToString());
                                                        intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim());
                                                        BtFormat.IdenticalCopiesOfLabel = intQuantity;

                                                    }
                                                    else if (rdbA.Checked == true && rdbPO.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                                    {
                                                        if (cmbcustomfield.SelectedIndex > 0)
                                                        {
                                                            //below line commented on 16-Feb2-2017 to print swap qtyon lbl and qty to print
                                                            // intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value.ToString().Trim());
                                                            //change field name PurchaseOrderLineQuantityToPrint to PurchaseOrderLineQuantity:poqtypercase :Date 13-Dec-2018
                                                            intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim());
                                                            // BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);

                                                            //PoQtyPerCase: Date 12-Dec-2018
                                                            //  var poflipqtyvalue = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty");
                                                            //if (flipPoQtyvalue == "Y") //print default value
                                                            //{
                                                            //    BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(intQuantity) / Convert.ToDouble(cmbcustomfield.SelectedValue)));
                                                            //    //  BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);

                                                            //}
                                                            //else if (flipPoQtyvalue == "N") //print 1 Label and Quotient is Qty on Label
                                                            //{
                                                            //    BtFormat.IdenticalCopiesOfLabel = 1;
                                                            //}
                                                            BtFormat.IdenticalCopiesOfLabel = intQuantity;

                                                        }
                                                        else //print original previous po
                                                        {
                                                            //change column PurchaseOrderLineQuantity to PurchaseOrderLineQuantityToPrint :24-Jan-2019
                                                            intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim());
                                                            BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);
                                                        }
                                                        //commented  on 08/17/2015
                                                        //else if (rdbInvoice.Checked == false) 
                                                        //{
                                                        //    BtFormat.IdenticalCopiesOfLabel = 1;// Convert.ToInt32(intQuantity);
                                                        //}
                                                        //else
                                                        //{
                                                        //    BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);
                                                        //}






                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  No Of copies to be printed:-" + intQuantity.ToString());
                                                        //BtFormat.IdenticalCopiesOfLabel = 1;// Convert.ToInt32(intQuantity);
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Printer Name:-" + strProdPrinter.ToString());
                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "Substring values are send to Bartender for printing start...");
                                                        BtFormat.PrintOut(false, false);

                                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "Substring values are send to Bartender for printing end...");
                                                        //QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Substring values are send to Bartender for printing...");
                                                    }
                                                }
                                                catch (System.Exception ex)
                                                {
                                                    MessageBox.Show(ex.Message, "Label Connector");
                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Label Printing is having some problem.:-" + ex.Message + ":" + ex.StackTrace);
                                                }
                                                finally
                                                {
                                                    BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                                    BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                                    BtSubString = null;
                                                    BtFormat = null;
                                                    BtApp = null;
                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender is closed.");
                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender object clean up start.");
                                                    foreach (Process clsProcess in Process.GetProcesses())
                                                    {
                                                        if (clsProcess.ProcessName.StartsWith("bartend"))
                                                        {
                                                            clsProcess.Kill();
                                                            clsProcess.WaitForExit();
                                                        }
                                                    }

                                                    if (Cn.State == ConnectionState.Open)
                                                    {
                                                        Cn.Close();
                                                        Cn.Dispose();
                                                    }
                                                    System.Threading.Thread.Sleep(1000);
                                                    this.Cursor = Cursors.Default;
                                                    btnPrint.Enabled = true;
                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Bartender object clean up end.");
                                                }
                                            }
                                            else
                                            {
                                                MessageBox.Show("Printing Error: " + "Please Select Label");
                                            }
                                        }
                                    }
                                //else
                                //{
                                //if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                //{
                                Found:
                                    if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True" && (rdbInvoice.Checked == true && rdbA.Checked == true) && (!checkAutoStatus)) sb.Append(sno + ". " + fileName + "\n");


                                    // }
                                    //}

                                }
                                //save labe path for multiple po Dat3e 03-12-2017
                                if (rdbPO.Checked == true && rdbA.Checked == true)
                                {
                                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0") //for receipt
                                    {
                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "savereceiptlabel");
                                    }
                                    else //for regular po
                                    {

                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "savepomultiplelabel");
                                    }
                                }

                            }
                        }
                    }

                    else if ((rdbC.Checked == true && rdbInvoice.Checked == true) && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {
                        BarTender.Application BtApp = null;
                        BarTender.Format BtFormat = null;
                        BarTender.SubString BtSubString = null;
                        string btNamedSubString = "";
                        int lintPrintedItemCount = 0;
                        try
                        {
                            if (CheckMandetory())
                            {
                                if (DataGVItems.Rows.Count > 0)
                                {
                                    for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                    {
                                        if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                        {
                                            cntChk = cntChk + 1;
                                        }


                                        if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "True" && DataGVItems.Rows[i].Cells[1].Value.ToString().Trim() == "Y")
                                        {
                                            lintPrintedItemCount++;
                                        }
                                    }

                                    if (cntChk == DataGVItems.Rows.Count)
                                    {
                                        MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                        return;
                                    }

                                    DialogResult lobjDialogResult = DialogResult.Yes;
                                    if (lintPrintedItemCount > 0)
                                    {
                                        lobjDialogResult = MessageBox.Show("Item(s) selected for printing are already printed. Do you want to Re-Print?", "Label Connector", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                    }
                                    if (lobjDialogResult == DialogResult.Yes)
                                    {
                                        int k = 1;
                                        foreach (Process clsProcess in Process.GetProcesses())
                                        {
                                            if (clsProcess.ProcessName.StartsWith("bartend"))
                                            {
                                                clsProcess.Kill();
                                                clsProcess.WaitForExit();
                                            }
                                        }
                                        BtApp = default(BarTender.ApplicationClass);
                                        BtFormat = default(BarTender.Format);
                                        BtSubString = default(BarTender.SubString);
                                        string strProdLblPath = "";
                                        string strProdPrinter = "";
                                        XmlDocument xmlDoc = new XmlDocument();
                                        // Uses reflection to find the location of the config file.
                                        System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                                        System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                                        if (!FileInfo.Exists)
                                        {
                                            throw new Exception("Missing config file");
                                        }
                                        xmlDoc.Load(FileInfo.FullName);
                                        // Finds the right node and change it to the new value.
                                        System.Xml.XmlNode Node = null;
                                        XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");

                                        #region New Code

                                        foreach (XmlNode Node_loopVariable in appsettingNodes)
                                        {
                                            Node = Node_loopVariable;
                                            if (Node.Name == "add")
                                            {
                                                if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                                                {
                                                    strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                                                }
                                                //if (Node.Attributes.GetNamedItem("key").Value == "PrinterName")
                                                //{
                                                //    strProdPrinter = Node.Attributes.GetNamedItem("value").Value;
                                                //}
                                            }
                                        }
                                        strProdPrinter = cmbLabelPrinter.Text;
                                        string strLabelName = cmbLabelName.Text;
                                        int intQuantity = 0;

                                        BtApp = new BarTender.ApplicationClass();
                                        BtFormat = new BarTender.Format();
                                        int j = 0;
                                        string strPropertyValue = string.Empty;

                                        this.Cursor = Cursors.WaitCursor;
                                        BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                                        int lintLastItemIndex = 0;
                                        int lintRowCount = DataGVItems.Rows.Count - 1;
                                        int[] lintarrSubstringIndex = new int[13];

                                        try
                                        {

                                            for (int lintSubstringIndex = 1; lintSubstringIndex <= 6; lintSubstringIndex++)
                                            {
                                                BtSubString = BtFormat.NamedSubStrings.GetSubString(lintSubstringIndex);
                                                if (lintLastItemIndex <= lintRowCount)
                                                {
                                                    for (int lintItemIndex = lintLastItemIndex; lintItemIndex <= lintRowCount; lintItemIndex++)
                                                    {
                                                        if (DataGVItems.Rows[lintItemIndex].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                                        {
                                                            strPropertyValue = GetPropertyValue(lintItemIndex, "InvoiceLineDesc");
                                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                            lintLastItemIndex = lintItemIndex + 1;
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = " ";
                                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = " ";
                                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                }
                                            }
                                            lintLastItemIndex = 0;
                                            for (int lintSubstringIndex = 7; lintSubstringIndex <= 12; lintSubstringIndex++)
                                            {
                                                BtSubString = BtFormat.NamedSubStrings.GetSubString(lintSubstringIndex);
                                                if (lintLastItemIndex <= lintRowCount)
                                                {
                                                    for (int lintItemIndex = lintLastItemIndex; lintItemIndex <= lintRowCount; lintItemIndex++)
                                                    {
                                                        if (DataGVItems.Rows[lintItemIndex].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                                        {
                                                            strPropertyValue = GetPropertyValue(lintItemIndex, "InvoiceLineItemRefFullName");
                                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                            lintLastItemIndex = lintItemIndex + 1;
                                                            //DataGVItems.Rows[lintItemIndex].Cells["PrintedStatus"].Value = "Y";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                }
                                            }

                                            BtSubString = BtFormat.NamedSubStrings.GetSubString(13);
                                            strPropertyValue = Convert.ToString(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value);
                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';

                                            BtSubString = BtFormat.NamedSubStrings.GetSubString(14);
                                            strPropertyValue = string.Empty;
                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';

                                            BtSubString = BtFormat.NamedSubStrings.GetSubString(15);
                                            strPropertyValue = string.Empty;
                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';


                                            lintLastItemIndex = 0;
                                            for (int lintSubstringIndex = 16; lintSubstringIndex <= 21; lintSubstringIndex++)
                                            {
                                                BtSubString = BtFormat.NamedSubStrings.GetSubString(lintSubstringIndex);
                                                if (lintLastItemIndex <= lintRowCount)
                                                {
                                                    for (int lintItemIndex = lintLastItemIndex; lintItemIndex <= lintRowCount; lintItemIndex++)
                                                    {
                                                        if (DataGVItems.Rows[lintItemIndex].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                                        {
                                                            strPropertyValue = GetPropertyValue(lintItemIndex, "InvoiceLineQuantity");
                                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                            lintLastItemIndex = lintItemIndex + 1;
                                                            DataGVItems.Rows[lintItemIndex].Cells["PrintedStatus"].Value = "Y";
                                                            break;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';
                                                }
                                            }

                                            BtSubString = BtFormat.NamedSubStrings.GetSubString(22);
                                            strPropertyValue = Convert.ToString(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[1].Value);
                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n';

                                            string strDelimiter = string.Concat('\r', '\n');

                                            BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);

                                            intQuantity = Convert.ToInt32(txtQtyToPrint.Text.Trim());
                                            //if (intQuantity > 30)
                                            //{
                                            //    intQuantity = 30;
                                            //}

                                            BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);
                                            BtFormat.PrintOut(false, false);
                                            #endregion new code
                                        }
                                        catch (System.Exception ex)
                                        {
                                            MessageBox.Show(ex.Message, "Label Connector");
                                        }
                                        finally
                                        {
                                            BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                            BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                            BtSubString = null;
                                            BtFormat = null;
                                            BtApp = null;
                                            foreach (Process clsProcess in Process.GetProcesses())
                                            {
                                                if (clsProcess.ProcessName.StartsWith("bartend"))
                                                {
                                                    clsProcess.Kill();
                                                    clsProcess.WaitForExit();
                                                }
                                            }
                                            System.Threading.Thread.Sleep(1000);
                                            this.Cursor = Cursors.Default;
                                        }
                                    }
                                }
                            }
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show(ex.Message, "Label Connector");
                        }
                        finally
                        {
                            this.Cursor = Cursors.Default;
                        }
                    }
                    //Print Packaging from sales order Date:04/29/2016
                    else if ((rdbC.Checked == true && rdbSO.Checked == true) && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {
                        BarTender.Application BtApp = null;
                        BarTender.Format BtFormat = null;
                        BarTender.SubString BtSubString = null;
                        StringBuilder btNamedSubString = new StringBuilder("");
                        //string btNamedSubString = "";
                        int lintPrintedItemCount = 0;

                        try
                        {
                            if (CheckMandetory())
                            {
                                if (DataGVItems.Rows.Count > 0)
                                {
                                    for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                    {
                                        if (DataGVItems.Rows[i].Cells["CheckBox"].Value != null)
                                        {
                                            if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                            {
                                                cntChk = cntChk + 1;
                                            }
                                        }


                                        //if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "True" && DataGVItems.Rows[i].Cells[1].Value.ToString().Trim() == "Y")
                                        //{
                                        //    lintPrintedItemCount++;
                                        //}
                                    }

                                    if (cntChk == DataGVItems.Rows.Count)
                                    {
                                        MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                        return;
                                    }

                                    //DialogResult lobjDialogResult = DialogResult.Yes;
                                    //if (lintPrintedItemCount > 0)
                                    //{
                                    //    lobjDialogResult = MessageBox.Show("Item(s) selected for printing are already printed. Do you want to Re-Print?", "Label Connector", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                    //}
                                    // if (lobjDialogResult == DialogResult.Yes)
                                    // {
                                    //int k = 1;
                                    //foreach (Process clsProcess in Process.GetProcesses())
                                    //{
                                    //    if (clsProcess.ProcessName.StartsWith("bartender"))
                                    //    {
                                    //        clsProcess.Kill();
                                    //        clsProcess.WaitForExit();
                                    //    }
                                    //}
                                    BtApp = default(BarTender.ApplicationClass);
                                    BtFormat = default(BarTender.Format);
                                    BtSubString = default(BarTender.SubString);
                                    string strProdLblPath = "";
                                    string strProdPrinter = "";
                                    XmlDocument xmlDoc = new XmlDocument();
                                    // Uses reflection to find the location of the config file.
                                    System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                                    System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                                    if (!FileInfo.Exists)
                                    {
                                        throw new Exception("Missing config file");
                                    }
                                    xmlDoc.Load(FileInfo.FullName);
                                    // Finds the right node and change it to the new value.
                                    System.Xml.XmlNode Node = null;
                                    XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");


                                    foreach (XmlNode Node_loopVariable in appsettingNodes)
                                    {
                                        Node = Node_loopVariable;
                                        if (Node.Name == "add")
                                        {
                                            if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                                            {
                                                strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                                            }
                                            //if (Node.Attributes.GetNamedItem("key").Value == "PrinterName")
                                            //{
                                            //    strProdPrinter = Node.Attributes.GetNamedItem("value").Value;
                                            //}
                                        }
                                    }
                                    strProdPrinter = cmbLabelPrinter.Text;
                                    string strLabelName = cmbLabelName.Text;
                                    int intQuantity = 0;

                                    BtApp = new BarTender.ApplicationClass();
                                    BtFormat = new BarTender.Format();
                                    int j = 0;
                                    string strPropertyValue = string.Empty;

                                    this.Cursor = Cursors.WaitCursor;
                                    BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                                    // int lintRowCount=0;
                                    //print package sales order item/page logic
                                    //for (int s = 0; s < DataGVItems.Rows.Count; s++) //04-Feb-2020
                                    //{
                                    //if (DataGVItems.Rows[s].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    //{
                                    //lintRowCount = DataGVItems.Rows.Count;
                                    //lintRowCount += 1; 
                                    // }
                                    // }
                                    int[] lintarrSubstringIndex = new int[13];
                                    int totalItemsInLabel = 0;
                                    int lntCountRows = 0;
                                    decimal totalsumquantity = 0;
                                    decimal totalsumweight = 0;

                                    for (int i = 1; i <= BtFormat.NamedSubStrings.Count; i++)
                                    {
                                        // if (BtFormat.NamedSubStrings.GetSubString(i).Name.Contains("SalesOrderLineQuantity"))
                                        // if (BtFormat.NamedSubStrings.GetSubString(i).Name.ToString().ToUpper().Contains("SOQTY"))
                                        if (BtFormat.NamedSubStrings.GetSubString(i).Name.ToString().ToUpper().Contains("SALESORDERLINEITEMREFFULLNAME"))
                                        {
                                            totalItemsInLabel++;
                                        }
                                    }

                                    //New so packaging code:04-Feb-2020

                                    try
                                    {
                                        int printQuantity = 0;
                                        int qntPrint = 1;//Convert.ToInt32(txtQtyToPrint.Text); //26-Feb-2020
                                        do
                                        {
                                            int quantityToPrint = PackagingSettings.QuantityToPrint();
                                            if (totalItemsInLabel < quantityToPrint)
                                            {
                                                MessageBox.Show("Label items does not match with the number of items per page to be printed. Please select proper label", "Label Connector : Error");
                                                this.btnPrint.Enabled = true;
                                                this.btnClear.Enabled = true;
                                                return;
                                            }
                                            int qnt = quantityToPrint;

                                            int selectedRows = 0;
                                            List<int> Rownew = new List<int>();


                                            foreach (DataGridViewRow dgvr in DataGVItems.Rows)
                                            {
                                                if (Convert.ToBoolean(dgvr.Cells[0].Value) == true)
                                                {
                                                    // Row = dgvr.Cells[0].RowIndex;
                                                    Rownew.Add(dgvr.Cells[0].RowIndex);
                                                    // dict.Add("N", dgvr.Cells[0].RowIndex);
                                                    selectedRows++;
                                                }
                                            }


                                            lntCountRows = PackagingSettings.GetPrintPageCount(quantityToPrint, selectedRows);

                                            alData = await GetDataSource();
                                            clsSalesOrder cl = (clsSalesOrder)alData[0];

                                            int lntprintlable = 0; int lntlabelcount = 0;
                                            int qnty = 1;
                                            int Setrowval = 0;
                                            int matchval = 0;
                                            int lntcountperprint = 0;
                                            string customeruser = string.Empty;
                                            int custindex = 0;
                                            int matchprintcount = 0;
                                            string matchstringname = string.Empty;
                                            ArrayList larritemlist = new ArrayList();


                                        PrintLable:
                                            for (int i = lntlabelcount; i < quantityToPrint; i++) //quantityToPrint
                                            {
                                                if (matchval > 0)
                                                {
                                                    continue;
                                                }
                                                for (int pint = 0; pint < Rownew.Count; pint++)
                                                {
                                                    //if (pint > quantityToPrint)
                                                    //  goto lprint;
                                                    Setrowval = (int)Rownew[pint];

                                                    lntcountperprint++;
                                                    if (lntcountperprint > PackagingSettings.QuantityToPrint())
                                                    {
                                                        int remove = Math.Max(0, PackagingSettings.QuantityToPrint());
                                                        Rownew.RemoveRange(0, remove);


                                                        break;
                                                    }


                                                    if (Setrowval < DataGVItems.Rows.Count)
                                                    // if (i < DataGVItems.Rows.Count)
                                                    {
                                                        for (int z = 1; z <= BtFormat.NamedSubStrings.Count; z++)
                                                        {
                                                            BtSubString = BtFormat.NamedSubStrings.GetSubString(z);

                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("PONUMBER" + qnty)) //"P.O.NO.
                                                            {

                                                                strPropertyValue = cl.PONumber;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }

                                                            if (BtSubString.Name.Equals("SalesOrderLineDesc" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 5);
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.Equals("SalesOrderLineItemRefFullName" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 3);
                                                                larritemlist.Add(strPropertyValue);
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().Replace("\r\n", "").ToUpper().Trim().Equals("SALESORDERLINEUOM" + qnty))
                                                            {

                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 4); //3 to 4

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }

                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("OTHER1L" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 8); //7 to 8

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().Replace("\r\n", "").ToUpper().Trim().Equals("SOQTY" + qnty))
                                                            {
                                                                strPropertyValue = GetPropertyValueForrdbC(Setrowval, 2); //1 to2
                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("TXNDATE"))
                                                            {
                                                                strPropertyValue = cl.TxnDate.ToShortDateString();

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            string sourceName1 = BtSubString.Name.ToString().Replace("\r\n", "").Trim().ToUpper();
                                                            var fnvalue = lobjsoitemcustfields.Where(p => p.CustItemRefFullName.Trim().ToUpper() == Convert.ToString(DataGVItems.Rows[Setrowval].Cells["SalesOrderLineItemRefFullName"].Value).Trim().ToUpper() && p.CustItemkey.ToString().Trim().ToUpper() == BtSubString.Name.ToString().Trim().ToUpper()).FirstOrDefault();

                                                            if (fnvalue != null) //item custom field for header part of label
                                                            {
                                                                matchstringname = fnvalue.CustItemkey.ToString().ToUpper();
                                                                if (sourceName1 == matchstringname)
                                                                {
                                                                    strPropertyValue = fnvalue.CustItemkeyvalue;
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                                                }
                                                            }


                                                            //add  item custom filed support for sales order packaging single:Date:21-03-2016

                                                            foreach (QBLC.clsSalesOrderLine.Itemcustomfields item in lobjsoitemcustfields)
                                                            {
                                                                if (item.CustItemRefFullName.ToUpper() == Convert.ToString(DataGVItems.Rows[Setrowval].Cells["SalesOrderLineItemRefFullName"].Value).ToUpper())
                                                                {
                                                                    if (BtSubString.Name.ToString().Trim().ToUpper().Equals(item.CustItemkey.ToString().Trim().ToUpper() + qnty))
                                                                    {
                                                                        strPropertyValue = item.CustItemkeyvalue;
                                                                        btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                        break;

                                                                    }
                                                                }

                                                            }

                                                            //for test
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("CUSTOMERREFFULLNAME"))
                                                            {

                                                                custindex = cl.CustomerRefFullName.IndexOf(":");
                                                                customeruser = (custindex > 0 ? cl.CustomerRefFullName.Substring(0, custindex) : cl.CustomerRefFullName);
                                                                strPropertyValue = customeruser;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }

                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("REFNUMBER"))
                                                            {
                                                                strPropertyValue = Convert.ToString(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[1].Value);

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("PONUMBER"))
                                                            {
                                                                strPropertyValue = cl.PONumber;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPDATE")) //20-Feb-2020
                                                            {
                                                                strPropertyValue = cl.ShipDate;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("NOTE"))
                                                            {
                                                                strPropertyValue = cl.Note;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSADDR1"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressAddr1;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSADDR2"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressAddr2;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSADDR3"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressAddr3;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSADDR4"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressAddr4;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSADDR5"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressAddr5;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSCITY"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressCity;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }

                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSPOSTALCODE"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressPostalCode;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESSSTATE"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressState;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("SHIPADDRESS"))
                                                            {
                                                                strPropertyValue = cl.ShipAddressCity + ", " + cl.ShipAddressState + " " + cl.ShipAddressPostalCode;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("OTHER"))
                                                            {
                                                                strPropertyValue = cl.Other;

                                                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("TOTALQTYPERITEM"))
                                                            {
                                                                totalsumquantity = 0;
                                                                if (lntprintlable == lntCountRows - 1)
                                                                {

                                                                    for (int k = 0; k < DataGVItems.Rows.Count; k++)
                                                                    {
                                                                        if (DataGVItems.Rows[k].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                                                        {
                                                                            totalsumquantity += Convert.ToDecimal(DataGVItems.Rows[k].Cells["SalesOrderLineQuantity"].Value);
                                                                        }

                                                                    }
                                                                    strPropertyValue = totalsumquantity.ToString();
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                }
                                                            }
                                                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("OTHER1T"))
                                                            {
                                                                totalsumweight = 0;
                                                                if (lntprintlable == lntCountRows - 1)
                                                                {
                                                                    for (int w = 0; w < DataGVItems.Rows.Count; w++)
                                                                    {
                                                                        if (DataGVItems.Rows[w].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                                                        {
                                                                            if (DataGVItems.Rows[w].Cells["Other1L"].Value.ToString() != "") //change Other1T to Other1L
                                                                            {
                                                                                totalsumweight += Convert.ToDecimal(DataGVItems.Rows[w].Cells["Other1L"].Value);
                                                                            }
                                                                        }

                                                                    }
                                                                    strPropertyValue = totalsumweight.ToString();
                                                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                                                }
                                                            }


                                                        }
                                                        qnty++;
                                                    } //end of for loop items
                                                      //}//true
                                                      //  }
                                                      // }
                                                }
                                                matchval++;
                                                // }// item loop
                                            } //end of for

                                            lntprintlable++;
                                            lntlabelcount = quantityToPrint;
                                            quantityToPrint = quantityToPrint + qnt;
                                            // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " After Printing is finished.");

                                            if (lntprintlable <= lntCountRows)
                                            {
                                                matchval = 0;
                                                lntcountperprint = 0;
                                                matchprintcount++;


                                                string strDelimiter = string.Concat('\r', '\n');
                                                BtFormat.NamedSubStrings.SetAll(btNamedSubString.ToString(), strDelimiter);
                                                // intQuantity = Convert.ToInt32(txtQtyToPrint.Text.Trim());
                                                strPropertyValue = string.Empty;
                                                BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(txtQtyToPrint.Text.Trim());//Convert.ToInt32(intQuantity); //enable on 26-Feb-2020
                                                // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Just before Printing popuup is open.");

                                                BtFormat.PrintOut(false, false);
                                                // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Just After Printing popuup is open.");
                                                btNamedSubString.Remove(0, btNamedSubString.Length);
                                                BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                                BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                                BtSubString = null;
                                                BtFormat = null;
                                                BtApp = null;
                                                BtApp = default(BarTender.Application);
                                                BtFormat = default(BarTender.Format);
                                                BtSubString = default(BarTender.SubString);
                                                BtApp = new BarTender.ApplicationClass();
                                                BtFormat = new BarTender.FormatClass();
                                                this.Cursor = Cursors.WaitCursor;
                                                BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);
                                                // QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "Printing is completed." );


                                                //larritemlist.Clear();
                                                if (selectedRows <= PackagingSettings.QuantityToPrint() && Rownew.Count == selectedRows)
                                                {
                                                    break;
                                                }
                                                if (lntprintlable != lntCountRows)
                                                {

                                                    qnty = 1;
                                                    goto PrintLable;
                                                }
                                            }

                                            printQuantity++;
                                        }
                                        while (printQuantity < qntPrint);
                                        //save selected label :Date 27-Mar-2017
                                        // lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicePacklabel");
                                        ////save printer name :Date 11-Feb-2017
                                        //lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "saveprintername");


                                        #endregion new code

                                    }
                                    catch (System.Exception ex)
                                    {
                                        MessageBox.Show(ex.Message, "Label Connector");
                                    }
                                    finally
                                    {
                                        BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                        BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                        BtSubString = null;
                                        BtFormat = null;
                                        BtApp = null;
                                        foreach (Process clsProcess in Process.GetProcesses())
                                        {
                                            if (clsProcess.ProcessName.StartsWith("bartend"))
                                            {
                                                clsProcess.Kill();
                                                clsProcess.WaitForExit();
                                            }
                                        }
                                        System.Threading.Thread.Sleep(500);
                                        this.Cursor = Cursors.Default;
                                    }


                                    //prev so packging code:comment on 04-Feb-2020

                                    #region prev so packaging code
                                    //try
                                    //{
                                    //    int printQuantity = 0;
                                    //    //int qntPrint = Convert.ToInt32(txtQtyToPrint.Text);
                                    //    int qntPrint = PackagingSettings.QuantityToPrint();
                                    //    do
                                    //    {
                                    //        int quantityToPrint = PackagingSettings.QuantityToPrint();
                                    //        //if (totalItemsInLabel == 0)
                                    //        //{
                                    //        //    MessageBox.Show("Substring names does not matched", "Label Connector : Error");
                                    //        //    this.btnPrint.Enabled = true;
                                    //        //    return;
                                    //        //}         this.btnClear.Enabled = true;

                                    //        if (totalItemsInLabel < quantityToPrint)
                                    //        {
                                    //            MessageBox.Show("Label items does not match with the number of items per page to be printed. Please select proper label", "Label Connector : Error");
                                    //            this.btnPrint.Enabled = true;
                                    //            this.btnClear.Enabled = true;
                                    //            return;
                                    //        }
                                    //        int qnt = quantityToPrint;

                                    //        lntCountRows = PackagingSettings.GetPrintPageCount(quantityToPrint, lintRowCount);

                                    //        alData = GetDataSource();
                                    //        clsSalesOrder cl = (clsSalesOrder)alData[0];

                                    //        int lntprintlable = 0; int lntlabelcount = 0;
                                    //        int qnty = 1;
                                    //        string matchstringname = string.Empty;
                                    //        //decimal totalQty = 0;
                                    //        string customeruser = string.Empty;
                                    //        int custindex = 0;

                                    //    PrintLable:
                                    //        for (int i = lntlabelcount; i < quantityToPrint; i++)
                                    //        {
                                    //            if (i < DataGVItems.Rows.Count) //old condtion 04-Feb-2020
                                    //            { 
                                    //          // for (int w = 0; w < DataGVItems.Rows.Count; w++)
                                    //            //{
                                    //               // if (DataGVItems.Rows[w].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    //               // {
                                    //                    if (Convert.ToInt32(DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Value) > 0) //skip zero qty items
                                    //                    {
                                    //                        for (int z = 1; z <= BtFormat.NamedSubStrings.Count; z++)
                                    //                        {
                                    //                            BtSubString = BtFormat.NamedSubStrings.GetSubString(z);
                                    //                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("PONUMBER" + qnty)) //"P.O.NO.
                                    //                            {

                                    //                                strPropertyValue = cl.PONumber;

                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            }

                                    //                            if (BtSubString.Name.ToString().Replace("\r\n", "").ToUpper().Trim().Equals("SALESORDERLINEITEMREFFULLNAME" + qnty))
                                    //                            {

                                    //                                strPropertyValue = GetPropertyValueForrdbC(i, 3); //changes 2 to 3

                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            }
                                    //                            if (BtSubString.Name.ToString().Replace("\r\n", "").ToUpper().Trim().Equals("SALESORDERLINEDESC" + qnty))
                                    //                            {

                                    //                                strPropertyValue = GetPropertyValueForrdbC(i, 5); //4 to 5

                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            }

                                    //                            if (BtSubString.Name.ToString().Replace("\r\n", "").ToUpper().Trim().Equals("SALESORDERLINEUOM" + qnty))
                                    //                            {

                                    //                                strPropertyValue = GetPropertyValueForrdbC(i, 4); //3 to 4

                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            }
                                    //                            // for test :Date 01-Nov-2018

                                    //                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("OTHER1L" + qnty))
                                    //                            {
                                    //                                strPropertyValue = GetPropertyValueForrdbC(i, 8); //7 to 8

                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            }

                                    //                            //if (BtSubString.Name.ToString().ToUpper().Trim().Equals("OTHER1" + qnty))
                                    //                            //{
                                    //                            //    strPropertyValue = GetPropertyValueForrdbC(i, 5);


                                    //                            //    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            //}
                                    //                            //if (BtSubString.Name.ToString().Replace("\r\n","").ToUpper().Trim().Equals("SALESORDERLINEQUANTITY" + qnty))
                                    //                            //{
                                    //                            //    strPropertyValue = GetPropertyValueForrdbC(i, 1);
                                    //                            //    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            //}
                                    //                            if (BtSubString.Name.ToString().Replace("\r\n", "").ToUpper().Trim().Equals("SOQTY" + qnty))
                                    //                            {
                                    //                                strPropertyValue = GetPropertyValueForrdbC(i, 2); //1 to2
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }

                                    //                            //if (BtSubString.Name.ToString().ToUpper().Trim().Equals("CUSTNO" + qnty))
                                    //                            //{

                                    //                            //    strPropertyValue = GetPropertyValueForrdbC(i, 6);


                                    //                            //    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            //}

                                    //                            if (BtSubString.Name.ToString().ToUpper().Trim().Equals("TXNDATE"))
                                    //                            {
                                    //                                strPropertyValue = cl.TxnDate.ToShortDateString();

                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            }

                                    //                            //add  item custom filed support for sales order packaging single:Date:21-03-2016

                                    //                            foreach (QBLC.clsSalesOrderLine.Itemcustomfields item in lobjsoitemcustfields)
                                    //                            {
                                    //                                if (item.CustItemRefFullName.ToUpper() == Convert.ToString(DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value).ToUpper())
                                    //                                {
                                    //                                    if (BtSubString.Name.ToString().Trim().ToUpper().Equals(item.CustItemkey.ToString().Trim().ToUpper() + qnty))
                                    //                                    {
                                    //                                        strPropertyValue = item.CustItemkeyvalue;
                                    //                                        btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                                        break;

                                    //                                    }
                                    //                                }

                                    //                            }


                                    //                            string sourceName = BtSubString.Name.ToString().Replace("\r\n", "").Trim().ToUpper();
                                    //                            var fnvalue = lobjsoitemcustfields.Where(p => p.CustItemRefFullName.Trim().ToUpper() == Convert.ToString(DataGVItems.Rows[i].Cells["SalesOrderLineItemRefFullName"].Value).Trim().ToUpper() && p.CustItemkey.ToString().Trim().ToUpper() == BtSubString.Name.ToString().Trim().ToUpper()).FirstOrDefault();

                                    //                            if (sourceName == "REFNUMBER")
                                    //                            {
                                    //                                strPropertyValue = Convert.ToString(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[1].Value);
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "PONUMBER")
                                    //                            {
                                    //                                strPropertyValue = cl.PONumber;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');


                                    //                            }
                                    //                            else if (sourceName == "SHIPDATE")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipDate;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            // for test only :02-Nov-2018 :ShipAddr Support
                                    //                            else if (sourceName == "SHIPADDRESSADDR1")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressAddr1;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "SHIPADDRESSADDR2")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressAddr2;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            //ShipAddr3,ShipAddr4,ShipAddr5,Note Added:30-Nov-2018
                                    //                            else if (sourceName == "SHIPADDRESSADDR3")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressAddr3;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "SHIPADDRESSADDR4")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressAddr4;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "SHIPADDRESSADDR5")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressAddr5;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "NOTE")
                                    //                            {
                                    //                                strPropertyValue = cl.Note;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }

                                    //                            else if (sourceName == "SHIPADDRESSCITY")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressCity;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "SHIPADDRESSPOSTALCODE")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressPostalCode;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "SHIPADDRESSSTATE")
                                    //                            {
                                    //                                strPropertyValue = cl.ShipAddressState;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "CUSTOMERREFFULLNAME")
                                    //                            {
                                    //                                custindex = cl.CustomerRefFullName.IndexOf(":");
                                    //                                customeruser = (custindex > 0 ? cl.CustomerRefFullName.Substring(0, custindex) : cl.CustomerRefFullName);
                                    //                                strPropertyValue = customeruser;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            else if (sourceName == "OTHER")
                                    //                            {
                                    //                                strPropertyValue = cl.Other;
                                    //                                btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                            }
                                    //                            //for test only :Date 01-Oct-2018 sum of Qty column value

                                    //                            else if (sourceName == "TOTALQTYPERITEM")
                                    //                            {
                                    //                                //decimal totqty = 0;
                                    //                                totalsumquantity = 0;
                                    //                                if (lntprintlable == lntCountRows - 1)
                                    //                                {

                                    //                                    for (int k = 0; k < DataGVItems.Rows.Count; k++)
                                    //                                    {
                                    //                                        //if (DataGVItems.Rows[k].Cells["CheckBox"].Value.ToString().Trim() == "True") //04-Feb-2020
                                    //                                       // {

                                    //                                            totalsumquantity += Convert.ToDecimal(DataGVItems.Rows[k].Cells["SalesOrderLineQuantity"].Value);
                                    //                                        //}

                                    //                                    }
                                    //                                    strPropertyValue = totalsumquantity.ToString();
                                    //                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                                }

                                    //                            }

                                    //                            //for test only :Date 01-Oct-2018 sum of Other1T column value

                                    //                            else if (sourceName == "OTHER1T")  //change TOTALWEIGHTPERITEM to OTHER1T :Date 28-Nov-2018
                                    //                            {
                                    //                                //decimal totqty = 0;
                                    //                                totalsumweight = 0;
                                    //                                if (lntprintlable == lntCountRows - 1)
                                    //                                {

                                    //                                    for (int k = 0; k < DataGVItems.Rows.Count; k++)
                                    //                                    {
                                    //                                        //if (DataGVItems.Rows[k].Cells["CheckBox"].Value.ToString().Trim() == "True") //04-Feb-2020
                                    //                                        //{
                                    //                                            if (DataGVItems.Rows[k].Cells["Other1L"].Value.ToString() != "") //change Other1T to Other1L
                                    //                                            {
                                    //                                                totalsumweight += Convert.ToDecimal(DataGVItems.Rows[k].Cells["Other1L"].Value);
                                    //                                            }
                                    //                                       // }

                                    //                                    }
                                    //                                    strPropertyValue = totalsumweight.ToString();
                                    //                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                                }

                                    //                            }

                                    //                            else if (fnvalue != null) //item custom field for header part of label
                                    //                            {
                                    //                                matchstringname = fnvalue.CustItemkey.ToString().ToUpper();
                                    //                                if (sourceName == matchstringname)
                                    //                                {
                                    //                                    strPropertyValue = fnvalue.CustItemkeyvalue;
                                    //                                    btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');

                                    //                                }

                                    //                            }


                                    //                            //switch (sourceName)
                                    //                            //{

                                    //                            //    case "REFNUMBER":
                                    //                            //        strPropertyValue = Convert.ToString(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[1].Value);
                                    //                            //        btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            //        break;


                                    //                            //    case "PONUMBER":
                                    //                            //        strPropertyValue = cl.PONumber;
                                    //                            //        btNamedSubString.Append(BtSubString.Name + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            //        break;

                                    //                            //    //case "TotalQty":
                                    //                            //    //    if (lntprintlable == lntCountRows - 1)
                                    //                            //    //    {
                                    //                            //    //        decimal totalQty = 0;
                                    //                            //    //        for (int k = 0; k < DataGVItems.Rows.Count; k++)
                                    //                            //    //        {

                                    //                            //    //            totalQty += Convert.ToDecimal(DataGVItems.Rows[k].Cells["InvoiceLineQuantity"].Value);

                                    //                            //    //        }
                                    //                            //    //        strPropertyValue = totalQty.ToString();
                                    //                            //    //        btNamedSubString.Append(sourceName + '\r' + '\n' + strPropertyValue + '\r' + '\n');
                                    //                            //    //    }
                                    //                            //    //    break;
                                    //                            //    default:
                                    //                            //        break;

                                    //                            //}


                                    //                        }
                                    //                    }

                                    //                    qnty++;
                                    //               // } //checkbox check condtion end
                                    //            } //if datarow count end
                                    //        }
                                    //        lntprintlable++;
                                    //        lntlabelcount = quantityToPrint;
                                    //        quantityToPrint = quantityToPrint + qnt;

                                    //        if (lntprintlable <= lntCountRows)
                                    //        {
                                    //            string strDelimiter = string.Concat('\r', '\n');
                                    //            BtFormat.NamedSubStrings.SetAll(btNamedSubString.ToString(), strDelimiter);
                                    //            intQuantity = Convert.ToInt32(txtQtyToPrint.Text.Trim());
                                    //            strPropertyValue = string.Empty;
                                    //            BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(intQuantity);
                                    //            BtFormat.PrintOut(false, false);
                                    //            btNamedSubString.Remove(0, btNamedSubString.Length);
                                    //            BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                    //            BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                    //            BtSubString = null;
                                    //            BtFormat = null;
                                    //            BtApp = null;
                                    //            BtApp = default(BarTender.ApplicationClass);
                                    //            BtFormat = default(BarTender.Format);
                                    //            BtSubString = default(BarTender.SubString);
                                    //            BtApp = new BarTender.ApplicationClass();
                                    //            BtFormat = new BarTender.Format();
                                    //            this.Cursor = Cursors.WaitCursor;
                                    //            printQuantity++;
                                    //            BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);
                                    //            if (lntprintlable != lntCountRows)
                                    //            {
                                    //                qnty = 1;

                                    //                goto PrintLable;
                                    //            }

                                    //        }

                                    //        // printQuantity++;
                                    //    }
                                    //    //while (printQuantity < qntPrint);
                                    //    while (printQuantity < lntCountRows);



                                    //}

                                    //catch (System.Exception ex)
                                    //{
                                    //    MessageBox.Show(ex.Message, "Label Connector");
                                    //}
                                    //finally
                                    //{
                                    //    BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                    //    BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                    //    BtSubString = null;
                                    //    BtFormat = null;
                                    //    BtApp = null;
                                    //    foreach (Process clsProcess in Process.GetProcesses())
                                    //    {
                                    //        if (clsProcess.ProcessName.StartsWith("bartend"))
                                    //        {
                                    //            clsProcess.Kill();
                                    //            clsProcess.WaitForExit();
                                    //        }
                                    //    }
                                    //    System.Threading.Thread.Sleep(1000);
                                    //    this.Cursor = Cursors.Default;
                                    //} //prev so pack code end
                                    #endregion

                                }
                            }
                        }
                        catch (System.Exception ex)
                        {
                            MessageBox.Show(ex.Message, "Label Connector");
                        }
                        finally
                        {
                            this.Cursor = Cursors.Default;
                        }
                    }
                    if (!string.IsNullOrEmpty(Convert.ToString(sb)) && (checkAuto == "Auto"))
                        MessageBox.Show(" Below items does not have matching label files (BTW files) \n" + Convert.ToString(sb), "Label Connector", MessageBoxButtons.OK);

                    //save label path to config file : 01-13-2017
                    if (rdbSO.Checked == true)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "PrintLabel");
                    }


                    //save printer name :Date 11-Feb-2017
                    if (rdbPO.Checked == true)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "poprinter");
                    }
                    else if (rdbSO.Checked == true)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "soprinter");

                    }
                    else if (rdbSO.Checked == true)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "srprinter");

                    }
                    else if (rdbInvoice.Checked == true)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "invprinter");
                        //Added on 20-June-2017 for saving label path by srinivas 
                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicelabelSingleMultiple");
                    }
                    else if (invpackaging.Checked == true)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "invpackprinter");
                    }

                }
                else
                {
                    MessageBox.Show("Select Label", "Label Connector");
                }
                btnClear.Enabled = true;
                btnPrint.Enabled = true;
            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
                System.Threading.Thread.Sleep(500);
                btnPrint.Enabled = false;
                btnClear.Enabled = true;
            }

        }


        //print PO UDF Label
        private void PrintPOUDFLabel()
        {
            int intQuantity = 0;
            int cntChk = 0;
            string checkAuto = string.Empty;
            string editDesc = string.Empty;
            string SetValuesForTransType = string.Empty;
            string SetTemplatewidth = string.Empty;
            string SetTemplateheight = string.Empty;
            bool blnIsIncrementcounter = false;
            int lntpoquantity = 0;
            // int i;
            List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
            clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
            List<QuickBooksField> objheaderfield = new List<QuickBooksField>();
            try
            {
                using (new HourGlass())
                {
                    if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {

                        if (CheckMandetory())
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                {
                                    if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                    {
                                        cntChk = cntChk + 1;
                                    }
                                }
                                if (cntChk == DataGVItems.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }
                                int qtyvalue = 0;
                                bool isNumericQuantity = false;
                                ArrayList alLineItem = null;
                                clsPurchaseOrderLine objclsPurchaseOrderLine = null;
                                // clsSalesOrderLine objclsSalesOrderLine = null;
                                // clsInvoiceLine objclsInvoiceLine = null;
                                Type objClsType;
                                object strPropertyValue = null;
                                string flipPoQtyvalue = string.Empty;
                                for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                {

                                    if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    {
                                        //skip po qty having count zero
                                        if ((rdbA.Checked == true || rdbB.Checked == true) && rdbPO.Checked == true)
                                        {
                                            if (string.IsNullOrWhiteSpace(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim()) || string.IsNullOrEmpty(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim()))
                                            {
                                                continue;
                                            }
                                            isNumericQuantity = int.TryParse(Convert.ToString(Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value).ToString().Trim()), out qtyvalue);
                                            if (!isNumericQuantity)
                                            {
                                                continue;
                                            }
                                            //skip items having print lbl qty is 0
                                            else if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))) == 0)
                                            {
                                                continue;
                                            }

                                            if ((cmbLabelName.SelectedIndex != 0) || (checkAuto == "Auto"))
                                            {

                                                if (rdbPO.Checked == true)
                                                {
                                                    intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value);
                                                }



                                                if (rdbPO.Checked == true)
                                                {
                                                    objclsPurchaseOrderLine = new clsPurchaseOrderLine();
                                                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                                    {
                                                        int QtyOnLableValue = 0;
                                                        //Print 1 Label by default is selected,pass the Quotient to Qty
                                                        flipPoQtyvalue = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty");
                                                        if (cmbcustomfield.SelectedIndex > 0)
                                                        {
                                                            QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                                                        }
                                                        else //print prev original
                                                        {
                                                            QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                                                        }

                                                        if(lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode") == "Close")
                                                        {
                                                            alLineItem = objclsPurchaseOrderLine.GetPOLineCloseMode(Convert.ToString(QtyOnLableValue), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, LabelConnector.QBHelper.ConnectQBCloseMode(lobjQBConfiguration.GetLabelConfigSettings("CompanyFilePath")), out lobjDataExtension);
                                                            if (((Interop.QBFC13.QBSessionManager)lQBSessionManager != null))
                                                            {
                                                                LabelConnector.QBHelper.CloseQBConnection((Interop.QBFC13.QBSessionManager)lQBSessionManager);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            alLineItem = objclsPurchaseOrderLine.GetPOLine(Convert.ToString(QtyOnLableValue), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);
                                                        }
                                                        

                                                    }//end showpo
                                                    else
                                                    {
                                                        //ShowPo else part code goes here may be for recipt(5381)
                                                    }

                                                 objClsType = objclsPurchaseOrderLine.GetType();
                                                }//end rdbpo
                                                 // int i = 0;
                                                 //loop here thurgh substring here and item loop... while loop	

                                                objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                                //Get property fields list

                                                objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());
                                                foreach (QuickBooksField itemfield in objheaderfield)
                                                {
                                                    if (itemfield.ItemFieldId == 1)
                                                    {
                                                        SetValuesForTransType = itemfield.ItemFieldName;
                                                    }
                                                    else if (itemfield.ItemFieldId == 2)
                                                    {
                                                        SetTemplatewidth = itemfield.ItemFieldName;
                                                    }
                                                    else if (itemfield.ItemFieldId == 3)
                                                    {
                                                        SetTemplateheight = itemfield.ItemFieldName;
                                                    }
                                                }

                                                if (rdbA.Checked == true && rdbPO.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                                {
                                                    if (cmbcustomfield.SelectedIndex > 0)
                                                    {
                                                        intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value)));
                                                        lntpoquantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value)));
                                                        editDesc = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineDesc"].Value.ToString());
                                                       
                                                        foreach (var varintemincr in objfieldlist)
                                                        {
                                                            if (varintemincr.datasourcetext != null)
                                                            {

                                                                if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
                                                                {
                                                                    char charArr = varintemincr.delimiter.ToCharArray()[0];

                                                                    string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

                                                                    for (int h = 0; h < incrementfieldlist.Length; h++) //loop
                                                                    {
                                                                        if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
                                                                        {
                                                                            blnIsIncrementcounter = true;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                                                    {
                                                                        blnIsIncrementcounter = true;
                                                                        break;
                                                                    }

                                                                }
                                                            }
                                                        }
                                                        if (blnIsIncrementcounter == true)
                                                        {
                                                            lobjTemplatexml.PrintTemplateForPOIncrementCounter(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntpoquantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                            
                                                                //print multiple images:10-APR-2019
                                                                filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");
                                                                PrintMultipleImages(filePath);
                                                        }
                                                        else
                                                        {
                                                            lobjTemplatexml.PrintTemplateForPOMultiple(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                               
                                                                    filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff");

                                                                    Print(filePath, intQuantity);
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //cursor
                                                        intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value)));
                                                        lntpoquantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value)));
                                                        editDesc = Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineDesc"].Value.ToString());
                                                        //print here...

                                                        //create pdf and  image
                                                        //foreach (var varintemincr in objfieldlist)
                                                        //{
                                                        //    if (varintemincr.datasourcetext != null)
                                                        //    {
                                                        //        if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                                        //        {
                                                        //            blnIsIncrementcounter = true;
                                                        //            break;
                                                        //        }
                                                        //    }
                                                        //}
                                                        foreach (var varintemincr in objfieldlist)
                                                        {
                                                            if (varintemincr.datasourcetext != null)
                                                            {

                                                                if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
                                                                {
                                                                    char charArr = varintemincr.delimiter.ToCharArray()[0];

                                                                    string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

                                                                    for (int h = 0; h < incrementfieldlist.Length; h++) //loop
                                                                    {
                                                                        if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
                                                                        {
                                                                            blnIsIncrementcounter = true;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                                                    {
                                                                        blnIsIncrementcounter = true;
                                                                        break;
                                                                    }

                                                                }
                                                            }
                                                        }
                                                        if (blnIsIncrementcounter == true)
                                                        {
                                                             lobjTemplatexml.PrintTemplateForPOIncrementCounter(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntpoquantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                                     //print multiple images:10-APR-2019
                                                                        filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");
                                                                        PrintMultipleImages(filePath);
                                                                  
                                                        }
                                                        else
                                                        {
                                                             lobjTemplatexml.PrintTemplateForPOMultiple(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                                        
                                                                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff");

                                                                            Print(filePath, intQuantity);
                                                                        
                                                        }




                                                    }
                                                }




                                            } //end skip po
                                            else
                                            {
                                                MessageBox.Show("Select Label", "Label Connector");

                                            }
                                            btnClear.Enabled = true;
                                            btnPrint.Enabled = true;

                                        } //end of skip po
                                    } //end check
                                } //end for

                                //save labe path for multiple po Dat3e 03-12-2017
                                if (rdbPO.Checked == true && rdbA.Checked == true)
                                {
                                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0") //for receipt
                                    {
                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "savereceiptlabel");
                                    }
                                    else //for regular po
                                    {

                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "savepomultiplelabel");
                                    }
                                }
                                //save printer name :Date 11-Feb-2017
                                if (rdbPO.Checked == true)
                                {
                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "poprinter");
                                }




                            }
                        }

                    }

                }// end hourglass
            } //end try
            catch (Exception ex)
            {

            }
        }

        //print  PO Item Receipt UDF Label print:26-Aug-2019
        private void PrintPOReceiptsLabel()
        {
            int intQuantity = 0;
            int cntChk = 0;
            string checkAuto = string.Empty;
            string SetValuesForTransType = string.Empty;
            string SetTemplatewidth = string.Empty;
            string SetTemplateheight = string.Empty;
            bool blnIsIncrementcounter = false;
            int lntpoquantity = 0;
            int increment = 1;
            int serialnocount = 0;
            string snoindex = string.Empty;
            string[] SerialNoParts;
            char[] snsplit = new char[] { ',' };
            int qtyvalue = 0;
            bool isNumericQuantity = false;

            List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
            clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
            List<QuickBooksField> objheaderfield = new List<QuickBooksField>();
            try
            {
                using (new HourGlass())
                {
                    if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {

                        if (CheckMandetory())
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                {
                                    if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                    {
                                        cntChk = cntChk + 1;
                                    }
                                }
                                if (cntChk == DataGVItems.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }
                                // int qtyvalue = 0;
                                // bool isNumericQuantity = false;
                                ArrayList alLineItem = null;
                                clsPurchaseOrderLine objclsPurchaseOrderLine = null;

                                Type objClsType;
                                object strPropertyValue = null;
                                string flipPoQtyvalue = string.Empty;
                                for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                {

                                    if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    {
                                        //skip po qty having count zero
                                        if ((rdbA.Checked == true || rdbB.Checked == true) && rdbPO.Checked == true)
                                        {
                                            isNumericQuantity = int.TryParse(Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim()), out qtyvalue);
                                            if (!isNumericQuantity)
                                            {
                                                continue;
                                            }
                                            //skip items having print lbl qty is 0
                                            else if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim()))) == 0)
                                            {
                                                continue;
                                            }

                                            if ((cmbLabelName.SelectedIndex != 0) || (checkAuto == "Auto"))
                                            {

                                                if (rdbPO.Checked == true)
                                                {
                                                    intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value);
                                                }

                                                if (rdbPO.Checked == true)
                                                {
                                                    objclsPurchaseOrderLine = new clsPurchaseOrderLine();
                                                    //if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                                    //{
                                                    //    int QtyOnLableValue = 0;
                                                    //    //Print 1 Label by default is selected,pass the Quotient to Qty
                                                    //    flipPoQtyvalue = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty");
                                                    //    if (cmbcustomfield.SelectedIndex > 0)
                                                    //    {
                                                    //        QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                                                    //    }
                                                    //    else //print prev original
                                                    //    {
                                                    //        QtyOnLableValue = Convert.ToInt32(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                                                    //    }
                                                    //    alLineItem = objclsPurchaseOrderLine.GetPOLine(Convert.ToString(QtyOnLableValue), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);

                                                    //}//end showpo
                                                    //  else
                                                    // {
                                                    //ShowPo else part code goes here may be for recipt(5381)
                                                    //print item with serial numbers
                                                    if (DataGVItems.Columns.Contains("SerialNo"))
                                                    {
                                                        if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0" && !string.IsNullOrWhiteSpace(Convert.ToString(DataGVItems.Rows[j].Cells["SerialNo"].Value)))
                                                        {
                                                            SerialNoParts = Convert.ToString(DataGVItems.Rows[j].Cells["SerialNo"].Value).Split(snsplit, StringSplitOptions.RemoveEmptyEntries);

                                                            var objreceiptqty = (from receiptqty in lobjclsPurchaseOrderLine
                                                                                 where receiptqty.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineItemRefFullName"].Value)
                                                                                 select receiptqty.RecQty).LastOrDefault();

                                                            intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value.ToString().Trim())));
                                                            lntpoquantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value.ToString().Trim())));


                                                            objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                                            //Get property fields list

                                                            objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());
                                                            foreach (QuickBooksField itemfield in objheaderfield)
                                                            {
                                                                if (itemfield.ItemFieldId == 1)
                                                                {
                                                                    SetValuesForTransType = itemfield.ItemFieldName;
                                                                }
                                                                else if (itemfield.ItemFieldId == 2)
                                                                {
                                                                    SetTemplatewidth = itemfield.ItemFieldName;
                                                                }
                                                                else if (itemfield.ItemFieldId == 3)
                                                                {
                                                                    SetTemplateheight = itemfield.ItemFieldName;
                                                                }
                                                            }

                                                            //If receiptqty less than or equal to serial numbers
                                                            if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))) <= Convert.ToInt32(SerialNoParts.Length))
                                                            {

                                                                for (int k = 0; k < SerialNoParts.Length; k++)
                                                                {

                                                                    if (k < Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))))
                                                                    {


                                                                        PrintReceiptwithSerialNoUDF(j, Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))), SerialNoParts[k].ToString(), cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntpoquantity, blnIsIncrementcounter, objfieldlist, lobjDataExtension);
                                                                    }

                                                                }

                                                            }
                                                            //If receiptqty grater than  to serial number
                                                            else if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))) >= Convert.ToInt32(SerialNoParts.Length))
                                                            {


                                                                while (increment <= Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))))
                                                                {
                                                                    if (SerialNoParts.ElementAtOrDefault(serialnocount) != null)
                                                                    {
                                                                        snoindex = SerialNoParts[serialnocount].ToString();
                                                                    }
                                                                    else
                                                                    {
                                                                        snoindex = string.Empty;
                                                                    }


                                                                    PrintReceiptwithSerialNoUDF(j, Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantityToPrint"].Value))), snoindex, cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntpoquantity, blnIsIncrementcounter, objfieldlist, lobjDataExtension);
                                                                    increment++;
                                                                    serialnocount++;

                                                                }

                                                            }


                                                        }
                                                    }

                                                    // }

                                                    // objClsType = objclsPurchaseOrderLine.GetType();
                                                }//end rdbpo


                                            } //end skip po
                                            else
                                            {
                                                MessageBox.Show("Select Label", "Label Connector");

                                            }
                                            btnClear.Enabled = true;
                                            btnPrint.Enabled = true;

                                        } //end of skip po
                                    } //end check
                                } //end for

                                //save labe path for multiple po Dat3e 03-12-2017
                                if (rdbPO.Checked == true && rdbA.Checked == true)
                                {
                                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0") //for receipt
                                    {
                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "savereceiptlabel");
                                    }
                                    else //for regular po
                                    {

                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "savepomultiplelabel");
                                    }
                                }
                                //save printer name :Date 11-Feb-2017
                                if (rdbPO.Checked == true)
                                {
                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "poprinter");
                                }




                            }
                        }

                    }

                }// end hourglass
            } //end try
            catch (Exception ex)
            {

            }
        }


        private void PrintSOLabel()
        {
          

            int cntfChk = 0;
            string checkfAuto = string.Empty;
            clsPurchaseOrderLine objfPOLine = new clsPurchaseOrderLine();
            int qtyfvalue = 0;
            bool isNumericfQuantity = false;
            ArrayList printinglabel = new ArrayList();
            clsEditedsalesorderLine objclsEditedsalesorderLine;
            clsSalesOrderLine objfSOLine = new clsSalesOrderLine();
                try
                {
               Invoke((MethodInvoker)async delegate
                {
                    using (new HourGlass())
                    {
                        if (CheckMandetory())
                        {

                            if (DataGVItems.Rows.Count > 0)
                            {
                                for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                {
                                    if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                    {
                                        cntfChk = cntfChk + 1;
                                    }
                                    else
                                    {
                                        if ((rdbA.Checked == true || rdbB.Checked == true) && rdbSO.Checked == true)
                                        {
                                            if (string.IsNullOrWhiteSpace(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()) || string.IsNullOrEmpty(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()))
                                            {
                                                continue;
                                            }
                                            isNumericfQuantity = int.TryParse(Convert.ToString(Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value).ToString().Trim()), out qtyfvalue);
                                            if (!isNumericfQuantity)
                                            {
                                                continue;
                                            }

                                            //skip items having print lbl qty is 0
                                            else if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value))) == 0)
                                            {
                                                continue;
                                            }

                                            if ((cmbLabelName.SelectedIndex != 0) || (checkfAuto == "Auto"))
                                            {
                                                objclsEditedsalesorderLine = new clsEditedsalesorderLine();
                                                clsItemLine objlinename = new clsItemLine();

                                                objclsEditedsalesorderLine.labelName = cmbLabelName.Text.ToString();
                                                objclsEditedsalesorderLine.PrinterName = cmbLabelPrinter.Text.ToString();
                                                objclsEditedsalesorderLine.SalesOrderLineDesc = Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineDesc"].Value.ToString());
                                                objclsEditedsalesorderLine.SalesOrderLineQuantityToPrint = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value)));
                                                objclsEditedsalesorderLine.SalesOrderLineQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantity"].Value)));
                                                if (txtdecnumber.Text != "")
                                                {
                                                    objclsEditedsalesorderLine.lstrdecnumber = txtdecnumber.Text.ToString();
                                                }
                                                if (txtcarrier.Text != "")
                                                {
                                                    objclsEditedsalesorderLine.lstrcarrier = txtcarrier.Text.ToString();
                                                }

                                                if (DataGVItems.Rows[j].Cells["SalesORderItemName"].Value != null)
                                                {
                                                    objclsEditedsalesorderLine.Barcode = objfPOLine.GetItemsBarCode(DataGVItems.Rows[j].Cells["SalesORderItemName"].Value.ToString().Trim(),true);
                                                }
                                                objclsEditedsalesorderLine.SalesPrice = Convert.ToString(DataGVItems.Rows[j].Cells["SalesPrice"].Value);
                                                objclsEditedsalesorderLine.MarkUpPrice = Convert.ToString(DataGVItems.Rows[j].Cells["MarkUpPrice"].Value);
                                                objclsEditedsalesorderLine.SalesOrderLineQuantityonLabel = Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityonLabel"].Value);
                                                objclsEditedsalesorderLine.OrderNumber = txtOrderNumber.Text;
                                                objclsEditedsalesorderLine.SalesOrderLineTxnLineID = Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineTxnLineID"].Value);
                                                objclsEditedsalesorderLine.GridFirstvalue = Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value);
                                                objclsEditedsalesorderLine.GridSecondvalue = (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value;
                                                objclsEditedsalesorderLine.CompanyName = (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value;
                                                objclsEditedsalesorderLine.EditedsalesorderLineCount = 0;

                                                alclsEditedsalesorderLine.Add(objclsEditedsalesorderLine);
                                                objlinename.SalesOrderLineItemRefFullName = Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineItemRefFullName"].Value.ToString());
                                                printinglabel.Add(objlinename);

                                            } //end skip po
                                            else
                                            {
                                                MessageBox.Show("Select Label", "Label Connector");
                                            }
                                          
                                            btnPrint.Enabled = true;

                                        } //end of skip po
                                        if (DataGVItems.Rows[j].Cells["SalesOrderLineItemRefFullName"].Value.ToString().Trim() == lobjQBConfiguration.GetLabelConfigSettings("endofProduction").ToString())
                                        {
                                            return;
                                        }
                                    }
                                }

                                if (cntfChk == DataGVItems.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }
                                else
                                {
                                   
                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "PrintLabel");
                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "soprinter");

                                    foreach (clsItemLine clsobj in printinglabel)
                                    {
                                        listviewprintingItem.Items.Add(clsobj.SalesOrderLineItemRefFullName);
                                    }

                                    await Task.Run(() => salesorderthreadprinting(alclsEditedsalesorderLine));


                                    if (alclsEditedsalesorderLine.Count != 0)
                                    {
                                        await Task.Run(() => salesorderthreadprinting(alclsEditedsalesorderLine));
                                    }
                                    else
                                    {
                                        btnClear.Enabled = true;
                                    }
                                }
                            }

                        }
                    }// end hourglass
                });

                } //end try
                catch (Exception ex)
                {

                }

        }

        private void salesorderthreadprinting(ArrayList algetsalesorderline)
        {
            int intQuantity = 0;
            string SetValuesForTransType = string.Empty;
            string SetTemplatewidth = string.Empty;
            string SetTemplateheight = string.Empty;
            string QtyContainercheck = string.Empty;
            string qtypercontianerField = string.Empty;
            string qtypercontainervalue = string.Empty;
            bool blnIsIncrementcounter = false;
            int lntsoquantity = 0;

            List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
            clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
            List<QuickBooksField> objheaderfield = new List<QuickBooksField>();
            clsSalesOrderLine objclsSalesOrderLine = new clsSalesOrderLine();
            ArrayList alLineItem = new ArrayList();
            Type objClsType;

            using (new DefaultCursor())
            {
                var querygetdetails = (from clsEditedsalesorderLine s in algetsalesorderline select s).ToList();
               
                for (int i = 0; i <= querygetdetails.Count - 1; i++)
                {

                    if (((clsEditedsalesorderLine)algetsalesorderline[0]).EditedsalesorderLineCount == 0)
                    {


                        QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer");
                        qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField");

                         alLineItem = objclsSalesOrderLine.GetSOLineAsync(((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityonLabel, ((clsEditedsalesorderLine)algetsalesorderline[0]).OrderNumber, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineTxnLineID, ((clsEditedsalesorderLine)algetsalesorderline[0]).GridFirstvalue, ((clsEditedsalesorderLine)algetsalesorderline[0]).GridSecondvalue, ((clsEditedsalesorderLine)algetsalesorderline[0]).CompanyName, lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField").ToString().ToUpper(),out lobjDataExtension);
                       
                        if (((clsEditedsalesorderLine)algetsalesorderline[0]).SalesPrice != null && ((clsEditedsalesorderLine)algetsalesorderline[0]).MarkUpPrice != null)
                        {
                            foreach (clsSalesOrderLine objitem in alLineItem)
                            {
                                objitem.SalesPrice = ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesPrice;
                                objitem.MarkUpPrice = ((clsEditedsalesorderLine)algetsalesorderline[0]).MarkUpPrice;
                            }
                        }
                        objClsType = objclsSalesOrderLine.GetType();


                        objfieldlist = lobjTemplatexml.GetFieldPropertiesList(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName, string.Empty);

                        objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName);

                        foreach (QuickBooksField itemfield in objheaderfield)
                        {
                            if (itemfield.ItemFieldId == 1)
                            {
                                SetValuesForTransType = itemfield.ItemFieldName;
                            }
                            else if (itemfield.ItemFieldId == 2)
                            {
                                SetTemplatewidth = itemfield.ItemFieldName;
                            }
                            else if (itemfield.ItemFieldId == 3)
                            {
                                SetTemplateheight = itemfield.ItemFieldName;
                            }
                        }

                        foreach (var varintemincr in objfieldlist)
                        {
                            if (varintemincr.datasourcetext != null)
                            {

                                if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
                                {
                                    char charArr = varintemincr.delimiter.ToCharArray()[0];

                                    string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

                                    for (int h = 0; h < incrementfieldlist.Length; h++) //loop
                                    {
                                        if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
                                        {
                                            blnIsIncrementcounter = true;
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                    {
                                        blnIsIncrementcounter = true;
                                        break;
                                    }
                                }
                            }
                        }
                        ((clsEditedsalesorderLine)algetsalesorderline[0]).EditedsalesorderLineCount = 1;
                        if (blnIsIncrementcounter == true)
                        {
                            lobjTemplatexml.PrintTemplateForSalesOrderIncrementCounter(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, Convert.ToInt32(((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityToPrint), ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantity, objfieldlist, alLineItem, QtyContainercheck, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrdecnumber, qtypercontianerField, ((clsEditedsalesorderLine)algetsalesorderline[0]).Barcode, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrcarrier, lobjDataExtension, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineDesc, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);

                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + ((clsEditedsalesorderLine)algetsalesorderline[0]).labelName + "\\");
                            PrintMultipleImagesForSO(filePath, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);
                        }
                        else
                        {
                            lobjTemplatexml.PrintTemplateForSalesOrderMultiple(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityToPrint, objfieldlist, alLineItem, QtyContainercheck, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrdecnumber, qtypercontianerField, ((clsEditedsalesorderLine)algetsalesorderline[0]).Barcode, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrcarrier, lobjDataExtension, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineDesc, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);


                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + ((clsEditedsalesorderLine)algetsalesorderline[0]).labelName + "\\" + ((clsEditedsalesorderLine)algetsalesorderline[0]).labelName + ".Tiff");
                            PrintSO(filePath, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityToPrint, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);

                        }
                        Invoke((MethodInvoker)async delegate
                        //listviewprintingItem.Invoke((MethodInvoker)delegate
                        {
                            listviewprintingItem.Items.RemoveAt(0);
                        });

                        algetsalesorderline.RemoveAt(0);

                    }
                }
            }
        }
        //private void salesorderthreadprinting(ArrayList algetsalesorderline)
        //{
        //    int intQuantity = 0;
        //    string SetValuesForTransType = string.Empty;
        //    string SetTemplatewidth = string.Empty;
        //    string SetTemplateheight = string.Empty;
        //    string QtyContainercheck = string.Empty;
        //    string qtypercontianerField = string.Empty;
        //    string qtypercontainervalue = string.Empty;
        //    bool blnIsIncrementcounter = false;
        //    int lntsoquantity = 0;

        //    List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
        //    clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
        //    List<QuickBooksField> objheaderfield = new List<QuickBooksField>();
        //    clsSalesOrderLine objclsSalesOrderLine = new clsSalesOrderLine();
        //    ArrayList alLineItem = new ArrayList();
        //    Type objClsType;

        //    using (new DefaultCursor())
        //    {
        //        var querygetdetails = (from clsEditedsalesorderLine s in algetsalesorderline select s).ToList();

        //        for (int i = 0; i <= querygetdetails.Count - 1; i++)
        //        {

        //            if (((clsEditedsalesorderLine)algetsalesorderline[0]).EditedsalesorderLineCount == 0)
        //            {


        //                QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer");
        //                qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField");

        //                alLineItem = objclsSalesOrderLine.GetSOLineAsync(((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityonLabel, ((clsEditedsalesorderLine)algetsalesorderline[0]).OrderNumber, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineTxnLineID, ((clsEditedsalesorderLine)algetsalesorderline[0]).GridFirstvalue, ((clsEditedsalesorderLine)algetsalesorderline[0]).GridSecondvalue, ((clsEditedsalesorderLine)algetsalesorderline[0]).CompanyName, lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField").ToString().ToUpper(), ((clsEditedsalesorderLine)algetsalesorderline[0]).CustomerName, out lobjDataExtension);

        //                if (((clsEditedsalesorderLine)algetsalesorderline[0]).SalesPrice != null && ((clsEditedsalesorderLine)algetsalesorderline[0]).MarkUpPrice != null)
        //                {
        //                    foreach (clsSalesOrderLine objitem in alLineItem)
        //                    {
        //                        objitem.SalesPrice = ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesPrice;
        //                        objitem.MarkUpPrice = ((clsEditedsalesorderLine)algetsalesorderline[0]).MarkUpPrice;
        //                    }
        //                }
        //                objClsType = objclsSalesOrderLine.GetType();


        //                objfieldlist = lobjTemplatexml.GetFieldPropertiesList(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName, string.Empty);

        //                objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName);

        //                foreach (QuickBooksField itemfield in objheaderfield)
        //                {
        //                    if (itemfield.ItemFieldId == 1)
        //                    {
        //                        SetValuesForTransType = itemfield.ItemFieldName;
        //                    }
        //                    else if (itemfield.ItemFieldId == 2)
        //                    {
        //                        SetTemplatewidth = itemfield.ItemFieldName;
        //                    }
        //                    else if (itemfield.ItemFieldId == 3)
        //                    {
        //                        SetTemplateheight = itemfield.ItemFieldName;
        //                    }
        //                }

        //                foreach (var varintemincr in objfieldlist)
        //                {
        //                    if (varintemincr.datasourcetext != null)
        //                    {

        //                        if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
        //                        {
        //                            char charArr = varintemincr.delimiter.ToCharArray()[0];

        //                            string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

        //                            for (int h = 0; h < incrementfieldlist.Length; h++) //loop
        //                            {
        //                                if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
        //                                {
        //                                    blnIsIncrementcounter = true;
        //                                    break;
        //                                }
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
        //                            {
        //                                blnIsIncrementcounter = true;
        //                                break;
        //                            }
        //                        }
        //                    }
        //                }
        //                ((clsEditedsalesorderLine)algetsalesorderline[0]).EditedsalesorderLineCount = 1;
        //                if (blnIsIncrementcounter == true)
        //                {
        //                     lobjTemplatexml.PrintTemplateForSalesOrderIncrementCounter(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, Convert.ToInt32(((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityToPrint), ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantity, objfieldlist, alLineItem, QtyContainercheck, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrdecnumber, qtypercontianerField, ((clsEditedsalesorderLine)algetsalesorderline[0]).Barcode, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrcarrier, lobjDataExtension, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineDesc, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);
                           
        //                        filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + ((clsEditedsalesorderLine)algetsalesorderline[0]).labelName + "\\");
        //                        PrintMultipleImagesForSO(filePath, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);
        //                }
        //                else
        //                {
        //                    lobjTemplatexml.PrintTemplateForSalesOrderMultiple(((clsEditedsalesorderLine)algetsalesorderline[0]).labelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityToPrint, objfieldlist, alLineItem, QtyContainercheck, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrdecnumber, qtypercontianerField, ((clsEditedsalesorderLine)algetsalesorderline[0]).Barcode, ((clsEditedsalesorderLine)algetsalesorderline[0]).lstrcarrier, lobjDataExtension, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineDesc, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);

                           
        //                        filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + ((clsEditedsalesorderLine)algetsalesorderline[0]).labelName + "\\" + ((clsEditedsalesorderLine)algetsalesorderline[0]).labelName + ".Tiff");
        //                        PrintSO(filePath, ((clsEditedsalesorderLine)algetsalesorderline[0]).SalesOrderLineQuantityToPrint, ((clsEditedsalesorderLine)algetsalesorderline[0]).PrinterName);
                           
        //                }

        //                listviewprintingItem.Invoke((MethodInvoker)delegate
        //                {
        //                    listviewprintingItem.Items.RemoveAt(0);
        //                });

        //                algetsalesorderline.RemoveAt(0);

        //            }
        //        }
        //    }
        //}

        //print SO UDF Label
        private async void PrintSOUDFLabel()
         {
            int intQuantity = 0;
            int cntChk = 0;
            string checkAuto = string.Empty;
            string SetValuesForTransType = string.Empty;
            string SetTemplatewidth = string.Empty;
            string SetTemplateheight = string.Empty;
            string QtyContainercheck = string.Empty;
            string qtypercontianerField = string.Empty;
            string strBarcode = string.Empty;
            string lstrdecnumber = string.Empty;
            string lstrcarrier = string.Empty;
            string qtypercontainervalue = string.Empty;
            bool blnIsIncrementcounter = false;
            int lntsoquantity = 0;
            string editDesc = string.Empty;

            List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
            clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
            List<QuickBooksField> objheaderfield = new List<QuickBooksField>();
            clsPurchaseOrderLine objPOLine = new clsPurchaseOrderLine();
            try
            {
                using (new HourGlass())
                {
                    if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {

                        if (CheckMandetory())
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                {
                                    if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                    {
                                        cntChk = cntChk + 1;
                                    }
                                }
                                if (cntChk == DataGVItems.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }
                                int qtyvalue = 0;
                                bool isNumericQuantity = false;
                                ArrayList alLineItem = new ArrayList();
                                ArrayList GetSalesOrderfields = null;
                                clsSalesOrderLine objclsSalesOrderLine = null;

                                Type objClsType;

                                string flipPoQtyvalue = string.Empty;
                                for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                {

                                    if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    {
                                        //skip po qty having count zero
                                        if ((rdbA.Checked == true || rdbB.Checked == true) && rdbSO.Checked == true)
                                        {
                                            if(string.IsNullOrWhiteSpace(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()) || string.IsNullOrEmpty(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim()))
                                            {
                                                continue;
                                            }
                                            isNumericQuantity = int.TryParse(Convert.ToString(Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value).ToString().Trim()), out qtyvalue);
                                            if (!isNumericQuantity)
                                            {
                                                continue;
                                            }
                                            //skip items having print lbl qty is 0
                                            else if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value))) == 0)
                                            {
                                                continue;
                                            }

                                            if ((cmbLabelName.SelectedIndex != 0) || (checkAuto == "Auto"))
                                            {
                                                objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                                

                                                if (rdbSO.Checked == true)
                                                {
                                                    QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer"); //10-APR-2019
                                                    qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField"); //10-APR-2019

                                                    objclsSalesOrderLine = new clsSalesOrderLine();

                                                    //GetSalesOrderfields = ModGlobal.salesorder;

                                                      alLineItem = await objclsSalesOrderLine.GetFieldSOLine(Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityonLabel"].Value), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value);
                                                   
                                                  
                                                    //var SalesOrderLineTxnLineID = Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineTxnLineID"].Value);
                                                   
                                                    //    clsSalesOrderLine strobjso = (from clsSalesOrderLine clsso in GetSalesOrderfields
                                                    //                                  where clsso.SalesOrderLineTxnLineID.ToString() == SalesOrderLineTxnLineID
                                                    //                                  select clsso).FirstOrDefault();

                                                    //strobjso.QtyOnLabel = Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityonLabel"].Value);
                                                    //strobjso.CustomerCompanyName = (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value;
                                                    //strobjso.RefNumber = txtOrderNumber.Text;
                                                    //strobjso.TxnDate = Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value).ToString();
                                                    //strobjso.CustomerRefFullName = (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value;

                                                    //alLineItem.Add(strobjso);

                                                    objclsSalesOrderLine.GetCustomFieldSOLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineTxnLineID"].Value), lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField").ToString().ToUpper(), out lobjDataExtension);

                                                    //Add support of sales price and discount price : 16th Feb 2018
                                                    if (DataGVItems.Rows[j].Cells["SalesPrice"].Value != null && DataGVItems.Rows[j].Cells["MarkUpPrice"].Value != null)
                                                    {
                                                        foreach (clsSalesOrderLine objitem in alLineItem)
                                                        {
                                                            objitem.SalesPrice = Convert.ToString(DataGVItems.Rows[j].Cells["SalesPrice"].Value);
                                                            objitem.MarkUpPrice = Convert.ToString(DataGVItems.Rows[j].Cells["MarkUpPrice"].Value);
                                                        }


                                                    }
                                                    objClsType = objclsSalesOrderLine.GetType();
                                                }//end rdbso


                                                //Get property fields list
                                                objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());
                                                foreach (QuickBooksField itemfield in objheaderfield)
                                                {
                                                    if (itemfield.ItemFieldId == 1)
                                                    {
                                                        SetValuesForTransType = itemfield.ItemFieldName;
                                                    }
                                                    else if (itemfield.ItemFieldId == 2)
                                                    {
                                                        SetTemplatewidth = itemfield.ItemFieldName;
                                                    }
                                                    else if (itemfield.ItemFieldId == 3)
                                                    {
                                                        SetTemplateheight = itemfield.ItemFieldName;
                                                    }
                                                }
                                                //curson comes here
                                                editDesc = Convert.ToString(DataGVItems.Rows[j].Cells["SalesOrderLineDesc"].Value.ToString());
                                                intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value)));
                                                lntsoquantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesOrderLineQuantity"].Value)));
                                                if (txtdecnumber.Text != "")
                                                {
                                                    lstrdecnumber = txtdecnumber.Text.ToString();
                                                }
                                                if (txtcarrier.Text != "")
                                                {
                                                    lstrcarrier = txtcarrier.Text.ToString();
                                                }
                                                //print here...
                                                if (DataGVItems.Rows[j].Cells["SalesORderItemName"].Value != null)
                                                {
                                                    strBarcode = objPOLine.GetItemsBarCode(DataGVItems.Rows[j].Cells["SalesORderItemName"].Value.ToString().Trim(),true);
                                                }
                                                foreach (var varintemincr in objfieldlist)
                                                {
                                                    if (varintemincr.datasourcetext != null)
                                                    {

                                                        if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
                                                        {
                                                            char charArr = varintemincr.delimiter.ToCharArray()[0];

                                                            string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

                                                            for (int h = 0; h < incrementfieldlist.Length; h++) //loop
                                                            {
                                                                if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
                                                                {
                                                                    blnIsIncrementcounter = true;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                                            {
                                                                blnIsIncrementcounter = true;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (blnIsIncrementcounter == true)
                                                {

                                                    lobjTemplatexml.PrintTemplateForSalesOrderIncrementCounter(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntsoquantity, objfieldlist, alLineItem, QtyContainercheck, lstrdecnumber, qtypercontianerField, strBarcode, lstrcarrier, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                    
                                                        //print multiple images:10-APR-2019
                                                        filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");
                                                        PrintMultipleImages(filePath);
                                                    
                                                }
                                                else
                                                {
                                                    lobjTemplatexml.PrintTemplateForSalesOrderMultiple(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, objfieldlist, alLineItem, QtyContainercheck, lstrdecnumber, qtypercontianerField, strBarcode, lstrcarrier, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                      filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff");
                                                            Print(filePath, intQuantity);
                                                       
                                                }
                                            } //end skip po
                                            else
                                            {
                                                MessageBox.Show("Select Label", "Label Connector");

                                            }
                                            btnClear.Enabled = true;
                                            btnPrint.Enabled = true;

                                        } //end of skip po
                                        if(DataGVItems.Rows[j].Cells["SalesOrderLineItemRefFullName"].Value.ToString().Trim() == lobjQBConfiguration.GetLabelConfigSettings("endofProduction").ToString())
                                        {
                                            return;
                                        }
                                    } //end check
                                } //end for

                                //save labe path for multiple ps Dat3e 03-12-2017

                                lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "PrintLabel");

                                //save printer name :Date 11-Feb-2017

                                lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "soprinter");

                            }
                        }

                    }
                    else
                    {  //Sales order(UDF) date range functionality
                    
                        clsSalesOrderLine objclsSalseOrderLine = null;
                        if (string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                        {

                            string Invsearchno = string.Empty;

                            List<clsSalesOrderLine> clsfilterinv = new List<clsSalesOrderLine>();

                            if (CheckMandetory())
                            {

                                if (dataGVSelectedorderheader.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                                    {
                                        if (dataGVSelectedorderheader.Rows[i].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "False")
                                        {
                                            cntChk = cntChk + 1;
                                        }
                                    }
                                    if (cntChk == dataGVSelectedorderheader.Rows.Count)
                                    {
                                        MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                        return;
                                    }


                                    for (int j = 0; j < dataGVSelectedorderheader.Rows.Count; j++)
                                    {

                                        if (dataGVSelectedorderheader.Rows[j].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "True")
                                        {

                                            Invsearchno = Convert.ToString(dataGVSelectedorderheader.Rows[j].Cells[2].Value);
                                            objclsSalseOrderLine = new clsSalesOrderLine();

                                            objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                            //Get property fields list

                                            objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());
                                            foreach (QuickBooksField itemfield in objheaderfield)
                                            {
                                                if (itemfield.ItemFieldId == 1)
                                                {
                                                    SetValuesForTransType = itemfield.ItemFieldName;
                                                }
                                                else if (itemfield.ItemFieldId == 2)
                                                {
                                                    SetTemplatewidth = itemfield.ItemFieldName;
                                                }
                                                else if (itemfield.ItemFieldId == 3)
                                                {
                                                    SetTemplateheight = itemfield.ItemFieldName;
                                                }
                                            }
                                            //create pdf and  image
                                           lobjTemplatexml.GetSalesOrderUDFFilterOrders(Invsearchno, Convert.ToString(cmbLabelName.Text), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, objfieldlist, alInvoiceData, Convert.ToString(cmbLabelPrinter.Text), lobjDataExtension1, cmbLabelPrinter.Text.ToString());
                                           
                                            }
                                    }

                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "PrintLabel");

                                    //save printer name :Date 11-Feb-2017

                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "soprinter");

                                }//end of if
                            }

                        } //end  if txtordno empty


                    }

                }// end hourglass
            } //end try
            catch (Exception ex)
            {

            }
        }
        private void PrintSRUDFLabel()
        {
            int intQuantity = 0;
            int cntChk = 0;
            string checkAuto = string.Empty;
            string SetValuesForTransType = string.Empty;
            string SetTemplatewidth = string.Empty;
            string SetTemplateheight = string.Empty;
            string QtyContainercheck = string.Empty;
            string qtypercontianerField = string.Empty;
            string strBarcode = string.Empty;
            string lstrdecnumber = string.Empty;
            string lstrcarrier = string.Empty;
            string qtypercontainervalue = string.Empty;
            bool blnIsIncrementcounter = false;
            int lntsoquantity = 0;
            string editDesc = string.Empty;

            List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
            clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
            List<QuickBooksField> objheaderfield = new List<QuickBooksField>();
            clsPurchaseOrderLine objPOLine = new clsPurchaseOrderLine();
            try
            {
                using (new HourGlass())
                {
                    if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {

                        if (CheckMandetory())
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                {
                                    if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                    {
                                        cntChk = cntChk + 1;
                                    }
                                }
                                if (cntChk == DataGVItems.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }
                                int qtyvalue = 0;
                                bool isNumericQuantity = false;
                                ArrayList alLineItem = null;
                                clsSalesReceiptLineItems objclsSalesReceiptLine = null;

                                Type objClsType;

                                string flipPoQtyvalue = string.Empty;
                                for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                {

                                    if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    {
                                        //skip po qty having count zero
                                        if ((rdbA.Checked == true) && rdbSR.Checked == true)
                                        {
                                            if (string.IsNullOrWhiteSpace(DataGVItems.Rows[j].Cells["SalesReceiptLineQuantityToPrint"].Value.ToString().Trim()) || string.IsNullOrEmpty(DataGVItems.Rows[j].Cells["SalesReceiptLineQuantityToPrint"].Value.ToString().Trim()))
                                            {
                                                continue;
                                            }
                                            isNumericQuantity = int.TryParse(Convert.ToString(Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesReceiptLineQuantityToPrint"].Value).ToString().Trim()), out qtyvalue);
                                            if (!isNumericQuantity)
                                            {
                                                continue;
                                            }
                                            //skip items having print lbl qty is 0
                                            else if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesReceiptLineQuantityToPrint"].Value))) == 0)
                                            {
                                                continue;
                                            }

                                            if ((cmbLabelName.SelectedIndex != 0) || (checkAuto == "Auto"))
                                            {

                                                //if (rdbPO.Checked == true)
                                                //{
                                                //    intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantity"].Value);
                                                //}

                                                if (rdbSR.Checked == true)
                                                {
                                                    QtyContainercheck = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainer"); //10-APR-2019
                                                    qtypercontianerField = lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField"); //10-APR-2019

                                                    objclsSalesReceiptLine = new clsSalesReceiptLineItems();
                                                    alLineItem = objclsSalesReceiptLine.GetSRLine(Convert.ToString(DataGVItems.Rows[j].Cells["SalesReceiptLineQuantityonLabel"].Value), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["SalesReceiptLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value, lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField").ToString().ToUpper(), out lobjDataExtension);
                                                    //Add support of sales price and discount price : 16th Feb 2018
                                                    if (DataGVItems.Rows[j].Cells["SalesPrice"].Value != null && DataGVItems.Rows[j].Cells["MarkUpPrice"].Value != null)
                                                    {
                                                        foreach (clsSalesReceiptLineItems objitem in alLineItem)
                                                        {
                                                            if (((LabelConnector.clsSalesReceiptLineItems)objitem).SalesReceiptLineType != "Assembly")
                                                            {
                                                                objitem.SalesPrice = Convert.ToString(DataGVItems.Rows[j].Cells["SalesPrice"].Value);
                                                                objitem.MarkUpPrice = Convert.ToString(DataGVItems.Rows[j].Cells["MarkUpPrice"].Value);
                                                            }
                                                        }


                                                    }
                                                    objClsType = objclsSalesReceiptLine.GetType();
                                                }//end rdbso
                                                string cutomerPhone = "";
                                                if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("CustomerPhone") == "S")
                                                {
                                                    foreach (clsSalesReceiptLineItems objitem in alLineItem)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(objitem.CustomerRefFullName))
                                                        {
                                                            cutomerPhone = objclsSalesReceiptLine.GetCustomerPhoneNumber(objitem.CustomerRefFullName);
                                                            break;
                                                        }
                                                    }
                                                }
                                                //loop here thurgh substring here and item loop... while loop

                                                objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                                //Get property fields list

                                                objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());
                                                foreach (QuickBooksField itemfield in objheaderfield)
                                                {
                                                    if (itemfield.ItemFieldId == 1)
                                                    {
                                                        SetValuesForTransType = itemfield.ItemFieldName;
                                                    }
                                                    else if (itemfield.ItemFieldId == 2)
                                                    {
                                                        SetTemplatewidth = itemfield.ItemFieldName;
                                                    }
                                                    else if (itemfield.ItemFieldId == 3)
                                                    {
                                                        SetTemplateheight = itemfield.ItemFieldName;
                                                    }
                                                }

                                                // if (rdbA.Checked == true && rdbPO.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1")
                                                // {
                                                //if (cmbcustomfield.SelectedIndex > 0)
                                                //{
                                                //    intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["SalesOrderLineQuantityToPrint"].Value.ToString().Trim());
                                                //    // BtFormat.IdenticalCopiesOfLabel = intQuantity;
                                                //}
                                                //else
                                                //{
                                                //curson comes here
                                                editDesc = Convert.ToString(DataGVItems.Rows[j].Cells["SalesReceiptLineDesc"].Value.ToString());
                                                intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesReceiptLineQuantityToPrint"].Value)));
                                                lntsoquantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["SalesReceiptLineQuantity"].Value)));
                                                if (txtdecnumber.Text != "")
                                                {
                                                    lstrdecnumber = txtdecnumber.Text.ToString();
                                                }
                                                if (txtcarrier.Text != "")
                                                {
                                                    lstrcarrier = txtcarrier.Text.ToString();
                                                }
                                                //print here...
                                                if (DataGVItems.Rows[j].Cells["SalesReceiptItemName"].Value != null)
                                                {
                                                    strBarcode = objPOLine.GetItemsBarCode(DataGVItems.Rows[j].Cells["SalesReceiptItemName"].Value.ToString().Trim(),true);
                                                }
                                                //create pdf and  image
                                                //foreach (var varintemincr in objfieldlist)
                                                //{
                                                //    if (varintemincr.datasourcetext != null)
                                                //    {
                                                //        if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                                //        {
                                                //            blnIsIncrementcounter = true;
                                                //            break;
                                                //        }
                                                //    }
                                                //}
                                                foreach (var varintemincr in objfieldlist)
                                                {
                                                    if (varintemincr.datasourcetext != null)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
                                                        {
                                                            char charArr = varintemincr.delimiter.ToCharArray()[0];

                                                            string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

                                                            for (int h = 0; h < incrementfieldlist.Length; h++) //loop
                                                            {
                                                                if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
                                                                {
                                                                    blnIsIncrementcounter = true;
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                                            {
                                                                blnIsIncrementcounter = true;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (blnIsIncrementcounter == true)
                                                {
                                                    int intQuantity1 = 0;
                                                    int printquantity = 1;
                                                    int loop = 1;
                                                    int intQuantity2 = intQuantity;
                                                    int printlblqtytotal = 0;
                                                    int totalQty = 0;
                                                    int qtyOnLbl =0;
                                                    String ItemType = "";
                                                    foreach (var alLine in alLineItem)
                                                    {
                                                        if (((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineType == "Assembly")
                                                        {
                                                            totalQty = totalQty +  Convert.ToInt32(((LabelConnector.clsSalesReceiptLineItems)alLine).SRQty);
                                                        }
                                                    }

                                                    foreach (var alLine in alLineItem)
                                                    {
                                                        ArrayList alLineItems = new ArrayList();
                                                        
                                                        intQuantity1 = 1;
                                                        qtyOnLbl = Convert.ToInt32(((LabelConnector.clsSalesReceiptLineItems)alLine).QtyOnLabel);
                                                        ((LabelConnector.clsSalesReceiptLineItems)alLine).Phone = cutomerPhone;
                                                        if (((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineType == "Assembly")
                                                        {
                                                            ItemType = "Assembly";
                                                            intQuantity1 = intQuantity * totalQty;
                                                            qtyOnLbl = intQuantity1;
                                                            editDesc = ((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineDesc;
                                                            strBarcode = ((LabelConnector.clsSalesReceiptLineItems)alLine).BarcodeValue;                                                            
                                                            if (loop - 1 > 0)
                                                            {
                                                                printquantity = intQuantity2+1;
                                                            }                                                            
                                                            intQuantity2 = printlblqtytotal + Convert.ToInt32(((LabelConnector.clsSalesReceiptLineItems)alLine).SRQty) * intQuantity;
                                                            printlblqtytotal = intQuantity2;
                                                        }
                                                        alLineItems.Add(alLine);
                                                         lobjTemplatexml.PrintTemplateForSalesReceiptIncrementCounter(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity2, lntsoquantity, objfieldlist, alLineItems, QtyContainercheck, lstrdecnumber, qtypercontianerField, strBarcode, lstrcarrier, lobjDataExtension, editDesc, intQuantity1, printquantity,qtyOnLbl, ItemType, cmbLabelPrinter.Text.ToString());
                                                       
                                                            //print multiple images:10-APR-2019
                                                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");
                                                            PrintMultipleImages(filePath);
                                                        
                                                        loop = loop + 1;




                                                        //ArrayList alLineItems = new ArrayList();
                                                        //alLineItems.Add(alLine);
                                                        //if (((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineType == "Assembly")
                                                        //{
                                                        //    editDesc = ((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineDesc;
                                                        //    strBarcode = ((LabelConnector.clsSalesReceiptLineItems)alLine).BarCodeValue;
                                                        //    intQuantity2 = Convert.ToInt32(((LabelConnector.clsSalesReceiptLineItems)alLine).SRQty)* intQuantity;
                                                        //}
                                                        //lobjTemplatexml.PrintTemplateForSalesReceiptIncrementCounter(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity2, lntsoquantity, objfieldlist, alLineItems, QtyContainercheck, lstrdecnumber, qtypercontianerField, strBarcode, lstrcarrier, lobjDataExtension, editDesc);
                                                        ////print multiple images:10-APR-2019
                                                        //filePath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\";
                                                        //PrintMultipleImages(filePath);
                                                    }
                                                }
                                                else
                                                {
                                                    int intQuantity1 = 1;
                                                    int printquantity = 1;
                                                    int totalQty = 0;
                                                    int loop = 1;
                                                    int intQuantity2 = intQuantity;
                                                    String ItemType = "";
                                                    int printlblqtytotal = 0;
                                                    foreach (var alLine in alLineItem)
                                                    {
                                                        if (((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineType == "Assembly")
                                                        {
                                                            totalQty = totalQty + Convert.ToInt32(((LabelConnector.clsSalesReceiptLineItems)alLine).SRQty);
                                                        }
                                                    }
                                                    foreach (var alLine in alLineItem)
                                                    {

                                                        ArrayList alLineItems = new ArrayList();                                                        
                                                        intQuantity1 = 1;
                                                        ((LabelConnector.clsSalesReceiptLineItems)alLine).QtyOnLabel = "1";
                                                        ((LabelConnector.clsSalesReceiptLineItems)alLine).Phone = cutomerPhone;
                                                        if (((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineType == "Assembly")
                                                        {
                                                            ((LabelConnector.clsSalesReceiptLineItems)alLine).QtyOnLabel =Convert.ToString(intQuantity * totalQty);
                                                            intQuantity1 = intQuantity * totalQty;
                                                            editDesc = ((LabelConnector.clsSalesReceiptLineItems)alLine).SalesReceiptLineDesc;
                                                            strBarcode = ((LabelConnector.clsSalesReceiptLineItems)alLine).BarcodeValue;                                                         
                                                            intQuantity2 =  Convert.ToInt32(((LabelConnector.clsSalesReceiptLineItems)alLine).SRQty) * intQuantity;
                                                           
                                                        }
                                                        alLineItems.Add(alLine);
                                                         lobjTemplatexml.PrintTemplateForSalesReceiptMultiple(cmbLabelName.Text.ToString(), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity1, objfieldlist, alLineItems, QtyContainercheck, lstrdecnumber, qtypercontianerField, strBarcode, lstrcarrier, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                        
                                                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff");
                                                            Print(filePath, intQuantity2);
                                                       
                                                        loop = loop + 1;
                                                    }

                                                }

                                                //commented on 10-APR-2019 to get qtypercontainer value from grid
                                                //if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                                //{
                                                //    lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
                                                //    //divide qty by unitpercase value
                                                //    intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(intQuantity) / Convert.ToDouble(qtypercontainervalue)));

                                                //}
                                                //else
                                                //{
                                                //    //divide qty by unitpercase value
                                                //    intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(intQuantity) / Convert.ToDouble(1)));

                                                //}


                                                //filePath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff";
                                                //Print(filePath, intQuantity);



                                                // }
                                                //}




                                            } //end skip po
                                            else
                                            {
                                                MessageBox.Show("Select Label", "Label Connector");

                                            }
                                            btnClear.Enabled = true;
                                            btnPrint.Enabled = true;

                                        } //end of skip po
                                    } //end check
                                } //end for

                                //save labe path for multiple ps Dat3e 03-12-2017

                                lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "PrintLabel");

                                //save printer name :Date 11-Feb-2017

                                lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "srprinter");

                            }
                        }

                    }
                    else
                    {  //Sales order(UDF) date range functionality

                        //int intQuantity = 0;
                        clsSalesReceiptLineItems objclsSalseReceiptLine = null;
                        if (string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                        {

                            string Invsearchno = string.Empty;

                            List<clsSalesReceiptLineItems> clsfilterinv = new List<clsSalesReceiptLineItems>();

                            if (CheckMandetory())
                            {

                                if (dataGVSelectedorderheader.Rows.Count > 0)
                                {
                                    for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                                    {
                                        if (dataGVSelectedorderheader.Rows[i].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "False")
                                        {
                                            cntChk = cntChk + 1;
                                        }
                                    }
                                    if (cntChk == dataGVSelectedorderheader.Rows.Count)
                                    {
                                        MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                        return;
                                    }


                                    for (int j = 0; j < dataGVSelectedorderheader.Rows.Count; j++)
                                    {

                                        if (dataGVSelectedorderheader.Rows[j].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "True")
                                        {

                                            Invsearchno = Convert.ToString(dataGVSelectedorderheader.Rows[j].Cells[2].Value);

                                            //check if selected type is invoice or sales order

                                            // GetInvFilterOrders(Invsearchno);
                                            objclsSalseReceiptLine = new clsSalesReceiptLineItems();


                                            // alLineItem = objclsInvoiceLine.GetINVLine(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value), Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension, AutoManualPath, lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck"));
                                             
                                            // objClsType = objclsInvoiceLine.GetType();


                                            objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                            //Get property fields list

                                            objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());
                                            foreach (QuickBooksField itemfield in objheaderfield)
                                            {
                                                if (itemfield.ItemFieldId == 1)
                                                {
                                                    SetValuesForTransType = itemfield.ItemFieldName;
                                                }
                                                else if (itemfield.ItemFieldId == 2)
                                                {
                                                    SetTemplatewidth = itemfield.ItemFieldName;
                                                }
                                                else if (itemfield.ItemFieldId == 3)
                                                {
                                                    SetTemplateheight = itemfield.ItemFieldName;
                                                }
                                            }


                                            //intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantityToPrint"].Value.ToString().Trim());



                                            //create pdf and  image
                                           lobjTemplatexml.GetSalesReceiptUDFFilterOrders(Invsearchno, Convert.ToString(cmbLabelName.Text), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, objfieldlist, alInvoiceData, Convert.ToString(cmbLabelPrinter.Text), lobjDataExtension1, cmbLabelPrinter.Text.ToString());

                                            //print here...
                                            // filePath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff";
                                            // Print(filePath, intQuantity);

                                        }


                                    }

                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "PrintLabel");

                                    //save printer name :Date 11-Feb-2017

                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "srprinter");

                                }//end of if
                            }

                        } //end  if txtordno empty


                    }

                }// end hourglass
            } //end try
            catch (Exception ex)
            {

            }
        }
        //print doc

        public void PrintSO(string FileName, int pintprintqty, string PrinterName)
        {
            StringBuilder logMessage = new StringBuilder();

            try
            {
                if (string.IsNullOrWhiteSpace(FileName)) return; // Prevents execution of below statements if filename is not selected.

                PrintDocument pd = new PrintDocument();

                //Disable the printing document pop-up dialog shown during printing.
                PrintController printController = new StandardPrintController();
                pd.PrintController = printController;
                pd.PrinterSettings.PrinterName = PrinterName;
                pd.PrinterSettings.Copies = Convert.ToInt16(pintprintqty);
                pd.DefaultPageSettings.Landscape = false;
                pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);

                pd.PrintPage += (sndr, args) =>
                {
                    System.Drawing.Image i = System.Drawing.Image.FromFile(FileName);

                    //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                    System.Drawing.Rectangle m = args.MarginBounds;

                    //Logic below maintains Aspect Ratio.
                    if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                    {
                        m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                    }
                    else
                    {
                        m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                    }
                    //Calculating optimal orientation.
                    pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                    pd.DefaultPageSettings.Landscape = false;


                    args.Graphics.DrawImage(i, m);
                };


                pd.Print();
            }
            catch (Exception ex)
            {


            }
            finally
            {
                //  logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));


            }
        }
        public void Print(string FileName, int pintprintqty)
        {
            StringBuilder logMessage = new StringBuilder();
           
            try
            {
                if (string.IsNullOrWhiteSpace(FileName)) return; // Prevents execution of below statements if filename is not selected.

                PrintDocument pd = new PrintDocument();

                //Disable the printing document pop-up dialog shown during printing.
                PrintController printController = new StandardPrintController();
                pd.PrintController = printController;
                pd.PrinterSettings.PrinterName = cmbLabelPrinter.Text.ToString();
                pd.PrinterSettings.Copies = Convert.ToInt16(pintprintqty);
                pd.DefaultPageSettings.Landscape = false;
                pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);

                pd.PrintPage += (sndr, args) =>
            {
                System.Drawing.Image i = System.Drawing.Image.FromFile(FileName);

        //Adjust the size of the image to the page to print the full image without loosing any part of the image.
        System.Drawing.Rectangle m = args.MarginBounds;

        //Logic below maintains Aspect Ratio.
        if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                {
                    m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                }
                else
                {
                    m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                }
        //Calculating optimal orientation.
        pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                pd.DefaultPageSettings.Landscape = false; 
                                                         
                                                         
        args.Graphics.DrawImage(i, m);
            };

              
                pd.Print();
            }
            catch (Exception ex)
            {

            
            }
            finally
            {
              //  logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

              
            }
        }

        //print multiple images:Date 10-APR-2019

        public void PrintMultipleImagesForSO(string pstrimagepath,string printerName)
        {
            StringBuilder logMessage = new StringBuilder();

            try
            {

                var imagefiles = Directory.GetFiles(pstrimagepath, "*.tiff");
                if (imagefiles != null)
                {
                    foreach (var imgpath in imagefiles)
                    {
                        PrintDocument pd = new PrintDocument();

                        //Disable the printing document pop-up dialog shown during printing.
                        PrintController printController = new StandardPrintController();
                        pd.PrintController = printController;


                        pd.PrinterSettings.PrinterName = printerName;
                        pd.PrinterSettings.Copies = 1;//Convert.ToInt16(pintprintqty);
                        pd.DefaultPageSettings.Landscape = false; //New
                        pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                        pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);

                        pd.DefaultPageSettings.Landscape = false; //New
                        pd.PrintPage += (sndr, args) =>
                        {

                            System.Drawing.Image i = System.Drawing.Image.FromFile(imgpath.ToString());

                            //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                            System.Drawing.Rectangle m = args.MarginBounds;

                            //Logic below maintains Aspect Ratio.
                            if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                            {
                                m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                            }
                            else
                            {
                                m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                            }
                            //Calculating optimal orientation.
                            pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                            pd.DefaultPageSettings.Landscape = false; //New
                            args.Graphics.DrawImage(i, m);

                        };

                        pd.Print();
                    }
                }

            }
            catch (Exception ex)
            {


            }
            finally
            {
                //   logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));


            }
        }
        public  void PrintMultipleImages(string pstrimagepath)
        {
            StringBuilder logMessage = new StringBuilder();
       
            try
            {
               
                    var imagefiles = Directory.GetFiles(pstrimagepath, "*.tiff");
                    if (imagefiles != null)
                    {
                        foreach (var imgpath in imagefiles)
                        {
                            PrintDocument pd = new PrintDocument();

                            //Disable the printing document pop-up dialog shown during printing.
                            PrintController printController = new StandardPrintController();
                            pd.PrintController = printController;


                            pd.PrinterSettings.PrinterName = cmbLabelPrinter.Text.ToString();
                            pd.PrinterSettings.Copies = 1;//Convert.ToInt16(pintprintqty);
                            pd.DefaultPageSettings.Landscape = false; //New
                            pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                            pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);

                            pd.DefaultPageSettings.Landscape = false; //New
                            pd.PrintPage += (sndr, args) =>
                            {

                                System.Drawing.Image i = System.Drawing.Image.FromFile(imgpath.ToString());

                                //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                                System.Drawing.Rectangle m = args.MarginBounds;

                                //Logic below maintains Aspect Ratio.
                                if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                                {
                                    m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                                }
                                else
                                {
                                    m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                                }
                                //Calculating optimal orientation.
                                pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                                pd.DefaultPageSettings.Landscape = false; //New
                                args.Graphics.DrawImage(i, m);

                            };

                            pd.Print();
                        }
                    }
                
            }
            catch (Exception ex)
            {

             
            }
            finally
            {
             //   logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

              
            }
        }
        public static List<List<string>> splitList(List<string> filesbatch, int nSize)
        {
            var list = new List<List<string>>();

            for (int i = 0; i < filesbatch.Count; i += nSize)
            {
                list.Add(filesbatch.GetRange(i, Math.Min(nSize, filesbatch.Count - i)));
            }

            return list;
        }
        //print invoices in batches
        public void PrintMultipleInvoicesInBatches(string pstrimagepath, int pintprintcount, ArrayList lstinvquantity, double printdelay, int nSize)
        {
            // StringBuilder logMessage = new StringBuilder();

            try
            {

                List<List<string>> filelist = new List<List<string>>();

                List<string> filesbatch = new List<string>();

                PrintDocument pd = null;

                var imagefiles = Directory.GetFiles(pstrimagepath, "*.tiff");
                if (imagefiles != null)
                {
                    filesbatch = imagefiles.ToList();

                    for (int z = 0; z < filesbatch.Count; z += nSize)
                    {
                        filelist.Clear();

                        filelist.Add(filesbatch.GetRange(z, Math.Min(nSize, filesbatch.Count - z)));// collect files by batches


                        var distinctfiles = filelist.SelectMany(files => files).ToList();

                        //foreach (List<string> item in filelist)
                        //{
                        //    var sl = item.ToList();
                        //}
                        // for (var lntprintctr = 0; lntprintctr < filelist.Count; lntprintctr++)
                        foreach (var imgpath in distinctfiles)
                        {

                            // pd.DefaultPageSettings.Landscape = false;
                            foreach (QBLC.clsInvoiceLine itemqty in lstinvquantity)
                            {

                                // PrintDocument pd = new PrintDocument();
                                pd = new PrintDocument();

                                //Disable the printing document pop-up dialog shown during printing.
                                PrintController printController = new StandardPrintController();
                                pd.PrintController = printController;


                                pd.PrinterSettings.PrinterName = cmbLabelPrinter.Text.ToString();
                                pd.DefaultPageSettings.Landscape = false;
                                // pd.PrinterSettings.Copies = Convert.ToInt16(pintprintcount);
                                pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                                pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);

                                pd.PrinterSettings.Copies = Convert.ToInt16(itemqty.InvoiceLineQuantity);
                                pd.PrintPage += (sndr, args) =>
                                {

                                    System.Drawing.Image i = System.Drawing.Image.FromFile(imgpath.ToString());

                            //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                            System.Drawing.Rectangle m = args.MarginBounds;

                            //Logic below maintains Aspect Ratio.
                            if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                                    {
                                        m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                                    }
                                    else
                                    {
                                        m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                                    }
                            //Calculating optimal orientation.
                            pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                                    pd.DefaultPageSettings.Landscape = false;
                                    args.Graphics.DrawImage(i, m);

                                };

                                pd.Print();
                                lstinvquantity.Remove(itemqty);
                                break;
                                //}
                            }//end lstitemqty
                             ////delete print file
                             //   if (Directory.Exists(pstrimagepath))
                             //   {
                             //       if (File.Exists(imgpath.ToString()))
                             //       {
                             //           System.GC.Collect();
                             //           System.GC.WaitForPendingFinalizers();
                             //           File.Delete(imgpath.ToString());
                             //       }
                             //   }

                        }
                        if (printdelay > 0)
                        {
                            Thread.Sleep(Convert.ToInt32(printdelay)); //2 sec
                        }

                    }
                }

            }
            catch (Exception ex)
            {

                QBHelper.WriteLog("ErrorCatch : {0}" + ex.ToString());
            }
            finally
            {
                //logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

                //QBHelper.WriteLog("ErrorFinally : {0}" + logMessage.ToString());
                if (Directory.Exists(pstrimagepath))
                {
                    var files = Directory.GetFiles(pstrimagepath, "*.tiff");
                    if (files.Length > 0)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        foreach (string file in files)
                        {
                            File.Delete(file);
                        }

                    }
                    Directory.Delete(pstrimagepath);

                }

            }
        }


        //print multiple invoices:06-May-2019
        public void PrintMultipleInvoices(string pstrimagepath, int pintprintcount, ArrayList lstinvquantity, double printdelay)
        {
            StringBuilder logMessage = new StringBuilder();



            // logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ START - {0} - {1} -------------------]", MethodBase.GetCurrentMethod(), DateTime.Now.ToShortDateString()));
            // logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "Parameter: 1: [Name - {0}, Value - {1}", "None]", Convert.ToString("")));

            try
            {

                // if (string.IsNullOrWhiteSpace(pstrimagepath)) return; // Prevents execution of below statements if filename is not selected.


                var imagefiles = Directory.GetFiles(pstrimagepath, "*.tiff");
                if (imagefiles != null)
                {
                    //var nlist = splitList(imagefiles.ToList(),20);
                    //foreach (var item in nlist)
                    //{

                    //}

                    foreach (var imgpath in imagefiles)
                    {
                        PrintDocument pd = new PrintDocument();

                        //Disable the printing document pop-up dialog shown during printing.
                        PrintController printController = new StandardPrintController();
                        pd.PrintController = printController;


                        pd.PrinterSettings.PrinterName = cmbLabelPrinter.Text.ToString();
                        pd.DefaultPageSettings.Landscape = false;
                        // pd.PrinterSettings.Copies = Convert.ToInt16(pintprintcount);
                        pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                        pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                        pd.DefaultPageSettings.Landscape = false;
                        foreach (QBLC.clsInvoiceLine itemqty in lstinvquantity)
                        {

                            if (printdelay > 0)
                            {
                                Thread.Sleep(Convert.ToInt32(printdelay)); //2 sec
                            }
                            pd.PrinterSettings.Copies = Convert.ToInt16(itemqty.InvoiceLineQuantity);
                            pd.DefaultPageSettings.Landscape = false;//Newly added from portrait mode
                            pd.PrintPage += (sndr, args) =>
                            {

                                System.Drawing.Image i = System.Drawing.Image.FromFile(imgpath.ToString());

                        //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                        System.Drawing.Rectangle m = args.MarginBounds;

                        //Logic below maintains Aspect Ratio.
                        if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                                {
                                    m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                                }
                                else
                                {
                                    m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                                }
                        //Calculating optimal orientation.
                        pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                                pd.DefaultPageSettings.Landscape = false;
                                args.Graphics.DrawImage(i, m);

                            };

                            pd.Print();
                            lstinvquantity.Remove(itemqty);
                            break;
                            //}
                        }//end lstitemqty


                    }
                }

            }
            catch (Exception ex)
            {

                QBHelper.WriteLog("ErrorCatch : {0}" + ex.ToString());
            }
            finally
            {
                logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

                QBHelper.WriteLog("ErrorFinally : {0}" + logMessage.ToString());
                if (Directory.Exists(pstrimagepath))
                {
                    var files = Directory.GetFiles(pstrimagepath, "*.tiff");
                    if (files.Length > 0)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        foreach (string file in files)
                        {
                            File.Delete(file);
                        }

                    }
                    Directory.Delete(pstrimagepath);


                }
            }
        }

        //print multiple invoice for single copy:11-July-2019
        public void PrintMultipleInvoices(string pstrimagepath, int pintprintcount, double printdelay)
        {
            StringBuilder logMessage = new StringBuilder();

            try
            {
                int pintprcount = 1;
                int Z = 0;
                var imagefiles = Directory.GetFiles(pstrimagepath, "*.tiff");
                if (imagefiles != null)
                {
                    foreach (var imgpath in imagefiles)
                    {                        
                        if (pintprintcount == 0)
                        {
                            pintprcount = Convert.ToInt32(Math.Ceiling(Convert.ToDouble( dataGVSelectedOrders.Rows[Z].Cells["InvoiceLineQuantity"].Value)));
                        }
                        else
                        {
                            pintprcount =1;
                        }
                        PrintDocument pd = new PrintDocument();

                        //Disable the printing document pop-up dialog shown during printing.
                        PrintController printController = new StandardPrintController();
                        pd.PrintController = printController;


                        pd.PrinterSettings.PrinterName = cmbLabelPrinter.Text.ToString();
                        pd.DefaultPageSettings.Landscape = false;
                        pd.PrinterSettings.Copies = Convert.ToInt16(pintprcount);
                        pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                        pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);

                        pd.PrinterSettings.Copies = Convert.ToInt16(pintprcount);
                        if (printdelay > 0)
                        {
                            Thread.Sleep(Convert.ToInt32(printdelay)); //2 sec
                        }
                        pd.DefaultPageSettings.Landscape = false;
                        pd.PrintPage += (sndr, args) =>
                            {

                                System.Drawing.Image i = System.Drawing.Image.FromFile(imgpath.ToString());

                        //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                        System.Drawing.Rectangle m = args.MarginBounds;

                        //Logic below maintains Aspect Ratio.
                        if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                                {
                                    m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                                }
                                else
                                {
                                    m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                                }
                        //Calculating optimal orientation.
                        pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                                pd.DefaultPageSettings.Landscape = false;
                                args.Graphics.DrawImage(i, m);

                            };

                        pd.Print();

                        Z = Z + 1;

                    }
                }

            }
            catch (Exception ex)
            {

                QBHelper.WriteLog("ErrorCatch : {0}" + ex.ToString());
            }
            finally
            {
                logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

                QBHelper.WriteLog("ErrorFinally : {0}" + logMessage.ToString());
                if (Directory.Exists(pstrimagepath))
                {
                    var files = Directory.GetFiles(pstrimagepath, "*.tiff");
                    if (files.Length > 0)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        foreach (string file in files)
                        {
                            File.Delete(file);
                        }
                    }
                    Directory.Delete(pstrimagepath);
                }



            }
        }

        //print files in batches by single option
        public void PrintMultipleInvoicesSingleInBatches(string pstrimagepath, int pintprintcount, double printdelay, int nSize)
        {
            //StringBuilder logMessage = new StringBuilder();

            try
            {

                // PrintDocument pd = new PrintDocument();
                List<List<string>> filelist = new List<List<string>>();

                List<string> filesbatch = new List<string>();
                PrintDocument pd = null;

                var imagefiles = Directory.GetFiles(pstrimagepath, "*.tiff");
                if (imagefiles != null)
                {
                    filesbatch = imagefiles.ToList();
                    for (int z = 0; z < filesbatch.Count; z += nSize)
                    {
                        filelist.Clear();

                        filelist.Add(filesbatch.GetRange(z, Math.Min(nSize, filesbatch.Count - z)));// collect files by batches


                        var distinctfiles = filelist.SelectMany(files => files).ToList();

                        foreach (var imgpath in distinctfiles)
                        {

                            pd = new PrintDocument();
                            //Disable the printing document pop-up dialog shown during printing.
                            PrintController printController = new StandardPrintController();
                            pd.PrintController = printController;


                            pd.PrinterSettings.PrinterName = cmbLabelPrinter.Text.ToString();
                            // pd.DefaultPageSettings.Landscape = false;
                            pd.PrinterSettings.Copies = Convert.ToInt16(pintprintcount);
                            pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                            pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                            pd.DefaultPageSettings.Landscape = false;
                            // pd.PrinterSettings.Copies = Convert.ToInt16(pintprintcount);

                            pd.PrintPage += (sndr, args) =>
                            {

                                System.Drawing.Image i = System.Drawing.Image.FromFile(imgpath.ToString());

                        //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                        System.Drawing.Rectangle m = args.MarginBounds;

                        //Logic below maintains Aspect Ratio.
                        if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                                {
                                    m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                                }
                                else
                                {
                                    m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                                }
                        //Calculating optimal orientation.
                        pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                                pd.DefaultPageSettings.Landscape = false;
                                args.Graphics.DrawImage(i, m);

                            };

                            pd.Print();



                        }
                        if (printdelay > 0)
                        {
                            Thread.Sleep(Convert.ToInt32(printdelay)); //2 sec
                        }
                    }
                }

            }
            catch (Exception ex)
            {

                QBHelper.WriteLog("ErrorCatch : {0}" + ex.ToString());
            }
            finally
            {
                //logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

                // QBHelper.WriteLog("ErrorFinally : {0}" + logMessage.ToString());
                if (Directory.Exists(pstrimagepath))
                {
                    var files = Directory.GetFiles(pstrimagepath, "*.tiff");
                    if (files.Length > 0)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        foreach (string file in files)
                        {
                            File.Delete(file);
                        }
                    }
                    Directory.Delete(pstrimagepath);
                }



            }
        }


        //print Invoice UDF Label
        private void PrintInvoiceUDFLabel()
        {
            int cntChk = 0;
            ArrayList arrList = null;
            bool checkAutoStatus = false;
            int sno = 0;
            string fileName = string.Empty;
            string QtyContainercheck = string.Empty;
            string qtypercontainervalue = string.Empty;
            string qtypercontianerField = string.Empty;
            string SetValuesForTransType = string.Empty;
            string SetTemplatewidth = string.Empty;
            string SetTemplateheight = string.Empty;
            string[] SerialNoParts;
            char[] invoicesnsplit = new char[] { ',' };
            int lntinvquantity = 0;
            bool blnIsIncrementcounter = false;
            List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
            clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
            List<QuickBooksField> objheaderfield = new List<QuickBooksField>();
            StringBuilder sb = new StringBuilder();
            string editDesc = string.Empty;
            try
            {
                using (new HourGlass())
                {

                    string AutoManualPath = lobjQBConfiguration.GetLabelConfigSettings("AutoManualPath");
                    lobjQBConfiguration = new QBConfiguration();
                    string checkAuto = lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck");

                    if (cmbLabelPrinter.SelectedIndex == 0) //check printer selection
                    {
                        MessageBox.Show("Select Printer", "Label Connector");
                        return;

                    }


                    if (cmbLabelName.SelectedIndex > 0 || checkAuto == "Auto")
                    {

                        if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                        {

                            if (CheckMandetory())
                            {
                                if (DataGVItems.Rows.Count > 0)
                                {


                                    for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                    {
                                        if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                        {
                                            cntChk = cntChk + 1;
                                        }
                                    }
                                    if (cntChk == DataGVItems.Rows.Count)
                                    {
                                        MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                        return;
                                    }
                                    clsInvoiceLine objclsInvoiceLine1 = new clsInvoiceLine();

                                    string snoindex = string.Empty;
                                    string strProdLblPath = string.Empty;
                                    string strProdPrinter = string.Empty;

                                    char[] snsplit = new char[] { ',' };
                                    int qtyvalue = 0;
                                    bool isNumericQuantity = false;
                                    for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                    {
                                        if (checkAuto == "Auto" && rdbInvoice.Checked == true && rdbA.Checked == true)
                                        {
                                            arrList = objclsInvoiceLine1.GetINVLine(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value), Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, InvoiceCustomerName, out lobjDataExtension, AutoManualPath, lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck"));
                                            foreach (clsInvoiceLine cl in arrList)
                                            {
                                                checkAutoStatus = cl.IsAuto;
                                                fileName = cl.InvoiceLineItemRefFullName;
                                                if (!checkAutoStatus)
                                                {
                                                    sno = sno + 1;
                                                    goto Found;
                                                }



                                            }
                                        } //end of checkauto
                                          //skip invoice qty having count zero and nonumeric qty :Date 19-Apr-2017
                                        if (rdbInvoice.Checked == true && rdbA.Checked == true)
                                        {
                                            if (string.IsNullOrWhiteSpace(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim()) || string.IsNullOrEmpty(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim()))
                                            {
                                                continue;
                                            }
                                            isNumericQuantity = int.TryParse(Convert.ToString(Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value).ToString().Trim()), out qtyvalue);
                                            if (!isNumericQuantity)
                                            {
                                                continue;
                                            }
                                            //skip items having print lbl qty is 0
                                            else if (Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value))) == 0)
                                            {
                                                continue;
                                            }

                                        }
                                        lobjDataExtension = null;

                                        if (checkAuto == "Manual" || (rdbInvoice.Checked == true || rdbA.Checked == true))
                                        {

                                            if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                            {
                                                string strLabelName = string.Empty;
                                                if (lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck") == "Auto" && (rdbInvoice.Checked == true && rdbA.Checked == true))
                                                {
                                                    strProdLblPath = AutoManualPath;
                                                    strLabelName = DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value.ToString().Trim() + ".Tiff";
                                                }
                                                else
                                                {

                                                    strLabelName = Convert.ToString(cmbLabelName.Text);

                                                }

                                                strProdPrinter = cmbLabelPrinter.Text;
                                                int intQuantity = 0;

                                                string lstrPropertyValue = string.Empty;


                                                if ((cmbLabelName.SelectedIndex != 0) || (checkAuto == "Auto"))
                                                {

                                                    intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value);

                                                    ArrayList alLineItem = null;

                                                    clsInvoiceLine objclsInvoiceLine = null;
                                                    Type objClsType;

                                                    string flipPoQtyvalue = string.Empty;

                                                    objclsInvoiceLine = new clsInvoiceLine();

                                                    //add one perametar AutoManualPath 
                                                    alLineItem = objclsInvoiceLine.GetINVLine(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value), Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, InvoiceCustomerName, out lobjDataExtension, AutoManualPath, lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck"));


                                                    objClsType = objclsInvoiceLine.GetType();


                                                    objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                                    //Get property fields list

                                                    objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());
                                                    foreach (QuickBooksField itemfield in objheaderfield)
                                                    {
                                                        if (itemfield.ItemFieldId == 1)
                                                        {
                                                            SetValuesForTransType = itemfield.ItemFieldName;
                                                        }
                                                        else if (itemfield.ItemFieldId == 2)
                                                        {
                                                            SetTemplatewidth = itemfield.ItemFieldName;
                                                        }
                                                        else if (itemfield.ItemFieldId == 3)
                                                        {
                                                            SetTemplateheight = itemfield.ItemFieldName;
                                                        }
                                                    }


                                                    intQuantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["InvoiceLineQuantityToPrint"].Value)));
                                                    lntinvquantity = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value)));
                                                    editDesc = Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineDesc"].Value.ToString());

                                                    //print here...

                                                    //create pdf and  image :Date 11-APR-2019
                                                    foreach (var varintemincr in objfieldlist)
                                                    {
                                                        if (varintemincr.datasourcetext != null)
                                                        {

                                                            if (!string.IsNullOrWhiteSpace(varintemincr.delimiter))
                                                            {
                                                                char charArr = varintemincr.delimiter.ToCharArray()[0];

                                                                string[] incrementfieldlist = varintemincr.datasourcetext.ToString().Split(charArr);

                                                                for (int h = 0; h < incrementfieldlist.Length; h++) //loop
                                                                {
                                                                    if (incrementfieldlist[h].ToString().ToLower().Trim() == "itemincrement")
                                                                    {
                                                                        blnIsIncrementcounter = true;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (varintemincr.datasourcetext.ToString().ToLower() == "itemincrement")
                                                                {
                                                                    blnIsIncrementcounter = true;
                                                                    break;
                                                                }

                                                            }
                                                        }
                                                    }
                                                    if (blnIsIncrementcounter == true)
                                                    {
                                                        
                                                        var selectedInvoiceItem = alLineItem.Cast<clsInvoiceLine>().Select(item => item.InvoiceItemName).FirstOrDefault();
                                                        var serialnolist = invoiceserialnumberlist.Where(p => p.Key.ToString().ToLower().Trim() == Convert.ToString(selectedInvoiceItem).ToLower().Trim()).FirstOrDefault().Value;
                                                        if (serialnolist != null)
                                                        {
                                                            SerialNoParts = Convert.ToString(serialnolist).Split(invoicesnsplit, StringSplitOptions.RemoveEmptyEntries);
                                                             lobjTemplatexml.PrintTemplateForInvoiceWithSerialNumbers(strLabelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntinvquantity, objfieldlist, alLineItem, SerialNoParts, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());

                                                        }
                                                        else
                                                        {
                                                             lobjTemplatexml.PrintTemplateForInvoiceIncrementCounter(strLabelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntinvquantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                        }
                                                       
                                                            //print multiple images:10-APR-2019
                                                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");
                                                            PrintMultipleImages(filePath);
                                                       
                                                    }
                                                    else
                                                    {

                                                        var selectedInvoiceItem = alLineItem.Cast<clsInvoiceLine>().Select(item => item.InvoiceItemName).FirstOrDefault();
                                                        var serialnolist = invoiceserialnumberlist.Where(p => p.Key.ToString().ToLower().Trim() == Convert.ToString(selectedInvoiceItem).ToLower().Trim()).FirstOrDefault().Value;
                                                        if (serialnolist != null)
                                                        {
                                                            SerialNoParts = Convert.ToString(serialnolist).Split(invoicesnsplit, StringSplitOptions.RemoveEmptyEntries);

                                                            lobjTemplatexml.PrintTemplateForInvoiceWithSerialNumbers(strLabelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, lntinvquantity, objfieldlist, alLineItem, SerialNoParts, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                            
                                                                //print multiple images:10-APR-2019
                                                                filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");
                                                                PrintMultipleImages(filePath);
                                                           
                                                        }
                                                        else
                                                        {
                                                            //print  lable witout serial number
                                                             lobjTemplatexml.PrintTemplateForInvoiceMultiple(strLabelName, SetTemplatewidth, SetTemplateheight, SetValuesForTransType, intQuantity, objfieldlist, alLineItem, lobjDataExtension, editDesc, cmbLabelPrinter.Text.ToString());
                                                           
                                                                filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Tiff");
                                                                Print(filePath, intQuantity);
                                                           
                                                        }
                                                    }

                                                }//end Auto
                                            }//end checkbox true
                                        }//end Manual



                                    Found:
                                        if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True" && (rdbInvoice.Checked == true && rdbA.Checked == true) && (!checkAutoStatus)) sb.Append(sno + ". " + fileName + "\n");



                                    } //end for j

                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "invprinter");

                                    lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicelabelSingleMultiple");


                                }//end DataGVItemRowscount
                            }//end CheckMandetory


                        }//end of rdbAchecked
                        else // Date Range Invoice print
                        {
                            int intQuantity = 0;
                            int itemrowcnt = 0;
                            double dbldelay = 0;
                            string strsettingcustomitem = string.Empty;
                            string strinvoiceprintdelaytime = string.Empty;
                            int intinvoiceprintbatchcount = 0;
                            clsInvoiceLine objclsInvoiceLine = null;
                            ArrayList arrmatchitemlist = null;
                            ArrayList arrinvoicelist = null;
                            ArrayList NewInvoiceData = new ArrayList();
                            ArrayList arrlineitems = new ArrayList();
                            ArrayList arrcustitems = new ArrayList();
                            ArrayList arritemlistfinal = new ArrayList();
                            ArrayList arrcustfilter = new ArrayList();
                            ArrayList arrprintinvoicemultilist = new ArrayList();
                            List<clsInvoiceLine> lstlineitemllist = null;
                            List<clsInvoice> newfiltercustitemlist = new List<clsInvoice>();
                            arrprintinvoicemultilist.Clear();
                            strsettingcustomitem = !string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("ItemCustomFieldText")) ? Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("ItemCustomFieldText")).Replace(" ", string.Empty).ToUpper() : string.Empty;
                            strinvoiceprintdelaytime = !string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invoiceprintdelay")) ? Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("invoiceprintdelay")).Replace(" ", string.Empty).ToUpper() : string.Empty;
                            intinvoiceprintbatchcount = !string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invoiceprintbatch")) ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("invoiceprintbatch")) : 0;

                            //if (string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                            if (!string.IsNullOrWhiteSpace(txtrouteno.Text.ToString()))
                            {
                                if (string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                                {
                                    string Invsearchno = string.Empty;

                                    List<clsInvoiceLine> clsfilterinv = new List<clsInvoiceLine>();

                                    if (CheckMandetory())
                                    {

                                        if (dataGVSelectedorderheader.Rows.Count > 0)
                                        {
                                            for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                                            {
                                                if (dataGVSelectedorderheader.Rows[i].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "False")
                                                {
                                                    cntChk = cntChk + 1;
                                                }
                                            }
                                            if (cntChk == dataGVSelectedorderheader.Rows.Count)
                                            {
                                                MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                                return;
                                            }


                                            if (alInvoiceData.Count == 0)
                                            {
                                                MessageBox.Show("Items does not exist for invoice.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }
                                            if (intinvoiceprintbatchcount == 0)
                                            {
                                                MessageBox.Show("Set the value for print job count from  invoice setting.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                                return;
                                            }
                                            objclsInvoiceLine = new clsInvoiceLine();
                                            arrmatchitemlist = new ArrayList();
                                            arrinvoicelist = new ArrayList();
                                            lobjcustDataExtPrint = new List<QBLC.clsInvoiceLine.Itemcustomfields>();
                                            lobjQBConfiguration = new QBConfiguration();
                                            NewInvoiceData.Clear();
                                            lobjinvoicecustomfields.Clear();
                                            for (int j = 0; j < dataGVSelectedorderheader.Rows.Count; j++)
                                            {

                                                if (dataGVSelectedorderheader.Rows[j].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "True")
                                                {

                                                    Invsearchno = Convert.ToString(dataGVSelectedorderheader.Rows[j].Cells[2].Value);
                                                    arrinvoicelist.Add(Invsearchno);
                                                }

                                            }
                                            //remove items for invoice not selected
                                            foreach (clsInvoice QBitem in alInvoiceData)
                                            {
                                                if (arrinvoicelist.Contains(QBitem.RefNumber))
                                                {
                                                    NewInvoiceData.Add(QBitem);
                                                }
                                            }
                                            //grouping of items according to packer no
                                            foreach (clsInvoice QBitemfilter in NewInvoiceData)
                                            {

                                                foreach (clsInvoiceLine lineitem in QBitemfilter.LineItemList) //Line Items
                                                {
                                                    arrlineitems.Add(lineitem);
                                                }
                                                foreach (clsInvoice custfielditem in QBitemfilter.LineCustomFieldList) //customfield list
                                                {
                                                    arrcustitems.Add(custfielditem);
                                                }

                                            }

                                            var queryNestedGroups =
                                                                   from student in arrcustitems.Cast<clsInvoice>()
                                                                   group student by student.CustItemkeyvalue into newGroup1
                                                                   orderby newGroup1.Key ascending
                                                                   select newGroup1;

                                            foreach (var nameGroup in queryNestedGroups)
                                            {

                                                foreach (var custitemfieldname in nameGroup)
                                                {

                                                    arrcustfilter.Add(custitemfieldname);

                                                }
                                            }

                                            newfiltercustitemlist = arrcustfilter.Cast<clsInvoice>().Where(p => p.CustItemkey == strsettingcustomitem).ToList();

                                            //final filter invoice by group items

                                            foreach (var item in newfiltercustitemlist)
                                            {
                                                lstlineitemllist = new List<clsInvoiceLine>();
                                                lstlineitemllist = arrlineitems.Cast<clsInvoiceLine>().Where(p => p.InvoiceItemName == item.CustItemRefFullName && p.InvoiceLineDesc == item.Itemdesc && p.RefNumber == item.CustItemRefNumber).ToList();
                                                foreach (var subitem in lstlineitemllist)
                                                {
                                                    arritemlistfinal.Add(subitem);
                                                }
                                            }



                                            objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                            //Get property fields list

                                            objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());

                                            foreach (QuickBooksField itemfield in objheaderfield)
                                            {
                                                if (itemfield.ItemFieldId == 1)
                                                {
                                                    SetValuesForTransType = itemfield.ItemFieldName;
                                                }
                                                else if (itemfield.ItemFieldId == 2)
                                                {
                                                    SetTemplatewidth = itemfield.ItemFieldName;
                                                }
                                                else if (itemfield.ItemFieldId == 3)
                                                {
                                                    SetTemplateheight = itemfield.ItemFieldName;
                                                }
                                            }


                                            foreach (clsInvoice item in NewInvoiceData)
                                            {
                                                foreach (clsInvoice custfield in item.LineCustomFieldList)
                                                {
                                                    lobjinvoicecustomfields.Add(custfield);
                                                }

                                            }


                                            //create pdf and  image
                                            lobjTemplatexml.GetInvUDFFilterOrders(Invsearchno, arrinvoicelist, arrmatchitemlist, Convert.ToString(cmbLabelName.Text), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, objfieldlist, NewInvoiceData, Convert.ToString(cmbLabelPrinter.Text), Convert.ToString(lblrouteno.Text), Convert.ToString(txtrouteno.Text), arritemlistfinal, lobjinvoicecustomfields, cmbLabelPrinter.Text.ToString());
                                            //}

                                            
                                                //print image
                                                filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\");

                                                foreach (QBLC.clsInvoiceLine itemprint in arritemlistfinal) //copyitemarray
                                                {
                                                    arrprintinvoicemultilist.Add(itemprint);
                                                }

                                                if (!string.IsNullOrWhiteSpace(strinvoiceprintdelaytime) && !string.IsNullOrWhiteSpace(strinvoiceprintdelaytime.Trim('0')))
                                                {

                                                    dbldelay = TimeSpan.FromSeconds(Convert.ToDouble(strinvoiceprintdelaytime)).TotalMilliseconds;
                                                }
                                                if ((lobjQBConfiguration.GetLabelConfigSettings("MultiInvoiceMode").ToString() == "M"))
                                                {

                                                    PrintMultipleInvoicesInBatches(filePath, 1, arrprintinvoicemultilist, dbldelay, intinvoiceprintbatchcount);
                                                }
                                                else
                                                {


                                                    PrintMultipleInvoicesSingleInBatches(filePath, 1, dbldelay, intinvoiceprintbatchcount);
                                                }

                                            

                                            lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "invprinter");

                                            lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicelabelSingleMultiple");

                                        }//end of if
                                    }

                                }

                            } //end  if txtordno empty
                            else
                            {
                                //print default date range funcationality


                                string Invsearchno = string.Empty;

                                List<clsInvoiceLine> clsfilterinv = new List<clsInvoiceLine>();

                                if (CheckMandetory())
                                {

                                    if (dataGVSelectedorderheader.Rows.Count > 0)
                                    {
                                        for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                                        {
                                            if (dataGVSelectedorderheader.Rows[i].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "False")
                                            {
                                                cntChk = cntChk + 1;
                                            }
                                        }
                                        if (cntChk == dataGVSelectedorderheader.Rows.Count)
                                        {
                                            MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                            return;
                                        }
                                        objclsInvoiceLine = new clsInvoiceLine();
                                        arrmatchitemlist = new ArrayList();
                                        arrinvoicelist = new ArrayList();

                                        for (int j = 0; j < dataGVSelectedorderheader.Rows.Count; j++)
                                        {

                                            if (dataGVSelectedorderheader.Rows[j].Cells["CheckBoxDatefilter"].Value.ToString().Trim() == "True")
                                            {

                                                Invsearchno = Convert.ToString(dataGVSelectedorderheader.Rows[j].Cells[2].Value);
                                                arrinvoicelist.Add(Invsearchno);
                                            }
                                        }



                                        objfieldlist = lobjTemplatexml.GetFieldPropertiesList(cmbLabelName.Text.ToString(), string.Empty);
                                        //Get property fields list

                                        objheaderfield = lobjTemplatexml.GetTemplateHeaderInfo(cmbLabelName.Text.ToString());

                                        foreach (QuickBooksField itemfield in objheaderfield)
                                        {
                                            if (itemfield.ItemFieldId == 1)
                                            {
                                                SetValuesForTransType = itemfield.ItemFieldName;
                                            }
                                            else if (itemfield.ItemFieldId == 2)
                                            {
                                                SetTemplatewidth = itemfield.ItemFieldName;
                                            }
                                            else if (itemfield.ItemFieldId == 3)
                                            {
                                                SetTemplateheight = itemfield.ItemFieldName;
                                            }
                                        }

                                        //create pdf and  image
                                        lobjTemplatexml.GetInvUDFFilterOrdersDefault(Invsearchno, arrinvoicelist, arrmatchitemlist, Convert.ToString(cmbLabelName.Text), SetTemplatewidth, SetTemplateheight, SetValuesForTransType, objfieldlist, alInvoiceData, Convert.ToString(cmbLabelPrinter.Text), lobjDataExtension1, cmbLabelPrinter.Text.ToString());

                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "invprinter");

                                        lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicelabelSingleMultiple");

                                    }//end of if
                                }



                            }

                        } //else end date range


                    }//end of checkauto

                }// end hourglass

            }//end try block
            catch (Exception ex)
            {


            }


        }
        private void PrintPackperUnitInvItems()
        {

            int packperunitsitemcount = 0;
            int PackperUnitTotal = 0;
            int boxTotalcount = 0;
            bool blnpackunitforInvItem = false;
            bool blnpackunitforGroupItem = false;

            lobjQBConfiguration = new QBConfiguration();

            int cntChk = 0;

            try
            {
                if (txtQtyToPrint.Visible == true && Convert.ToInt32(txtQtyToPrint.Text) <= 0)
                {
                    MessageBox.Show("Quantity to print should be greater than zero.", "Label Connector");
                    txtQtyToPrint.Focus();
                    return;
                }

                if (cmbLabelName.SelectedIndex > 0)
                {
                    btnPrint.Enabled = false;

                    //start here
                    if (rdbA.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
                    {
                        if (CheckMandetory())
                        {
                            if (DataGVItems.Rows.Count > 0)
                            {
                                for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                {
                                    if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "False")
                                    {
                                        cntChk = cntChk + 1;
                                    }

                                    if (DataGVItems.Rows[i].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    {
                                        clsInvoiceLine objclsInvoiceLine = null;
                                        objclsInvoiceLine = new clsInvoiceLine();

                                        //check QB packperunits field name matched with config file  field
                                        blnpackunitforInvItem = objclsInvoiceLine.IspackperUnitsNameExist(Convert.ToString(DataGVItems.Rows[i].Cells["InvoiceItemName"].Value), lobjQBConfiguration.GetLabelConfigSettings("PackUnitsCustomField").ToString());

                                        if (blnpackunitforInvItem == false)
                                        {
                                            blnpackunitforGroupItem = objclsInvoiceLine.IsPackperUnitsGroupItemExist(Convert.ToString(DataGVItems.Rows[i].Cells["InvoiceLineItemRefFullName"].Value), lobjQBConfiguration.GetLabelConfigSettings("PackUnitsCustomField").ToString());
                                        }


                                        //print packperUnits divisible invoice quantities :date 15-Feb-2017
                                        if (Convert.ToInt32(DataGVItems.Rows[i].Cells["PackPerUnits"].Value) > 0 && (blnpackunitforInvItem == true || blnpackunitforGroupItem == true))
                                        {

                                            boxTotalcount += Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[i].Cells["InvoiceLineQuantity"].Value) / Convert.ToDouble(DataGVItems.Rows[i].Cells["PackPerUnits"].Value)));

                                        }
                                        else
                                        {

                                            boxTotalcount += Convert.ToInt32(DataGVItems.Rows[i].Cells["InvoiceLineQuantity"].Value);

                                        }


                                    }

                                }
                                if (cntChk == DataGVItems.Rows.Count)
                                {
                                    MessageBox.Show("Please Check At Least One Record To Print", "Label Connector");
                                    return;
                                }

                                for (int j = 0; j < DataGVItems.Rows.Count; j++)
                                {

                                    lobjDataExtension = null;

                                    if (DataGVItems.Rows[j].Cells["CheckBox"].Value.ToString().Trim() == "True")
                                    {
                                        PackperUnitTotal = 0;
                                        foreach (Process clsProcess in Process.GetProcesses())
                                        {
                                            if (clsProcess.ProcessName.StartsWith("bartend"))
                                            {
                                                clsProcess.Kill();
                                                clsProcess.WaitForExit();
                                            }
                                        }
                                        BarTender.Application BtApp = default(BarTender.Application);
                                        BarTender.Format BtFormat = default(BarTender.Format);
                                        BarTender.SubString BtSubString = default(BarTender.SubString);

                                        OdbcConnection Cn = new OdbcConnection(ConfigurationManager.AppSettings["quickbookDSN"]);

                                        string btNamedSubString = string.Empty;
                                        string strProdLblPath = "";

                                        string strProdPrinter = "";
                                        XmlDocument xmlDoc = new XmlDocument();
                                        // Uses reflection to find the location of the config file.
                                        System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                                        System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                                        if (!FileInfo.Exists)
                                        {
                                            throw new Exception("Missing config file");
                                        }
                                        xmlDoc.Load(FileInfo.FullName);
                                        // Finds the right node and change it to the new value.
                                        System.Xml.XmlNode Node = null;
                                        XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");
                                        foreach (XmlNode Node_loopVariable in appsettingNodes)
                                        {
                                            Node = Node_loopVariable;
                                            if (Node.Name == "add")
                                            {
                                                if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                                                {
                                                    strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                                                }

                                            }
                                        }
                                        string strLabelName = string.Empty;
                                        string packperunitvalue = string.Empty;

                                        strLabelName = cmbLabelName.Text;

                                        strProdPrinter = cmbLabelPrinter.Text;
                                        int intQuantity = 0;

                                        string lstrPropertyValue = string.Empty;
                                        BtApp = new BarTender.ApplicationClass();
                                        BtFormat = new BarTender.Format();

                                        if ((cmbLabelName.SelectedIndex != 0))
                                        {
                                            try
                                            {

                                                this.Cursor = Cursors.WaitCursor;

                                                intQuantity = Convert.ToInt32(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value.ToString().Trim());

                                                BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                                                int i = 1;
                                                int boxqtynumerator = 1;

                                                ArrayList alLineItem = null;

                                                clsInvoiceLine objclsInvoiceLine = null;
                                                Type objClsType;
                                                object strPropertyValue = null;

                                                objclsInvoiceLine = new clsInvoiceLine();
                                                if (lstrQBFileMode == "Close")
                                                {
                                                    alLineItem = objclsInvoiceLine.GetINVLine(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineQuantityOnLabel"].Value), Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                                                }
                                                else
                                                {
                                                    objtempdictionary.Clear();
                                                    //Get packperunits invoice data
                                                    alLineItem = objclsInvoiceLine.GetPackperUnitINVLine(alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);

                                                    objtempdictionary = lobjDataExtension;

                                                    objclsInvoiceLine.InvoiceGroupItemHeaderCustomField(Convert.ToString(DataGVItems.Rows[j].Cells["InvoiceLineItemRefFullName"].Value), objtempdictionary, out lobjDataExtension);

                                                }
                                                objClsType = objclsInvoiceLine.GetType();


                                                //print packperUnits divisible invoice quantities :date 15-Feb-2017
                                                if (Convert.ToInt32(DataGVItems.Rows[j].Cells["PackPerUnits"].Value) > 0 && lobjDataExtension.ContainsKey(lobjQBConfiguration.GetLabelConfigSettings("PackUnitsCustomField").Trim().ToUpper()))
                                                {
                                                    PackperUnitTotal = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value) / Convert.ToDouble(DataGVItems.Rows[j].Cells["PackPerUnits"].Value)));

                                                }
                                                else
                                                {
                                                    PackperUnitTotal = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[j].Cells["InvoiceLineQuantity"].Value) / Convert.ToDouble(1)));
                                                }


                                                //if (PackperUnitTotal == 0)
                                                //{
                                                //    continue;
                                                //}

                                                boxqtynumerator = 0;
                                                while (boxqtynumerator < PackperUnitTotal) //iterate through quantity cont
                                                {
                                                    btNamedSubString = "";
                                                    i = 1;

                                                    while (i <= BtFormat.NamedSubStrings.Count)
                                                    {

                                                        BtSubString = BtFormat.NamedSubStrings.GetSubString(i);
                                                        int y = 0;
                                                        while (y <= alLineItem.Count - 1)
                                                        {
                                                            try
                                                            {
                                                                // PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name);
                                                                //PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.Trim());//Commented by Srinivas on 11-Aug-2017
                                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.ToString().Replace(System.Environment.NewLine, string.Empty).Trim()); //Added by Srinivas on 11-Aug-2017

                                                                if (BtSubString.Name.ToLower().Trim() == "boxno")
                                                                {
                                                                    packperunitsitemcount++;

                                                                    // strPropertyValue = Convert.ToString(packperunitsitemcount) + "/" + Convert.ToString(pintpackperunittotal);

                                                                    strPropertyValue = Convert.ToString(packperunitsitemcount);
                                                                }
                                                                else if (BtSubString.Name.ToLower().Trim() == "boxtotal")
                                                                {
                                                                    strPropertyValue = Convert.ToString(boxTotalcount);

                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = objPropertyInfo.GetValue((clsInvoiceLine)alLineItem[y], null);
                                                                }

                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                try
                                                                {
                                                                    string lstrPropertyValExt = string.Empty;
                                                                    if (lobjDataExtension.ContainsKey(BtSubString.Name.ToString().Trim().ToUpper()))
                                                                    {
                                                                        lobjDataExtension.TryGetValue(BtSubString.Name.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                                        strPropertyValue = lstrPropertyValExt;
                                                                    }
                                                                    else
                                                                    {
                                                                        strPropertyValue = string.Empty;
                                                                    }
                                                                }
                                                                catch (Exception exExt)
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }
                                                                finally
                                                                {
                                                                    QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strPropertyValue);
                                                                }
                                                            }
                                                            lstrPropertyValue = Convert.ToString(strPropertyValue);

                                                            btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                                                            y += 1;
                                                        }
                                                        i += 1;

                                                    } //end of while

                                                    string strDelimiter = string.Concat('\r', '\n');

                                                    BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);


                                                    BtFormat.IdenticalCopiesOfLabel = 1;

                                                    BtFormat.PrintOut(false, false);
                                                    boxqtynumerator += 1;
                                                } //end of first while

                                            }
                                            catch (System.Exception ex)
                                            {
                                                MessageBox.Show(ex.Message, "Label Connector");
                                                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Label Printing is having some problem.:-" + ex.Message + ":" + ex.StackTrace);
                                            }
                                            finally
                                            {
                                                BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                                                BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                                                BtSubString = null;
                                                BtFormat = null;
                                                BtApp = null;
                                                foreach (Process clsProcess in Process.GetProcesses())
                                                {
                                                    if (clsProcess.ProcessName.StartsWith("bartend"))
                                                    {
                                                        clsProcess.Kill();
                                                        clsProcess.WaitForExit();
                                                    }
                                                }

                                                if (Cn.State == ConnectionState.Open)
                                                {
                                                    Cn.Close();
                                                    Cn.Dispose();
                                                }
                                                System.Threading.Thread.Sleep(1000);
                                                this.Cursor = Cursors.Default;
                                                btnPrint.Enabled = true;
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Printing Error: " + "Please Select Label");
                                        }
                                    }


                                }
                                //save selected label :Date 23-Feb-2017
                                lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelName.Text.ToString(), "saveinvoicelabel");

                                //save printer name :Date 11-Feb-2017
                                lobjQBConfiguration.SaveLabelFilePathSettings(cmbLabelPrinter.Text.ToString(), "invpackprinter");


                            }
                        }
                    }

                }
                else
                {
                    MessageBox.Show("Select Label", "Label Connector");
                }
                btnClear.Enabled = true;
                btnPrint.Enabled = true;
            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
                System.Threading.Thread.Sleep(500);
                btnPrint.Enabled = false;
                btnClear.Enabled = true;
            }
        }

        public class HourGlass : IDisposable
        {
            public HourGlass()
            {
                Enabled = true;
            }
            public void Dispose()
            {
                Enabled = false;
            }
            public static bool Enabled
            {
                get { return System.Windows.Forms.Application.UseWaitCursor; }
                set
                {
                    if (value == System.Windows.Forms.Application.UseWaitCursor) return;
                    System.Windows.Forms.Application.UseWaitCursor = value;
                    Form f = Form.ActiveForm;
                    if (f != null && f.Handle != IntPtr.Zero)   // Send WM_SETCURSOR
                        SendMessage(f.Handle, 0x20, f.Handle, (IntPtr)1);
                }
            }
            [System.Runtime.InteropServices.DllImport("user32.dll")]
            private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wp, IntPtr lp);
        }
        //The Print Event handeler
        private void PrintPage(object o, PrintPageEventArgs e)
        {
            // filePath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + cmbLabelName.Text.ToString() + "\\" + cmbLabelName.Text.ToString() + ".Jpeg";

            try
            {
                if (File.Exists(lstrimgfile))
                {
                    //foreach (string strfile in filePaths)
                    //{
                    //Load the image from the file
                    System.Drawing.Image img = System.Drawing.Image.FromFile(lstrimgfile);

                    //Adjust the size of the image to the page to print the full image without loosing any part of it
                    Rectangle m = e.MarginBounds;

                    if ((double)img.Width / (double)img.Height > (double)m.Width / (double)m.Height) // image is wider
                    {
                        m.Height = (int)((double)img.Height / (double)img.Width * (double)m.Width);
                    }
                    else
                    {
                        m.Width = (int)((double)img.Width / (double)img.Height * (double)m.Height);
                    }
                    e.Graphics.DrawImage(img, m);
                }
                //}
            }
            catch (Exception)
            {

            }
        }

        //Get selected Invoice Items to print
        private DataTable GetSelectedInvoiceItemsToPrint(string invNumber, List<QBLC.clsInvoiceLine.Itemcustomfields> lobjcustfields)
        {

            DataTable dtInvPackaging = new DataTable("InvPackaging");

            //Adding columns to table Emp
            DataColumn colInvRefNumber = new DataColumn("InvRefNumber", typeof(System.String));
            DataColumn colInvQty = new DataColumn("Inv Qty", typeof(System.String));
            DataColumn colInvUom = new DataColumn("Inv Uom", typeof(System.String));
            DataColumn colInvItem = new DataColumn("Inv Item", typeof(System.String));
            DataColumn colInvItemdesc = new DataColumn("Inv Item desc", typeof(System.String));
            DataColumn colInvPrice = new DataColumn("Inv Price", typeof(System.String));
            DataColumn colInvAmount = new DataColumn("Inv Amount", typeof(System.String));
            DataColumn colInvother1 = new DataColumn("other1", typeof(System.String));



            //Adding columns to datatable
            dtInvPackaging.Columns.AddRange(new DataColumn[] { colInvRefNumber, colInvQty, colInvUom, colInvItem, colInvItemdesc, colInvPrice, colInvAmount, colInvother1 });

            try
            {

                foreach (clsInvoiceLine invitem in alInvoiceData) //get invoice packaging data for to compare with invoice number
                {
                    if (invitem.RefNumber == invNumber)
                    {
                        //If invoice number is found then add record to datatable
                        dtInvPackaging.Rows.Add(invitem.RefNumber, invitem.InvoiceLineQuantity, invitem.InvoiceLineUnitOfMeasure, invitem.InvoiceLineItemRefFullName, invitem.InvoiceLineDesc, invitem.InvoiceLineRate, invitem.InvoiceLineAmount, invitem.Other1);


                    }

                }

            }
            catch (Exception ex)
            {


            }

            //add custom column to the datagirdview

            foreach (DataRow row in dtInvPackaging.Rows)
            {

                foreach (QBLC.clsInvoiceLine.Itemcustomfields colname in lobjcustfields)
                {

                    if (!dtInvPackaging.Columns.Contains(colname.CustItemkey.ToString()))
                    {
                        Add_Extra_Column_To_DataTable(ref dtInvPackaging, typeof(System.String), colname.CustItemkey.ToString());
                    }

                }
            }



            string itemname = string.Empty;
            string lstrPropertyValExt = string.Empty;
            string checkcolname = string.Empty;
            Dictionary<string, string> lobjdict = new Dictionary<string, string>();

            foreach (DataRow row in dtInvPackaging.Rows)
            {
                itemname = row[3].ToString();
                lobjdict.Clear();
                foreach (QBLC.clsInvoiceLine.Itemcustomfields colname in lobjcustfields)
                {
                    if (colname.CustItemRefNumber == invNumber && colname.CustItemRefFullName == itemname)
                    {
                        lobjdict.Add(colname.CustItemkey, colname.CustItemkeyvalue);


                    }
                }


                for (int i = 8; i < dtInvPackaging.Columns.Count; i++)
                {

                    checkcolname = dtInvPackaging.Columns[i].ColumnName.ToString();

                    if (lobjdict.ContainsKey(checkcolname))
                    {
                        lobjdict.TryGetValue(checkcolname, out lstrPropertyValExt);
                        row[i] = lstrPropertyValExt;
                    }



                }
                row.AcceptChanges();

            }


            return dtInvPackaging;



        }

        public void Add_Extra_Column_To_DataTable(ref DataTable datatable, Type type, string ColumnName)
        {
            datatable.Columns.Add(ColumnName, type);

            //foreach (DataRow dr in datatable.Rows)
            //    dr[ColumnName] = ColumnValue;
        }



        private string GetPropertyValueForInvMultiple(int pintItemIndex, int cellIndx)
        {
            string strPropertyValue = null;
            try
            {

                strPropertyValue = Convert.ToString(dtPrintInvoicedata.Rows[pintItemIndex][cellIndx]);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return strPropertyValue;
        }



        private ArrayList GetPOItemReceiptPrintDetails()
        {
            ArrayList alPoItems = new ArrayList();
            string binlocation = string.Empty;
            char[] delimiters = new char[] { '/' };
            string[] parts;
            // DateTime expirtydate = new DateTime();
            for (int k = 0; k < DataGVItems.Rows.Count; k++)
            {

                DataGridViewRow row = DataGVItems.Rows[k];
                //if (row.Cells["CheckBox"].Value==true)
                if ((Boolean)((DataGridViewCheckBoxCell)row.Cells["CheckBox"]).FormattedValue)
                {

                    clsPurchaseOrderLine objPOLine = new clsPurchaseOrderLine();
                    objPOLine.PurchaseOrderLineItemRefFullName = Convert.ToString(row.Cells["PurchaseOrderLineItemRefFullName"].Value);
                    objPOLine.PurchaseOrderLineDesc = Convert.ToString(row.Cells["PurchaseOrderLineDesc"].Value);
                    objPOLine.RecQty = Convert.ToDouble(row.Cells["PurchaseOrderLineQuantity"].Value);
                    objPOLine.PurchaseOrderLineQtytoPrint = Convert.ToDouble(row.Cells["PurchaseOrderLineQuantityToPrint"].Value);
                    objPOLine.Entry2 = Convert.ToString(row.Cells["PurchaseOrderLineSN"].Value);
                    //expirtydate = Convert.ToDateTime(row.Cells["PurchaseOrderLineExpDate"].Value);
                    // expirtydate.ToString("MM-dd-yyyy");
                    // objPOLine.Entry1 = expirtydate.ToString("MM-dd-yyyy");
                    objPOLine.Entry1 = Convert.ToString(row.Cells["PurchaseOrderLineExpDate"].Value);

                    parts = Convert.ToString(row.Cells["PurchaseOrderLineBin"].Value).Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length > 1)
                    {
                        objPOLine.Bin = parts[0] != null ? parts[0].ToString() : null;
                        objPOLine.Site = parts[1] != null ? parts[1].ToString() : null;
                    }
                    else if (parts.Length == 1)
                    {
                        objPOLine.Bin = parts[0] != null ? parts[0].ToString() : null;
                    }


                    objPOLine.BarCodeValue = Convert.ToString(row.Cells["PurchaseOrderLineBarCode"].Value);
                    objPOLine.RefNumber = Convert.ToString(row.Cells["PurchaseOrderLinePONumber"].Value);
                    alPoItems.Add(objPOLine);



                }
            }
            return alPoItems;
        }

        private void GetSoFilterOrders(string Sosearchno)
        {
            List<clsSalesOrderLine> filterso = null;
            this.Cursor = Cursors.WaitCursor;

            lobjsodaterangeitemcustfields.Clear();
            //Get item custom fields for sales order date range
            var alSOLineItems = objSalesOrderLine.GetSODateRangeCustomFields(Sosearchno, out lobjsodaterangeitemcustfields);

            foreach (clsSalesOrderLine soitem in alInvoiceData)
            {

                filterso = new List<clsSalesOrderLine>();

                if (soitem.RefNumber.Trim() == Sosearchno.Trim())
                {
                    //Instantiate bar tender object & set label file path
                    BarTender.Application BtApp = default(BarTender.Application);
                    BarTender.Format BtFormat = default(BarTender.Format);
                    BarTender.SubString BtSubString = default(BarTender.SubString);

                    Process[] _proceses = null;
                    _proceses = Process.GetProcessesByName("bartend");
                    foreach (Process proces in _proceses)
                    {
                        proces.Kill();
                        proces.WaitForExit();
                    }

                    //kill older bartend services
                    //foreach (Process clsProcess in Process.GetProcesses())
                    //{
                    //    if (clsProcess.ProcessName.StartsWith("bartend"))
                    //    {
                    //        clsProcess.Kill();
                    //        clsProcess.WaitForExit();
                    //    }
                    //}


                    string btNamedSubString = "";
                    string strProdLblPath = "";
                    string strProdPrinter = "";
                    XmlDocument xmlDoc = new XmlDocument();
                    // Uses reflection to find the location of the config file.
                    System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                    System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                    if (!FileInfo.Exists)
                    {
                        throw new Exception("Missing config file");
                    }
                    xmlDoc.Load(FileInfo.FullName);
                    // Finds the right node and change it to the new value.
                    System.Xml.XmlNode Node = null;
                    XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");
                    foreach (XmlNode Node_loopVariable in appsettingNodes)
                    {
                        Node = Node_loopVariable;
                        if (Node.Name == "add")
                        {
                            if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                            {
                                strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                            }

                        }
                    }
                    string strLabelName = string.Empty;

                    strLabelName = cmbLabelName.Text;

                    strProdPrinter = cmbLabelPrinter.Text;

                    int intQuantityToPrintOnLabel = 0;
                    string lstrPropertyValue = string.Empty;
                    BtApp = new BarTender.ApplicationClass();
                    BtFormat = new BarTender.Format();

                    BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                    int i = 1;

                    clsSalesOrderLine objclsSalesOrderLine = null;

                    object strPropertyValue = null;
                    Type objClsType;

                    try
                    {

                        filterso.Add(soitem);

                        //printing logic start

                        objclsSalesOrderLine = new clsSalesOrderLine();

                        objClsType = objclsSalesOrderLine.GetType();
                        i = 1;

                        while (i <= BtFormat.NamedSubStrings.Count)
                        {

                            BtSubString = BtFormat.NamedSubStrings.GetSubString(i);
                            int y = 0;

                            while (y <= filterso.Count - 1)
                            {
                                try
                                {
                                    //PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name);//Commented by Srinivas on 11-Aug-2017
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.ToString().Replace(System.Environment.NewLine, string.Empty).Trim()); //Added by Srinivas on 11-Aug-2017

                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesOrderLine)filterso[y], null);

                                }
                                catch (Exception ex)
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;
                                        //if (lobjDataExtension.ContainsKey(BtSubString.Name.ToString().Trim().ToUpper()))
                                        //{
                                        //    lobjDataExtension.TryGetValue(BtSubString.Name.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                        //    strPropertyValue = lstrPropertyValExt;
                                        //}
                                        //else
                                        //{
                                        //    strPropertyValue = string.Empty;
                                        //}
                                        foreach (QBLC.clsSalesOrderLine.Itemcustomfields item in lobjsodaterangeitemcustfields)
                                        {
                                            if (item.CustItemRefFullName.ToUpper() == Convert.ToString(soitem.SalesOrderLineItemRefFullName).ToUpper())
                                            {
                                                if (BtSubString.Name.ToString().Trim().ToUpper().Equals(item.CustItemkey.ToString().Trim().ToUpper()))
                                                {
                                                    strPropertyValue = item.CustItemkeyvalue;

                                                    break;

                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }

                                        }


                                    }
                                    catch (Exception ext)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    finally
                                    {
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strPropertyValue);
                                    }
                                }
                                lstrPropertyValue = Convert.ToString(strPropertyValue);

                                if (BtSubString.Name == "SalesOrderLineQuantity")
                                {

                                    intQuantityToPrintOnLabel = Convert.ToInt32(soitem.SalesOrderLineQuantity);
                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + intQuantityToPrintOnLabel.ToString() + '\r' + '\n';
                                }

                                else
                                {
                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                                }
                                y += 1;
                            }
                            i += 1;


                        } //end of while
                        string strDelimiter = string.Concat('\r', '\n');
                        BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);

                        BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(soitem.SalesOrderLineQuantity);


                        BtFormat.PrintOut(false, false);
                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show(ex.Message, "Label Connector");
                    }
                    finally
                    {

                        BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                        BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                        BtSubString = null;
                        BtFormat = null;
                        BtApp = null;
                        filterso.Clear();

                        foreach (Process clsProcess in Process.GetProcesses())
                        {
                            if (clsProcess.ProcessName.StartsWith("bartend"))
                            {
                                clsProcess.Kill();
                                clsProcess.WaitForExit();
                            }
                        }


                        System.Threading.Thread.Sleep(1000);
                        this.Cursor = Cursors.Default;
                        btnPrint.Enabled = true;

                    }

                } //end if 


            } //end of item loop foreach
              //return clsfilterso;
        }


        private void GetInvFilterOrders(string Invsearchno)
        {

            List<clsInvoiceLine> filterinv = null;
            this.Cursor = Cursors.WaitCursor;
            foreach (clsInvoiceLine inv in alInvoiceData)
            {

                filterinv = new List<clsInvoiceLine>();
                if (inv.RefNumber.Trim() == Invsearchno.Trim())
                {

                    //Instantiate bar tender object & set label file path
                    BarTender.Application BtApp = default(BarTender.Application);
                    BarTender.Format BtFormat = default(BarTender.Format);
                    BarTender.SubString BtSubString = default(BarTender.SubString);

                    //kill older bartend services

                    Process[] _proceses = null;
                    _proceses = Process.GetProcessesByName("bartend");
                    foreach (Process proces in _proceses)
                    {
                        proces.Kill();
                        proces.WaitForExit();
                    }

                    //foreach (Process clsProcess in Process.GetProcesses())
                    //{
                    //    if (clsProcess.ProcessName.StartsWith("bartend"))
                    //    {
                    //        clsProcess.Kill();
                    //        clsProcess.WaitForExit();
                    //    }
                    //}



                    string btNamedSubString = "";
                    string strProdLblPath = "";
                    string strProdPrinter = "";
                    XmlDocument xmlDoc = new XmlDocument();
                    // Uses reflection to find the location of the config file.
                    System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                    System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                    if (!FileInfo.Exists)
                    {
                        throw new Exception("Missing config file");
                    }
                    xmlDoc.Load(FileInfo.FullName);
                    // Finds the right node and change it to the new value.
                    System.Xml.XmlNode Node = null;
                    XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");
                    foreach (XmlNode Node_loopVariable in appsettingNodes)
                    {
                        Node = Node_loopVariable;
                        if (Node.Name == "add")
                        {
                            if (Node.Attributes.GetNamedItem("key").Value == "LabelPath")
                            {
                                strProdLblPath = Node.Attributes.GetNamedItem("value").Value;
                            }

                        }
                    }
                    string strLabelName = string.Empty;

                    strLabelName = cmbLabelName.Text;

                    strProdPrinter = cmbLabelPrinter.Text;

                    int intQuantityToPrintOnLabel = 0;
                    string lstrPropertyValue = string.Empty;
                    BtApp = new BarTender.ApplicationClass();
                    BtFormat = new BarTender.Format();

                    BtFormat = BtApp.Formats.Open(strProdLblPath + "\\" + strLabelName, true, strProdPrinter);

                    int i = 1;

                    clsInvoiceLine objclsInvoiceLine = null;

                    object strPropertyValue = null;
                    Type objClsType;

                    try
                    {


                        filterinv.Add(inv);

                        //printing logic start

                        objclsInvoiceLine = new clsInvoiceLine();

                        objClsType = objclsInvoiceLine.GetType();
                        i = 1;

                        while (i <= BtFormat.NamedSubStrings.Count)
                        {

                            BtSubString = BtFormat.NamedSubStrings.GetSubString(i);
                            int y = 0;

                            while (y <= filterinv.Count - 1)
                            {
                                try
                                {
                                    //PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name);//Commented by Srinivas on 11-Aug-2017
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(BtSubString.Name.ToString().Replace(System.Environment.NewLine, string.Empty).Trim()); //Added by Srinivas on 11-Aug-2017

                                    strPropertyValue = objPropertyInfo.GetValue((clsInvoiceLine)filterinv[y], null);

                                }
                                catch (Exception ex)
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;
                                        if (lobjDataExtension.ContainsKey(BtSubString.Name.ToString().Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(BtSubString.Name.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception ext)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    finally
                                    {
                                        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Label:-" + BtSubString.Name + "  Value:-" + strPropertyValue);
                                    }
                                }
                                lstrPropertyValue = Convert.ToString(strPropertyValue);

                                if (BtSubString.Name == "InvoiceLineQuantityOnLabel")
                                {

                                    intQuantityToPrintOnLabel = Convert.ToInt32(inv.InvoiceLineQuantity);
                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + intQuantityToPrintOnLabel.ToString() + '\r' + '\n';
                                }

                                else
                                {
                                    btNamedSubString += BtSubString.Name + '\r' + '\n' + lstrPropertyValue + '\r' + '\n';

                                }
                                y += 1;
                            }
                            i += 1;


                        } //end of while
                        string strDelimiter = string.Concat('\r', '\n');
                        BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);
                        if ((lobjQBConfiguration.GetLabelConfigSettings("MultiInvoiceMode").ToString() == "S"))
                        {
                            BtFormat.IdenticalCopiesOfLabel = 1;

                        }
                        else
                        {
                            BtFormat.IdenticalCopiesOfLabel = Convert.ToInt32(inv.InvoiceLineQuantity);
                        }

                        BtFormat.PrintOut(false, false);

                    }
                    catch (System.Exception ex)
                    {
                        MessageBox.Show(ex.Message, "Label Connector");
                    }
                    finally
                    {

                        BtFormat.Close(BtSaveOptions.btDoNotSaveChanges);
                        BtApp.Quit(BtSaveOptions.btDoNotSaveChanges);
                        BtSubString = null;
                        BtFormat = null;
                        BtApp = null;
                        filterinv.Clear();
                        foreach (Process clsProcess in Process.GetProcesses())
                        {
                            if (clsProcess.ProcessName.StartsWith("bartend"))
                            {
                                clsProcess.Kill();
                                clsProcess.WaitForExit();
                            }
                        }


                        System.Threading.Thread.Sleep(1000);
                        this.Cursor = Cursors.Default;
                        btnPrint.Enabled = true;


                    }

                } //end if 


            } //end of item loop foreach

        }




        private string GetPropertyValueForrdbC(int pintItemIndex, int cellIndx)
        {
            string strPropertyValue = null;
            try
            {
                strPropertyValue = Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells[cellIndx].Value);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return strPropertyValue;
        }

        private string GetCustomFieldPropertyValue(string pstrSubStringName)
        {
            string lstrPropertyValExt = string.Empty;
            string lstrCustomFieldValue = string.Empty;


            if (lobjDataExtension.ContainsKey(pstrSubStringName))
            {
                lobjDataExtension.TryGetValue(pstrSubStringName, out lstrPropertyValExt);
                lstrCustomFieldValue = lstrPropertyValExt;
            }
            else
            {
                lstrCustomFieldValue = string.Empty;
            }

            return lstrCustomFieldValue;

        }



        private string GetPropertyValue(int pintItemIndex, string pstrSubStringName)
        {
            ArrayList alLineItem = null;
            clsPurchaseOrderLine objclsPurchaseOrderLine = null;
            clsSalesOrderLine objclsSalesOrderLine = null;
            clsInvoiceLine objclsInvoiceLine = null;
            Type objClsType;
            object strPropertyValue = null;

            if (rdbPO.Checked == true)
            {
                objclsPurchaseOrderLine = new clsPurchaseOrderLine();
                if (lstrQBFileMode == "Close")
                {
                    alLineItem = objclsPurchaseOrderLine.GetPOLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, lQBSessionManager, moQuickBooksAccountConfig);
                }
                else
                {
                    //add qtyonlabel field to print Date 16-Feb-2017
                    alLineItem = objclsPurchaseOrderLine.GetPOLine(Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["PurchaseOrderLineQuantityOnLabel"].Value), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["PurchaseOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);
                }
                objClsType = objclsPurchaseOrderLine.GetType();
            }
            else if (rdbSO.Checked == true)
            {
                objclsSalesOrderLine = new clsSalesOrderLine();
                objClsType = objclsSalesOrderLine.GetType();
                //out parameter added by khushal:date:01/24/13
                if (lstrQBFileMode == "Close")
                {
                    alLineItem = objclsSalesOrderLine.GetSOLine(Convert.ToString(DataGVItems.Rows[DataGVOrders.CurrentRow.Index].Cells["SalesOrderLineQuantityonLabel"].Value), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["SalesOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                }
                else
                {
                    alLineItem = objclsSalesOrderLine.GetSOLine(Convert.ToString(DataGVItems.Rows[DataGVOrders.CurrentRow.Index].Cells["SalesOrderLineQuantityonLabel"].Value), txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["SalesOrderLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells["CompanyName"].Value, lobjQBConfiguration.GetLabelConfigSettings("QtyPerContainerField").ToString().ToUpper(), out lobjDataExtension);
                }
            }
            else
            {
                objclsInvoiceLine = new clsInvoiceLine();
                if (lstrQBFileMode == "Close")
                {
                    //alLineItem = objclsInvoiceLine.GetINVLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                    alLineItem = objclsInvoiceLine.GetINVLine(string.Empty, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension, lQBSessionManager, moQuickBooksAccountConfig);
                }
                else
                {
                    //alLineItem = objclsInvoiceLine.GetINVLine(txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, out lobjDataExtension);
                    alLineItem = objclsInvoiceLine.GetINVLine(string.Empty, Convert.ToString(DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells["InvoiceLineItemRefFullName"].Value), alData, alInvoiceLineItems, txtOrderNumber.Text, Convert.ToString(DataGVItems.Rows[pintItemIndex].Cells["InvoiceLineTxnLineID"].Value), Convert.ToDateTime(DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[0].Value), (string)DataGVOrders.Rows[DataGVOrders.CurrentRow.Index].Cells[2].Value, InvoiceCustomerName, out lobjDataExtension, string.Empty, string.Empty);
                }
                objClsType = objclsInvoiceLine.GetType();
            }
            PropertyInfo objPropertyInfo = objClsType.GetProperty(pstrSubStringName);

            if (rdbPO.Checked == true)
            {
                strPropertyValue = objPropertyInfo.GetValue((clsPurchaseOrderLine)alLineItem[0], null);
            }
            else if (rdbSO.Checked == true)
            {
                strPropertyValue = objPropertyInfo.GetValue((clsSalesOrderLine)alLineItem[0], null);
            }
            else
            {
                strPropertyValue = objPropertyInfo.GetValue((clsInvoiceLine)alLineItem[0], null);
            }
            return strPropertyValue.ToString();
        }

        void pd_PrintPage(object sender, PrintPageEventArgs ppeArgs)
        {
            //Get the Graphics object
            Graphics g = ppeArgs.Graphics;
            float linesPerPage = 0;
            float yPos = 0;
            int count = 0;
            //Read margins from PrintPageEventArgs
            float leftMargin = 0;// ppeArgs.MarginBounds.Left;
            float topMargin = 0; //ppeArgs.MarginBounds.Top;
            string line = null;
            //Calculate the lines per page on the basis of the height of the page and the height of the font
            linesPerPage = ppeArgs.MarginBounds.Height /
            verdana10Font.GetHeight(g);
            //Now read lines one by one, using StreamReader
            while (count < linesPerPage &&
            ((line = reader.ReadLine()) != null))
            {
                //Calculate the starting position
                yPos = topMargin + (count *
                verdana10Font.GetHeight(g));
                //Draw text
                g.DrawString(line, verdana10Font, Brushes.Black,
                leftMargin, yPos, new StringFormat());
                //Move to next line
                count++;
            }
            //If PrintPageEventArgs has more pages to print
            if (line != null)
            {
                ppeArgs.HasMorePages = true;
            }
            else
            {
                ppeArgs.HasMorePages = false;
            }
        }

        string GetDefaultPrinter()
        {
            PrinterSettings settings = new PrinterSettings();
            foreach (string printer in PrinterSettings.InstalledPrinters)
            {
                settings.PrinterName = printer;
                // MessageBox.Show(settings.PrinterName);
                if (settings.IsDefaultPrinter)
                    return printer;
            }
            return string.Empty;
        }

        static public void ReplaceInFile(string filePath, string searchText, string replaceText)
        {
            StreamReader reader = new StreamReader(filePath);
            string content = reader.ReadToEnd();
            reader.Close();

            content = Regex.Replace(content, searchText, replaceText);

            StreamWriter writer = new StreamWriter(filePath);
            writer.Write(content);
            writer.Close();
        }
        public string ff(string text, int fsize, int orientationVall)
        {

            Label BarLabel = new Label();
            BarLabel.Text = text;
            BarLabel.AutoSize = false;
            BarLabel.Font = new System.Drawing.Font("Arial", Convert.ToInt32(fsize) + (float)(Convert.ToInt32(fsize) / 2.5), FontStyle.Regular);
            BarLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            BarLabel.AutoSize = true;
            BarLabel.Text = text;
            var ss = BarLabel.Height;


            RadLabel lbl = new RadLabel(); 
            lbl.AutoSize = false;
            lbl.Font = new System.Drawing.Font("Arial", Convert.ToInt32(fsize) + (float)(Convert.ToInt32(fsize) / 2.5), FontStyle.Regular);
            lbl.TextAlignment = System.Drawing.ContentAlignment.TopCenter;
            lbl.AutoSize = true;
            lbl.LabelElement.AngleTransform = Convert.ToInt32(orientationVall);
            lbl.Text = text;
            lbl.TextWrap = true;
            lbl.Text = text;
            lbl.LayoutManager.UpdateLayout();
            lbl.Text = text;
            int ter = lbl.Height;
            return ter.ToString();
        }
        private int GetNextLabelQtyToPrint(int pintQuantity, ref int pintNumberOfLabelsToPrint)
        {
            int lintReminder = 0;
            int lintQtyToPrintOnLabel = 0;
            try
            {
                for (int lintCounter = pintNumberOfLabelsToPrint - 1; lintCounter >= 1; lintCounter--)
                {
                    lintQtyToPrintOnLabel = Math.DivRem(pintQuantity, lintCounter, out lintReminder);
                    if (lintReminder == 0)
                    {
                        pintNumberOfLabelsToPrint = lintCounter;
                        return lintQtyToPrintOnLabel;
                    }
                }
                pintNumberOfLabelsToPrint = 1;
                return pintQuantity;
            }
            catch (Exception ex)
            {
                pintNumberOfLabelsToPrint = -1;
                return -1;
            }
        }

        private int GetPreviousLabelQtyToPrint(int pintQuantity, ref int pintNumberOfLabelsToPrint)
        {
            int lintReminder = 0;
            int lintQtyToPrintOnLabel = 0;
            try
            {
                for (int lintCounter = pintNumberOfLabelsToPrint + 1; lintCounter <= pintQuantity; lintCounter++)
                {
                    lintQtyToPrintOnLabel = Math.DivRem(pintQuantity, lintCounter, out lintReminder);
                    if (lintReminder == 0)
                    {
                        pintNumberOfLabelsToPrint = lintCounter;
                        return lintQtyToPrintOnLabel;
                    }
                }

                pintNumberOfLabelsToPrint = pintQuantity;
                return 1;
            }
            catch (Exception ex)
            {
                pintNumberOfLabelsToPrint = -1;
                return -1;
            }
        }

        int cnt = 0;



        private void DataGVItems_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            int lintAllowedSelectedRows = 0;
            lobjQBConfiguration = new QBConfiguration();
            //below condition to check the checkbox status
            int intPrintQuantity = 0;
            int intInvoiceQty = 0;
            if (e.ColumnIndex == 0 && rdbd.Checked == true)
            {
                CheckBoxStatusChecked();
                EnableGridManually(DataGVItems);
                checkboxcount(DataGVItems);
                return;

            }

            //edit option for qty on lbl and qty to print coumn

            else if (e.ColumnIndex == 1 && (rdbA.Checked == true && rdbSO.Checked == true) && e.RowIndex != -1)
            {

                Editquantitytoprint(DataGVItems);
                return;

            }
            else if (e.ColumnIndex == 1 && (rdbA.Checked == true && rdbSR.Checked == true) && e.RowIndex != -1)
            {

                EditSRquantitytoprint(DataGVItems);
                return;

            }
            //edit sales price and adjusted discount price: 14-Mar-2018
            if (e.ColumnIndex != -1 && DataGVItems.Columns[e.ColumnIndex].Name == "SalesPrice" && (rdbSO.Checked == true) && e.RowIndex != -1)
            {
                EditSalesPriceColumn(DataGVItems);
                return;

            }
            if (e.ColumnIndex != -1 && DataGVItems.Columns[e.ColumnIndex].Name == "MarkUpPrice" && (rdbSO.Checked == true) && e.RowIndex != -1)
            {
                EditSMarkUpPriceColumn(DataGVItems);
                return;

            }
            //Add edition button option for po multiple Date:17-Feb-2017
            else if (e.ColumnIndex == 1 && (rdbA.Checked == true && rdbPO.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1") && e.RowIndex != -1)
            {
                EditPOquantitytoprint(DataGVItems);
                return;

            }
            //add so packaging option edit funcationality:Edit columnindex 0 to 1 04-Feb-2020
            else if (e.ColumnIndex == 1 && (rdbC.Checked == true && rdbSO.Checked == true) && e.RowIndex != -1)
            {

                Editsopackagingquantity(DataGVItems);
                return;

            }
            //edit option for invoice multimode:Date 25-Apr-2017
            else if (e.ColumnIndex == 1 && (rdbA.Checked == true && rdbInvoice.Checked == true) && e.RowIndex != -1)
            {
                //Add condition for invoiceqtypercontainer :Date 12-Jun-2018
                //commented pack/units code:Date 11-APR-2019
                if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PackperUnits") == "Y")
                {
                    EditQuantityperContainer(DataGVItems);
                }
                else
                {
                    EditInvoiceQuantitytoprint(DataGVItems);
                }
                // EditInvoiceQuantitytoprint(DataGVItems); // added 12-APR

            }


            if (e.ColumnIndex != -1)
            {
                if (DataGVItems.CurrentRow != null)
                {
                    if (DataGVItems.CurrentRow.Cells[e.ColumnIndex].Value == null)
                    {
                        return;
                    }
                }
            }



            if (e.RowIndex != -1 && e.ColumnIndex != -1)
            {
                if (e.ColumnIndex != 0)
                {
                    string locbin = string.Empty;
                    if (DataGVItems.CurrentRow.Cells[e.ColumnIndex].Value.ToString() == "<<")
                    {

                        var groupItemList = lobjclsPurchaseOrderLine.Where(p => p.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.CurrentRow.Cells["PurchaseOrderLineItemRefFullName"].Value)).OrderByDescending(p => p.Reccount).ToList();

                        int pn = 0;
                        int cnt = 0;

                        foreach (var gvitem in groupItemList)
                        {

                            if (Convert.ToInt32(DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value) > 0)
                            {
                                cnt = Convert.ToInt32(DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value);
                                cnt--;
                                pn = cnt;


                            }
                            else
                            {
                                cnt = gvitem.Reccount;
                                cnt--;
                                pn = cnt;

                            }
                            if (pn > 0)
                            {
                                var groupItemList1 = lobjclsPurchaseOrderLine.Where(p => p.Reccount == pn && p.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.CurrentRow.Cells["PurchaseOrderLineItemRefFullName"].Value)).ToList();

                                foreach (var gvbindItem in groupItemList1)
                                {
                                    if (!string.IsNullOrWhiteSpace(gvbindItem.Site) && !string.IsNullOrWhiteSpace(gvbindItem.Bin))
                                    {
                                        locbin = gvbindItem.Site + " / " + gvbindItem.Bin;

                                    }
                                    else if (!string.IsNullOrWhiteSpace(gvbindItem.Site))
                                    {
                                        locbin = gvbindItem.Site;

                                    }
                                    else
                                    {
                                        locbin = gvbindItem.Bin;
                                    }
                                    DataGVItems.CurrentRow.Cells["PurchaseOrderLineQuantity"].Value = gvbindItem.RecQty;
                                    // DataGVItems.CurrentRow.Cells["PurchaseOrderLineQuantityToPrint"].Value = gvbindItem.PurchaseOrderLineQtytoPrint == 0 ? 1 : gvbindItem.PurchaseOrderLineQtytoPrint;
                                    DataGVItems.CurrentRow.Cells["PurchaseOrderLineDesc"].Value = gvbindItem.PurchaseOrderLineDesc;
                                    DataGVItems.CurrentRow.Cells["PurchaseOrderLineBin"].Value = locbin;
                                    DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value = pn;
                                    //SerianNo
                                    if (DataGVItems.Columns.Contains("SerialNo"))
                                    {
                                        DataGVItems.CurrentRow.Cells["SerialNo"].Value = gvbindItem.ReceiptSerialNumber;
                                    }

                                }
                            }
                            else
                            {

                                MessageBox.Show("No more receipt item quantity available.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                            }

                            break;
                        }


                    }

                    if (DataGVItems.CurrentRow.Cells[e.ColumnIndex].Value.ToString() == ">>")
                    {

                        var groupItemList = lobjclsPurchaseOrderLine.Where(p => p.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.CurrentRow.Cells["PurchaseOrderLineItemRefFullName"].Value)).ToList();

                        int pn = 0;
                        int cnt = 1;


                        foreach (var gvitem in groupItemList)
                        {

                            if (Convert.ToInt32(DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value) > 0)
                            {
                                if (Convert.ToInt32(DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value) < groupItemList.Count)
                                {
                                    if (Convert.ToInt32(DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value) == 1)
                                    {
                                        cnt++;
                                        pn = cnt;
                                    }
                                    else
                                    {

                                        cnt = Convert.ToInt32(DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value);
                                        cnt++;
                                        pn = cnt;

                                    }

                                    var groupItemList1 = lobjclsPurchaseOrderLine.Where(p => p.Reccount == pn && p.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.CurrentRow.Cells["PurchaseOrderLineItemRefFullName"].Value)).ToList();

                                    foreach (var gvbindItem in groupItemList1)
                                    {
                                        if (!string.IsNullOrWhiteSpace(gvbindItem.Site) && !string.IsNullOrWhiteSpace(gvbindItem.Bin))
                                        {
                                            locbin = gvbindItem.Site + " / " + gvbindItem.Bin;

                                        }
                                        else if (!string.IsNullOrWhiteSpace(gvbindItem.Site))
                                        {
                                            locbin = gvbindItem.Site;

                                        }
                                        else
                                        {
                                            locbin = gvbindItem.Bin;
                                        }
                                        DataGVItems.CurrentRow.Cells["PurchaseOrderLineQuantity"].Value = gvbindItem.RecQty;
                                        // DataGVItems.CurrentRow.Cells["PurchaseOrderLineQuantityToPrint"].Value = gvbindItem.PurchaseOrderLineQtytoPrint == 0 ? 1 : gvbindItem.PurchaseOrderLineQtytoPrint;
                                        DataGVItems.CurrentRow.Cells["PurchaseOrderLineDesc"].Value = gvbindItem.PurchaseOrderLineDesc;
                                        DataGVItems.CurrentRow.Cells["PurchaseOrderLineBin"].Value = locbin;
                                        DataGVItems.CurrentRow.Cells["PurchaseOrderLineRecCount"].Value = pn;
                                        //SerianNo
                                        if (DataGVItems.Columns.Contains("SerialNo"))
                                        {
                                            DataGVItems.CurrentRow.Cells["SerialNo"].Value = gvbindItem.ReceiptSerialNumber;
                                        }

                                    }
                                }
                                else
                                {
                                    MessageBox.Show("No more receipt item quantity available.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                                }
                            }
                            else
                            {
                                MessageBox.Show("No more receipt item quantity available.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            }

                            break;
                        }



                    }


                    if (DataGVItems.CurrentRow.Cells[e.ColumnIndex].Value.ToString() == "+")
                    {
                        //Quantity adjustment for multiple sales order : Date : 12/01/2014
                        if (rdbSO.Checked == true && rdbA.Checked == true) //Adjustement for sales order
                        {
                            intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Value);
                            intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesOrderLineQuantity"].Value);
                            txtQtyOnLabel.Text = GetPreviousLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesOrderLineQuantity"].Value), ref intPrintQuantity).ToString();
                            DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                            if (intInvoiceQty == 0 || intPrintQuantity == 0)
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                            txtQtyToPrint.Text = intPrintQuantity.ToString();

                        }
                        else if (rdbSR.Checked == true && rdbA.Checked == true) //Adjustement for sales order
                        {
                            intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityToPrint"].Value);
                            intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantity"].Value);
                            txtQtyOnLabel.Text = GetPreviousLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantity"].Value), ref intPrintQuantity).ToString();
                            DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                            if (intInvoiceQty == 0 || intPrintQuantity == 0)
                                DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                            txtQtyToPrint.Text = intPrintQuantity.ToString();

                        }
                        else //Adjustement for invoice
                        {

                            intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value);
                            intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value);
                            txtQtyOnLabel.Text = GetPreviousLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value), ref intPrintQuantity).ToString();
                            DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                            if (intInvoiceQty == 0 || intPrintQuantity == 0)
                                DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                            txtQtyToPrint.Text = intPrintQuantity.ToString();
                        }
                    }

                    if (DataGVItems.CurrentRow.Cells[e.ColumnIndex].Value.ToString() == "-")
                    {
                        //Quantity adjustment for multiple sales order : Date : 12/01/2014
                        if (rdbSO.Checked == true && rdbA.Checked == true) //Adjustement for sales order
                        {
                            intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Value);
                            intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesOrderLineQuantity"].Value);
                            txtQtyOnLabel.Text = GetNextLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesOrderLineQuantity"].Value), ref intPrintQuantity).ToString();
                            DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                            if (intInvoiceQty == 0 || intPrintQuantity == 0)
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                            txtQtyToPrint.Text = intPrintQuantity.ToString();

                        }else if (rdbSR.Checked == true && rdbA.Checked == true) //Adjustement for sales order
                        {
                            intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityToPrint"].Value);
                            intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantity"].Value);
                            txtQtyOnLabel.Text = GetNextLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantity"].Value), ref intPrintQuantity).ToString();
                            DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                            if (intInvoiceQty == 0 || intPrintQuantity == 0)
                                DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.CurrentRow.Cells["SalesReceiptLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                            txtQtyToPrint.Text = intPrintQuantity.ToString();

                        }
                        else //Adjustement for invoice
                        {
                            intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value);
                            intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value);
                            txtQtyOnLabel.Text = GetNextLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value), ref intPrintQuantity).ToString();
                            DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                            if (intInvoiceQty == 0 || intPrintQuantity == 0)
                                DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                            txtQtyToPrint.Text = intPrintQuantity.ToString();
                        }
                    }

                }
                //Pwh:toggle po qty vs receipt qty
                if ((rdbPO.Checked == true && rdbA.Checked == true) && e.ColumnIndex == 1)
                {

                    ArrayList lstpoitemlist = new ArrayList();
                    objPurchaseOrderLine = new clsPurchaseOrderLine();
                    double poqty = 0;


                    lstpoitemlist = objPurchaseOrderLine.GetPOLine(txtOrderNumber.Text.ToString());
                    //var podetails = lstpoitemlist.Cast<clsPurchaseOrderLine>().Where(p => p.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.CurrentRow.Cells["PurchaseOrderLineItemRefFullName"].Value)).ToList();
                    //foreach (clsPurchaseOrderLine poitem in podetails)
                    //{
                    //    poqty = poitem.PurchaseOrderLineQuantity;
                    //}

                    //on unchecked checkbox show po qty
                    var lineqty = from clsPurchaseOrderLine objpoqty in lstpoitemlist
                                  where objpoqty.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.CurrentRow.Cells["PurchaseOrderLineItemRefFullName"].Value)
                                  select objpoqty;

                    foreach (clsPurchaseOrderLine item in lineqty)
                    {
                        poqty = item.PurchaseOrderQty;
                    }


                    //16-Feb-2017
                    if (DataGVItems.Columns.Contains("CheckBoxPOItemreceipt") && DataGVItems.Columns["CheckBoxPOItemreceipt"] != null)
                    {
                        //intAllowedSelectedRows = DataGVItems.Rows.Count;
                        if (Convert.ToString(DataGVItems.CurrentRow.Cells["CheckBoxPOItemreceipt"].Value) == "True")
                        {
                            DataGVItems.CurrentRow.Cells["CheckBoxPOItemreceipt"].Value = "False";
                            //poreceiptvalue = Convert.ToDouble(DataGVItems.CurrentRow.Cells["PurchaseOrderLineQuantity"].Value);
                            //Reset edited 
                            //if (rdbA.Checked == true && rdbSO.Checked == true)
                            //{
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].ReadOnly = true;
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = true;
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                            //}
                            DataGVItems.CurrentRow.Cells["PurchaseOrderLineQuantity"].Value = poqty;
                            chkreceiptall.Checked = false;

                        }
                        else // unchecked checkedbox
                        {

                            DataGVItems.CurrentRow.Cells["CheckBoxPOItemreceipt"].Value = "True";

                            cnt = 0;
                            for (int i = 0; i < DataGVItems.Rows.Count; i++)
                            {
                                if (Convert.ToString(DataGVItems.Rows[i].Cells["CheckBoxPOItemreceipt"].Value) == "True")
                                {
                                    //on checked checkbox show receipt qty again

                                    var receiptvals = lobjclsPurchaseOrderLine.Where(p => p.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.CurrentRow.Cells["PurchaseOrderLineItemRefFullName"].Value)).ToList();

                                    foreach (clsPurchaseOrderLine recptitem in receiptvals)
                                    {
                                        poqty = recptitem.RecQty;
                                    }
                                    DataGVItems.CurrentRow.Cells["PurchaseOrderLineQuantity"].Value = poqty;
                                    cnt = cnt + 1;

                                }
                            }
                            if (cnt == DataGVItems.Rows.Count)
                            {
                                chkreceiptall.Checked = true;
                            }
                            else
                            {
                                chkreceiptall.Checked = false;
                            }

                        }
                    }


                }




                //below condition added to check rdbd condtion
                if (rdbA.Checked == true || rdbC.Checked == true || rdbd.Checked == true || (invpackaging.Checked == true && rdbInvsingle.Checked == true))
                {
                    //Packaging option for sales order Date:04/29/2015
                    //if (rdbC.Checked == true && rdbSO.Checked == true)
                    //{

                    //    if (e.ColumnIndex == 0)
                    //    {
                    //        if (rdbC.Checked == true)
                    //            lintAllowedSelectedRows = 8 > DataGVItems.Rows.Count ? DataGVItems.Rows.Count : 8;
                    //        else
                    //            lintAllowedSelectedRows = DataGVItems.Rows.Count;

                    //        if (Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value) == "True")
                    //        {
                    //            DataGVItems.CurrentRow.Cells[0].Value = "False";
                    //            chkSelectAll.Checked = false;
                    //            cnt--;
                    //            if (cnt == 0)
                    //            {
                    //                btnPrint.Enabled = false;
                    //            }
                    //        }
                    //        else
                    //        {
                    //            DataGVItems.CurrentRow.Cells[0].Value = "True";
                    //            cnt = 0;
                    //            for (int i = 0; i < DataGVItems.Rows.Count; i++)
                    //            {
                    //                if (Convert.ToString(DataGVItems.Rows[i].Cells[0].Value) == "True")
                    //                {
                    //                    btnPrint.Enabled = true;
                    //                    cnt = cnt + 1;
                    //                    if (cnt > lintAllowedSelectedRows)
                    //                    {
                    //                        DataGVItems.CurrentRow.Cells[0].Value = "False";
                    //                        MessageBox.Show("Only eight lineitems selection is allowed in packaging option.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    //                        return;
                    //                    }
                    //                }
                    //            }
                    //            if (cnt == lintAllowedSelectedRows)
                    //            {
                    //                chkSelectAll.Checked = true;
                    //            }
                    //            else
                    //            {
                    //                chkSelectAll.Checked = false;
                    //            }
                    //        }
                    //    }



                    //}



                    if (e.ColumnIndex == 0 && !(rdbC.Checked == true && rdbSO.Checked == true))
                    {
                        //if (rdbC.Checked == true) //six item selection for so packaging commented date:23-Mar-2020
                        //    lintAllowedSelectedRows = 6 > DataGVItems.Rows.Count ? DataGVItems.Rows.Count : 6;
                        //else
                        lintAllowedSelectedRows = DataGVItems.Rows.Count;

                        if (Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value) == "True")
                        {
                            DataGVItems.CurrentRow.Cells[0].Value = "False";
                            //Reset edited 
                            if (rdbA.Checked == true && rdbSO.Checked == true)
                            {
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].ReadOnly = true;
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = true;
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Style.BackColor = Color.White;
                                DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Style.BackColor = Color.White;

                                DataGVItems.CurrentRow.Cells["SalesPrice"].ReadOnly = true; //16th Feb 2018
                                DataGVItems.CurrentRow.Cells["MarkUpPrice"].ReadOnly = true; //16th Feb 2018
                                DataGVItems.CurrentRow.Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular); //16th Feb 2018
                                DataGVItems.CurrentRow.Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular); //16th Feb 2018

                                DataGVItems.CurrentRow.Cells["SalesPrice"].Style.BackColor = Color.White;
                                DataGVItems.CurrentRow.Cells["MarkUpPrice"].Style.BackColor = Color.White;

                            }
                            //Date 12-Jun-2018
                            if (rdbA.Checked == true && rdbInvoice.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PackperUnits") == "Y")
                            {
                                DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].ReadOnly = true;
                                DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                                DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Style.BackColor = Color.White;


                            }
                            chkSelectAll.Checked = false;
                            cnt--;
                            if (cnt == 0)
                            {
                                btnPrint.Enabled = false;
                            }
                        }
                        else
                        {

                            DataGVItems.CurrentRow.Cells[0].Value = "True"; //six item selection commented on 23-Mar-2020

                            cnt = 0;
                            for (int i = 0; i < DataGVItems.Rows.Count; i++)
                            {
                                if (Convert.ToString(DataGVItems.Rows[i].Cells[0].Value) == "True")
                                {
                                    btnPrint.Enabled = true;
                                    cnt = cnt + 1;
                                    //if (cnt > lintAllowedSelectedRows) //23-Mar-2020
                                    //{
                                    //    DataGVItems.CurrentRow.Cells[0].Value = "False";
                                    //    MessageBox.Show("Only six lineitems selection is allowed in packaging option.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    //    return;
                                    //}
                                }
                            }
                            if (cnt == lintAllowedSelectedRows)
                            {
                                chkSelectAll.Checked = true;
                            }
                            else
                            {
                                chkSelectAll.Checked = false;
                            }
                            //do not allow check for  parent item: 27-Feb-2020
                            if (e.ColumnIndex == 0 && (rdbSO.Checked == true || rdbSR.Checked == true || rdbInvoice.Checked == true) && rdbA.Checked == true)
                            {
                                if (DataGVItems.CurrentRow.Cells["GroupItemType"].Value != null)
                                {
                                    if (DataGVItems.CurrentRow.Cells["GroupItemType"].Value.ToString() == "P")
                                    {
                                        DataGVItems.CurrentRow.Cells[0].ReadOnly = true;
                                        DataGVItems.CurrentRow.Cells[0].Value = "False";
                                        chkSelectAll.Checked = false;
                                    }
                                }

                            }

                        }
                        if (DataGVItems.Columns.Contains("SalesOrderLineItemRefFullName") == true)
                        {
                            string endofprod = lobjQBConfiguration.GetLabelConfigSettings("endofProduction").ToString();
                            if (DataGVItems.CurrentRow.Cells["SalesOrderLineItemRefFullName"].Value.ToString() == endofprod && Convert.ToBoolean(DataGVItems.CurrentRow.Cells["CheckBox"].Value) == false)
                            {
                                for (int i = DataGVItems.CurrentRow.Index; i < DataGVItems.Rows.Count; i++)
                                {
                                    DataGVItems.Rows[i].Cells["CheckBox"].Value = "False";
                                    chkSelectAll.Checked = false;
                                }

                            }
                        }

                    }
                    else if (e.ColumnIndex == 0 && (this.rdbSO.Checked == true && this.rdbC.Checked == true)) //04-Feb-2020 ksb
                    {
                        //if (rdbC.Checked == true //six item selection for so packaging commented date:23-Mar-2020
                        //    lintAllowedSelectedRows = 6 > DataGVItems.Rows.Count ? DataGVItems.Rows.Count : 6;
                        //else
                        lintAllowedSelectedRows = DataGVItems.Rows.Count;

                        if (Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value) == "True")
                        {
                            DataGVItems.CurrentRow.Cells[0].Value = "False";
                            ////Reset edited 
                            //if (rdbA.Checked == true && rdbSO.Checked == true)
                            //{
                            DataGVItems.CurrentRow.Cells["SalesOrderLineQuantity"].ReadOnly = true;
                            DataGVItems.CurrentRow.Cells["SalesOrderLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = true;
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityToPrint"].Style.BackColor = Color.White;
                            //    DataGVItems.CurrentRow.Cells["SalesOrderLineQuantityOnLabel"].Style.BackColor = Color.White;

                            //    DataGVItems.CurrentRow.Cells["SalesPrice"].ReadOnly = true; //16th Feb 2018
                            //    DataGVItems.CurrentRow.Cells["MarkUpPrice"].ReadOnly = true; //16th Feb 2018
                            //    DataGVItems.CurrentRow.Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular); //16th Feb 2018
                            //    DataGVItems.CurrentRow.Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular); //16th Feb 2018

                            //    DataGVItems.CurrentRow.Cells["SalesPrice"].Style.BackColor = Color.White;
                            //    DataGVItems.CurrentRow.Cells["MarkUpPrice"].Style.BackColor = Color.White;

                            //}
                            ////Date 12-Jun-2018
                            //if (rdbA.Checked == true && rdbInvoice.Checked == true && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PackperUnits") == "Y")
                            //{
                            //    DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].ReadOnly = true;
                            //    DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                            //    DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Style.BackColor = Color.White;


                            //}
                            chkSelectAll.Checked = false;
                            cnt--;
                            if (cnt == 0)
                            {
                                btnPrint.Enabled = false;
                            }
                        }
                        else //six item selection commented 23-Mar-2020
                        {

                            DataGVItems.CurrentRow.Cells[0].Value = "True";

                            cnt = 0;
                            for (int i = 0; i < DataGVItems.Rows.Count; i++)
                            {
                                if (Convert.ToString(DataGVItems.Rows[i].Cells[0].Value) == "True")
                                {
                                    btnPrint.Enabled = true;
                                    cnt = cnt + 1;
                                    //if (cnt > lintAllowedSelectedRows)
                                    //{
                                    //    DataGVItems.CurrentRow.Cells[0].Value = "False";
                                    //    MessageBox.Show("Only six lineitems selection is allowed in packaging option.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    //    return;
                                    //}
                                }
                            }
                            if (cnt == lintAllowedSelectedRows)
                            {
                                chkSelectAll.Checked = true;
                            }
                            else
                            {
                                chkSelectAll.Checked = false;
                            }



                        }



                    }
                    else
                    {
                        if (rdbC.Checked == false && rdbA.Checked == false)
                        {
                            if (Convert.ToString(DataGVItems.CurrentRow.Cells[1].Value) == "")
                            {
                                txtQtyOnLabel.Text = "";
                            }
                            else
                            {

                                txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[1].Value);
                            }
                        }
                        else if (rdbA.Checked == false)
                        {
                            if (Convert.ToString(DataGVItems.CurrentRow.Cells[2].Value) == "")
                            {
                                txtQtyOnLabel.Text = "";
                            }
                            else
                            {
                                txtQtyOnLabel.Text = "1";
                            }
                        }
                    }
                    // if (e.ColumnIndex == 3)
                    // { DataGVItems.ReadOnly = false; MessageBox.Show(Convert.ToString(DataGVItems.CurrentRow.Cells[3].Value)); }
                }
                else
                {
                    //txtQtyOnLabel.Text = "1";//Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                    //txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                    if (rdbB.Checked == true && rdbPO.Checked == true) //if single po is checked : 17-Feb-2017
                    {
                        if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y")
                        {
                            txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                            txtQtyOnLabel.Text = "1"; // Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value); 16-Feb-2017
                        }
                        else
                        {
                            txtQtyToPrint.Text = "1";
                            txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                        }
                    }
                    else
                    {
                        txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                        txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);

                    }
                }
            }
        }

        private void BtnConfig_Click(object sender, EventArgs e)
        {
            lblfile1 = 0;

        }

        private bool CheckMandetory()
        {
            lobjQBConfiguration = new QBConfiguration();
            string checkAuto = lobjQBConfiguration.GetLabelConfigSettings("AutoManualCheck");
            if (rdbB.Checked == true && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()) && invpackaging.Checked == false) //davino
            {
                if (txtQtyOnLabel.Text.Trim() == "")
                {
                    MessageBox.Show("Please enter quantity on label.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtQtyOnLabel.Focus();
                    return false;
                }
                else if (txtQtyToPrint.Text.Trim() == "")
                {
                    MessageBox.Show("Please enter quantity to print.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    txtQtyToPrint.Focus();
                    return false;
                }
                else if (cmbLabelName.SelectedIndex == 0)
                {
                    MessageBox.Show("Please select label to be printed.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    btnSelect.Focus();
                    lbltempName.Text = "";
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                if (cmbLabelName.SelectedIndex == 0 && checkAuto == "Manual" && !string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()) && invpackaging.Checked == false || lbltempName.Text.ToString().Trim() == "") //davino
                {
                    MessageBox.Show("Please select label to be printed.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    btnSelect.Focus();
                    lbltempName.Text = "";
                    return false;
                }
                else if (cmbLabelName.SelectedIndex == 0 && invpackaging.Checked == true && (rdbInvsingle.Checked == true || rdbInvmultiple.Checked == true)) //davino code merged
                {

                    MessageBox.Show("Please select label to be printed.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    btnSelect.Focus();
                    lbltempName.Text = "";
                    return false;

                }
                else if (cmbLabelPrinter.SelectedIndex <= 0)
                {
                    MessageBox.Show("Please select the printer.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    cmbLabelPrinter.Focus();
                    return false;
                }
                else
                {
                    return true;
                }

            }
        }

        //order filter by date data:07-09-2016
        //public void fnOrderFilter()
        //{

        //    try
        //    {


        //        XmlDocument xmlDoc = new XmlDocument();
        //        // Uses reflection to find the location of the config file.
        //        System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
        //        System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
        //        xmlDoc.Load(FileInfo.FullName);
        //        // Finds the right node and change it to the new value.
        //        System.Xml.XmlNode NodeOrderType = null;

        //        //show date range setting:Date 06-09-2016

        //        NodeOrderType = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='SearchInvBy']/@value");
        //        if ((!object.ReferenceEquals(NodeOrderType, "")))
        //        {
        //            if (NodeOrderType.InnerText.ToString().ToUpper().ToString() == "Y")
        //            {
        //                //if (DataGVOrders.Columns["CheckBoxDatefilter"] != null && DataGVOrders.Columns["CheckBoxDatefilter"].Visible == false)
        //                //{
        //                //    DataGVOrders.Columns["CheckBoxDatefilter"].Visible = true;
        //                //}

        //                groupBox1.Visible = false;
        //                gbSearchByDate.Visible = true;
        //                DataGVItems.Visible = false;
        //                btnfilterlabel.Visible = false;
        //                chkSelectAll.Visible = false;
        //                chkordergrid.Visible = true;
        //                chkordergrid.Checked = false;
        //                rdbsearchbyInv.Checked = true;
        //                //cmbauto.Visible = false;
        //                InitFilterDataGrid();
        //            }
        //            else
        //            {
        //                groupBox1.Visible = true;
        //                gbSearchByDate.Visible = false;
        //                DataGVItems.Visible = true;

        //                btnfilterlabel.Visible = true;
        //                GetConfigval = lobjQBConfiguration.GetLabelConfigSettings("OrderType");
        //                if (GetConfigval == "PoMultiple" || GetConfigval == "SoMultiple" || GetConfigval == "InvMultiple")
        //                {
        //                    chkSelectAll.Visible = true;

        //                }


        //                chkordergrid.Visible = false;
        //                if (DataGVOrders.Columns["CheckBoxDatefilter"] != null && DataGVOrders.Columns["CheckBoxDatefilter"].Visible == true)
        //                {
        //                    DataGVOrders.Columns["CheckBoxDatefilter"].Visible = false;
        //                }
        //                DataGVOrders.Rows.Clear();
        //                gbOrderDetail.Visible = false;


        //                InitDataGrid();
        //            }


        //        }


        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "Label Connector");
        //    }


        //}
        public void fnGetOrderType()
        {

            try
            {

                string OrderTypepath = "";

                XmlDocument xmlDoc = new XmlDocument();
                // Uses reflection to find the location of the config file.
                System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                xmlDoc.Load(FileInfo.FullName);
                // Finds the right node and change it to the new value.
                System.Xml.XmlNode NodeOrderType = null;
                // XmlNode NodeDateRagevalue = null;
                //show date range setting:Date 06-09-2016


                NodeOrderType = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='OrderType']/@value");
                //  NodeDateRagevalue = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='SearchInvBy']/@value");
                if ((!object.ReferenceEquals(NodeOrderType, "")))
                {
                    OrderTypepath = NodeOrderType.InnerText;

                    GetOrderTypeSetting(OrderTypepath);


                }
                //check date ragne filter setting :Date 06-09-2016
                //if ((!object.ReferenceEquals(NodeDateRagevalue, "")))
                //{
                //    if (NodeDateRagevalue.InnerText.ToString().ToUpper().ToString() == "Y")
                //    {
                //        DataGVOrders.Columns["CheckBox"].Visible = true;
                //        groupBox1.Visible = false;
                //        gbSearchByDate.Visible = true;
                //        DataGVItems.Visible = false;
                //        btnfilterlabel.Visible = false;
                //        chkSelectAll.Visible = false;
                //        chkordergrid.Visible = true;
                //        chkordergrid.Checked = false;


                //    }
                //    else
                //    {
                //        groupBox1.Visible = true;
                //        gbSearchByDate.Visible = false;
                //        DataGVItems.Visible = true;
                //        btnfilterlabel.Visible = true;
                //        chkSelectAll.Visible = true;
                //        chkordergrid.Visible = false;
                //        DataGVOrders.Columns["CheckBox"].Visible = false;
                //        DataGVOrders.Rows.Clear();
                //        gbOrderDetail.Visible = false;
                //    }
                //}


                //Set printer name from config file
                if (DataGVItems.Rows.Count > 0)
                {

                    if (lobjQBConfiguration.GetLabelConfigSettings("CurrentPrinter") != "Screen")
                    {
                        cmbLabelPrinter.SelectedItem = lobjQBConfiguration.GetLabelConfigSettings("CurrentPrinter");
                        cmbLabelPrinter.Enabled = false;
                    }
                    else
                    {
                        cmbLabelPrinter.Enabled = true;
                        cmbLabelPrinter.SelectedIndex = 0;
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
            }

        }
        public void fnGenerateLabelCB()
        {

            /* Variable declaration for setting default label path for first time ***Start*** by Srinivas 10-Jan-2018 */
            string strLabelPathStatus = string.Empty;
            string strMyDocBTWFilesFolder = string.Empty;
            string strFolderpathStatus = string.Empty;
            string Folderpath = string.Empty;
            string strLabelPath = string.Empty;
            /* Variable declaration for setting default label path for first time ***End*** by Srinivas 10-Jan-2018 */

            try
            {
                lobjQBConfiguration = new QBConfiguration();
                cmbLabelName.Items.Clear();
                cmbLabelName.Items.Add("Select Label");

                /* Code ***Start*** for setting folder path by Srinivas 17-Jan-2018*/
                //get BTW file folder from my documents folder
                strMyDocBTWFilesFolder = Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), @"Label Connector Templates");
                //get Label Path
                strLabelPath = lobjQBConfiguration.GetLabelConfigSettings("LabelPath");
                //get status of Label path 
                strFolderpathStatus = lobjQBConfiguration.GetLabelConfigSettings("FolderpathStatus");

                if (strFolderpathStatus.ToUpper().ToString() == "ONE")
                {
                    Folderpath = strMyDocBTWFilesFolder;

                }
                else
                {
                    Folderpath = strLabelPath;
                }

                if (Directory.Exists(Folderpath))
                {
                    string[] filenames = Directory.GetFiles(Folderpath, "*.btw");
                    int i = 0;
                    string filename = null;
                    for (i = 0; i <= filenames.Length - 1; i++)
                    {
                        filename = Path.GetFileName(filenames[i]);
                        // This is much better than relying on substring to be accurate
                        cmbLabelName.Items.Add(filename);
                    }

                    if (mstrLabelName != string.Empty)
                        cmbLabelName.SelectedItem = mstrLabelName;
                    else
                        cmbLabelName.SelectedIndex = 0;

                    if (cmbLabelName.Items.Count > 1)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(Folderpath, "LabelPath");
                        lobjQBConfiguration.SaveLabelFilePathSettings("Two", "FolderpathStatus");
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
            }
            /* Code ***End*** for setting folder path by Srinivas 17-Jan-2018*/
            // ***Start***Old commented by Srinivas for implementing Default Path setting Logic on 17-Jan-2018
            //try
            //{

            //    cmbLabelName.Items.Clear();
            //    cmbLabelName.Items.Add("Select Label");
            //    string Folderpath = "";

            //    //Folderpath = System.Configuration.ConfigurationManager.AppSettings("LabelPath").ToString()
            //    XmlDocument xmlDoc = new XmlDocument();
            //    // Uses reflection to find the location of the config file.
            //    System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
            //    System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
            //    xmlDoc.Load(FileInfo.FullName);
            //    // Finds the right node and change it to the new value.
            //    System.Xml.XmlNode Node = null;

            //    Node = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='LabelPath']/@value");
            //    if ((!object.ReferenceEquals(Node, "")))
            //    {
            //        Folderpath = Node.InnerText;
            //    }
            //    
            //    string[] filenames = Directory.GetFiles(Folderpath, "*.btw");
            //    int i = 0;
            //    string filename = null;
            //    for (i = 0; i <= filenames.Length - 1; i++)
            //    {
            //        filename = Path.GetFileName(filenames[i]);
            //        // This is much better than relying on substring to be accurate
            //        cmbLabelName.Items.Add(filename);
            //    }

            //    if (mstrLabelName != string.Empty)
            //        cmbLabelName.SelectedItem = mstrLabelName;
            //    else
            //        cmbLabelName.SelectedIndex = 0;

            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message, "Label Connector");
            //}
            // ***End***Old commented by Srinivas for implementing Default Path setting Logic on 17-Jan-2018
        }


        public void fnGetUDFLabels()
        {

            try
            {
                lobjQBConfiguration = new QBConfiguration();
                string lstrUDFolderPath = string.Empty;
                lstrUDFolderPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\");
                cmbLabelName.Items.Clear();
                cmbLabelName.Items.Add("Select Label");

                if (Directory.Exists(lstrUDFolderPath))
                {
                    string[] filenames = Directory.GetFiles(lstrUDFolderPath, "*.pdf");
                    int i = 0;
                    string filename = null;
                    for (i = 0; i <= filenames.Length - 1; i++)
                    {
                        filename = Path.GetFileNameWithoutExtension(filenames[i].ToString());
                        // This is much better than relying on substring to be accurate
                        cmbLabelName.Items.Add(filename);
                    }

                    //if (mstrLabelName != string.Empty)
                    //    cmbLabelName.SelectedItem = mstrLabelName;
                    //else
                    cmbLabelName.SelectedIndex = 0;

                    //if (cmbLabelName.Items.Count > 1)
                    //{
                    //    lobjQBConfiguration.SaveLabelFilePathSettings(lstrUDFolderPath, "UdfLabelPath");

                    //}
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
            }

        }

        public void fnshowFields()
        {

            try
            {

                string DCNumbername = string.Empty;
                string Carriername = string.Empty;
                string entryfield1 = string.Empty;
                string entryfield2 = string.Empty;
                string soqtyonlbl = string.Empty;
                string sqqtyonprint = string.Empty;

                if (rdbSO.Checked == true && rdbA.Checked == true)
                {
                    XmlDocument xmlDoc = new XmlDocument();
                    // Uses reflection to find the location of the config file.
                    System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                    System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                    xmlDoc.Load(FileInfo.FullName);
                    // Finds the right node and change it to the new value.
                    System.Xml.XmlNode Node1 = null;
                    System.Xml.XmlNode Node2 = null;
                    System.Xml.XmlNode Node3 = null;
                    System.Xml.XmlNode Node4 = null;
                    System.Xml.XmlNode Node5 = null;
                    System.Xml.XmlNode Node6 = null;


                    Node1 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='DCNumber']/@value");
                    Node2 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='Carrier']/@value");
                    Node3 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='QtyPerContainer']/@value");
                    Node4 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='Entryonetext']/@value");
                    Node5 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='Entrytwotext']/@value");
                    Node6 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='MultiSoMode']/@value");



                    if (Node3.InnerText == "1" || Node3.InnerText == "0") //OR Condition added 16-jan-2016
                    {
                        if ((!object.ReferenceEquals(Node1, "")))
                        {
                            DCNumbername = Node1.InnerText;
                        }

                        if ((!object.ReferenceEquals(Node2, "")))
                        {
                            Carriername = Node2.InnerText;
                        }

                        if ((!object.ReferenceEquals(Node4, "")))
                        {
                            lbldcno.Text = Node4.InnerText != "" ? Node4.InnerText.ToString() : string.Empty;
                        }
                        if ((!object.ReferenceEquals(Node5, "")))
                        {
                            lblcarrier.Text = Node5.InnerText != "" ? Node5.InnerText.ToString() : string.Empty;
                        }


                        if (DCNumbername == "1")
                        {
                            pnldcnumber.Visible = true;
                            txtdecnumber.Text = "";
                        }
                        else
                        {
                            pnldcnumber.Visible = false;
                        }
                        if (Carriername == "1")
                        {
                            pnlcarrier.Visible = true;
                            txtcarrier.Text = "";
                        }
                        else
                        {
                            pnlcarrier.Visible = false;
                        }
                    }
                    //else //commented on 16 jan 2017
                    //{
                    //    pnldcnumber.Visible = false;
                    //    pnlcarrier.Visible = false;
                    //}
                    // if (Node3.InnerText == "0") //10-APR-2019
                    // {
                    //17-APR-2019
                    //if (DataGVItems.Rows.Count > 0)
                    //{
                    //    foreach (DataGridViewRow dr in DataGVItems.Rows)
                    //    {
                    //        soqtyonlbl = Convert.ToString(dr.Cells["SalesOrderLineQuantityOnLabel"].Value);
                    //        sqqtyonprint = Convert.ToString(dr.Cells["SalesOrderLineQuantityToPrint"].Value);

                    //        dr.Cells["SalesOrderLineQuantityOnLabel"].Value = sqqtyonprint;
                    //        dr.Cells["SalesOrderLineQuantityToPrint"].Value = soqtyonlbl;

                    //    }
                    //}

                    //if ((!object.ReferenceEquals(Node6, ""))) //Added on 10-APR-2019
                    //{

                    //    if (Node6.InnerText.ToString().ToUpper() == "S")
                    //    {
                    //        if (DataGVItems.Rows.Count > 0)
                    //        {
                    //            foreach (DataGridViewRow dr in DataGVItems.Rows)
                    //            {
                    //                soqtyonlbl = Convert.ToString(dr.Cells["SalesOrderLineQuantityOnLabel"].Value);
                    //                sqqtyonprint = Convert.ToString(dr.Cells["SalesOrderLineQuantityToPrint"].Value);

                    //                dr.Cells["SalesOrderLineQuantityOnLabel"].Value = sqqtyonprint;
                    //                dr.Cells["SalesOrderLineQuantityToPrint"].Value = "1";

                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (DataGVItems.Rows.Count > 0)
                    //        {
                    //            foreach (DataGridViewRow dr in DataGVItems.Rows)
                    //            {
                    //                soqtyonlbl = Convert.ToString(dr.Cells["SalesOrderLineQuantityOnLabel"].Value);
                    //                sqqtyonprint = Convert.ToString(dr.Cells["SalesOrderLineQuantityToPrint"].Value);
                    //                if (sqqtyonprint == "1")
                    //                {
                    //                    dr.Cells["SalesOrderLineQuantityOnLabel"].Value = sqqtyonprint;
                    //                    dr.Cells["SalesOrderLineQuantityToPrint"].Value = soqtyonlbl;
                    //                }
                    //                else
                    //                {
                    //                    dr.Cells["SalesOrderLineQuantityOnLabel"].Value = soqtyonlbl;
                    //                    dr.Cells["SalesOrderLineQuantityToPrint"].Value = sqqtyonprint;
                    //                }

                    //            }
                    //        }
                    //    }

                    //}//
                    // }
                    InitDataGrid();
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
            }



        }

        public void fnshowheadertext()
        {

            try
            {
                if (rdbB.Checked == true && rdbPO.Checked == true) //if single po is checked : 16-Feb-2017
                {
                    //swap qty for po single mode
                    string swapqtytoprint = string.Empty;
                    string swapqtyonlbl = string.Empty;
                    swapqtytoprint = Convert.ToString(txtQtyToPrint.Text);
                    swapqtyonlbl = Convert.ToString(txtQtyOnLabel.Text);

                    txtQtyOnLabel.Text = swapqtytoprint;
                    txtQtyToPrint.Text = swapqtyonlbl;
                    return;
                }



                string poqtyonlbl = string.Empty;
                string poqqtyonprint = string.Empty;

                XmlDocument xmlDoc = new XmlDocument();
                // Uses reflection to find the location of the config file.
                System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                xmlDoc.Load(FileInfo.FullName);
                // Finds the right node and change it to the new value.
                System.Xml.XmlNode Node1 = null;
                System.Xml.XmlNode Node2 = null;
                System.Xml.XmlNode Node3 = null;

                Node1 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='PoSNHeader']/@value");
                Node2 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='PoExpDateHeader']/@value");

                Node3 = xmlDoc.SelectSingleNode("configuration/appSettings/add[@key='ShowPo']/@value");

                if (Node3.InnerText == "0") //Item receipt data
                {
                    if (rdbA.Checked == false) rdbA.Checked = true;

                    //condition added on 16-Feb-2017
                    if (DataGVItems.Rows.Count > 0)
                    {
                        gridcolumnName = DataGVItems.Columns[5].Name;
                    }
                    if ((gridcolumnName != "SubItemOf"))
                    {
                        InitDataGrid();
                    }
                    //InitDataGrid(); //commented on 16-Feb-2017

                    if (chkSelectAll.Visible == false) chkSelectAll.Visible = true;
                    if (chkreceiptall.Visible == false) chkreceiptall.Visible = true;
                    if (lblprintheader.Visible == false) lblprintheader.Visible = true;
                    if (lblreceiptheader.Visible == false) lblreceiptheader.Visible = true;

                    if ((!object.ReferenceEquals(Node1, "")))
                    {
                        DataGVItems.Columns["PurchaseOrderLineSN"].HeaderText = Node1.InnerText != "" ? Node1.InnerText.ToString() : string.Empty;
                    }
                    if ((!object.ReferenceEquals(Node2, "")))
                    {
                        DataGVItems.Columns["PurchaseOrderLineExpDate"].HeaderText = Node2.InnerText != "" ? Node2.InnerText.ToString() : string.Empty;
                    }


                    if (!(DataGVItems.Columns.Contains("CheckBox") && DataGVItems.Columns["CheckBox"].Visible))
                    {
                        DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                        Column.Name = "CheckBox";
                        Column.HeaderText = "";
                        DataGVItems.Columns.Add(Column);

                        DataGVItems.Columns["CheckBox"].Width = 40;
                        DataGVItems.Columns["CheckBox"].ReadOnly = false;
                    }

                    cmbcustomfield.Visible = false;
                    lblselcustomfield.Visible = false;

                }
                else //po data
                {


                    if (rdbA.Checked == false) rdbA.Checked = true;

                    if (DataGVItems.Rows.Count > 0)
                    {
                        gridcolumnName = DataGVItems.Columns[4].Name;
                    }
                    if ((gridcolumnName != "PurchaseOrderLineQuantityOnLabel"))
                    {
                        InitDataGrid(); // 16-Feb-2017
                    }

                    if (chkSelectAll.Visible == false) chkSelectAll.Visible = true;
                    if (chkreceiptall.Visible == true) chkreceiptall.Visible = false;
                    if (lblprintheader.Visible == true) lblprintheader.Visible = false;
                    if (lblreceiptheader.Visible == true) lblreceiptheader.Visible = false;


                    DataGridViewCheckBoxColumn Column = new DataGridViewCheckBoxColumn();
                    if (!(DataGVItems.Columns.Contains("CheckBox") && DataGVItems.Columns["CheckBox"].Visible))
                    {
                        Column.Name = "CheckBox";
                        Column.HeaderText = "";
                        DataGVItems.Columns.Add(Column);

                        DataGVItems.Columns["CheckBox"].Width = 50;
                        DataGVItems.Columns["CheckBox"].ReadOnly = false;
                    }

                    //switch po qty on lbl and qty to print :date 16-Feb-2017
                    // Comment on 17-APR-2019
                    //if (DataGVItems.Rows.Count > 0)
                    //{
                    //    foreach (DataGridViewRow dr in DataGVItems.Rows)
                    //    {
                    //        poqtyonlbl = Convert.ToString(dr.Cells["PurchaseOrderLineQuantityOnLabel"].Value);
                    //        poqqtyonprint = Convert.ToString(dr.Cells["PurchaseOrderLineQuantityToPrint"].Value);

                    //        dr.Cells["PurchaseOrderLineQuantityOnLabel"].Value = poqqtyonprint;
                    //        dr.Cells["PurchaseOrderLineQuantityToPrint"].Value = poqtyonlbl;

                    //    }
                    //}

                    //POQtyPerCase : show item custom field dropdown list : Date 13-Dec-2018
                    //Dictionary<string, string> lobjcustomItemlist = new Dictionary<string, string>();

                    //string ItemCustomField1val = string.Empty;
                    //string ItemCustomField2val = string.Empty;
                    //string ItemCustomField3val = string.Empty;
                    //string lblItemCustomField1L = string.Empty;
                    //string lblItemCustomField2L = string.Empty;
                    //string lblItemCustomField3L = string.Empty;

                    //lblItemCustomField1L = lobjQBConfiguration.GetLabelConfigSettings("ItemCustomField1");
                    //lblItemCustomField2L = lobjQBConfiguration.GetLabelConfigSettings("ItemCustomField2");
                    //lblItemCustomField3L = lobjQBConfiguration.GetLabelConfigSettings("ItemCustomField3");

                    //if(!string.IsNullOrWhiteSpace(lblItemCustomField1L) || !string.IsNullOrWhiteSpace(lblItemCustomField2L) || !string.IsNullOrWhiteSpace(lblItemCustomField3L))
                    //{ 
                    //    lobjcustomItemlist = lobjitem.GetAllItemCustomFieldsWithNameValue(string.Empty);

                    //    //bind itemcustom field name dropdown

                    //    if (lobjcustomItemlist.Count > 0)
                    //    {
                    //        if (!lobjcustomItemlist.TryGetValue(lblItemCustomField1L.Trim().ToUpper(), out ItemCustomField1val))
                    //        {
                    //            // the key isn't in the dictionary.
                    //            //return;
                    //        }
                    //        if (!lobjcustomItemlist.TryGetValue(lblItemCustomField2L.Trim().ToUpper(), out ItemCustomField2val))
                    //        {
                    //            // the key isn't in the dictionary.
                    //            //return;
                    //        }
                    //        if (!lobjcustomItemlist.TryGetValue(lblItemCustomField3L.Trim().ToUpper(), out ItemCustomField3val))
                    //        {
                    //            // the key isn't in the dictionary.
                    //            // return;
                    //        }

                    //        Dictionary<string, string> fieldlist = new Dictionary<string, string>();
                    //        fieldlist.Clear();

                    //        fieldlist.Add("0", "Select Divisor");
                    //        if (!string.IsNullOrWhiteSpace(lblItemCustomField1L) && !string.IsNullOrWhiteSpace(ItemCustomField1val))
                    //        {
                    //            fieldlist.Add(ItemCustomField1val, lblItemCustomField1L);
                    //        }
                    //        if(!string.IsNullOrWhiteSpace(lblItemCustomField2L) && !string.IsNullOrWhiteSpace(ItemCustomField2val))
                    //        {
                    //            fieldlist.Add(ItemCustomField2val, lblItemCustomField2L);
                    //        }
                    //        if(!string.IsNullOrWhiteSpace(lblItemCustomField3L) && !string.IsNullOrWhiteSpace(ItemCustomField3val))
                    //        {
                    //            fieldlist.Add(ItemCustomField3val, lblItemCustomField3L);
                    //        }

                    //        cmbcustomfield.DataSource = new BindingSource(fieldlist, null);
                    //        cmbcustomfield.DisplayMember = "Value";
                    //        cmbcustomfield.ValueMember = "Key";
                    //    }

                    //}
                    //17-APR-2019//to show grid initally clear

                    if (rdbA.Checked == true && rdbPO.Checked == true) //if single po is checked : 16-Feb-2017
                    {
                        InitDataGrid();

                    }

                }

            }

            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Label Connector");
            }

        }



        public void fnshowinvoicedata()
        {
            // string invqtyonlbl = string.Empty;
            // string invqtyonprint = string.Empty;

            if (rdbA.Checked == true && rdbInvoice.Checked == true)
            {
                if (!string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("CustomerCustomFieldText")))
                {
                    lblrouteno.Text = Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("CustomerCustomFieldText"));
                    txtrouteno.Visible = true;
                    lblrouteno.Visible = true;
                }
                else
                {
                    txtrouteno.Visible = false;
                    lblrouteno.Visible = false;
                }
                InitDataGrid();

            }
            //commented on 17-APR-2019
            //string invqtyonlbl = string.Empty;
            //string invqtyonprint = string.Empty;
            //if (rdbA.Checked == true && rdbInvoice.Checked == true)
            //{
            //    if (DataGVItems.Rows.Count > 0)
            //    {
            //        foreach (DataGridViewRow dr in DataGVItems.Rows)
            //        {
            //            invqtyonlbl = Convert.ToString(dr.Cells["InvoiceLineQuantityOnLabel"].Value);
            //            invqtyonprint = Convert.ToString(dr.Cells["InvoiceLineQuantityToPrint"].Value);

            //            dr.Cells["InvoiceLineQuantityOnLabel"].Value = invqtyonprint;
            //            dr.Cells["InvoiceLineQuantityToPrint"].Value = invqtyonlbl;

            //        }
            //    }
            //}
            //code end//


            //if ((lobjQBConfiguration.GetLabelConfigSettings("PackperUnits").ToString() == "N"))
            //{
            //    if (DataGVItems.Columns.Contains("InvoiceLineQuantityOnLabel") == true)
            //    {

            //        foreach (DataGridViewRow dr in DataGVItems.Rows)
            //        {

            //            if (dr.Cells["InvoiceLineQuantityOnLabel"].Value != null)
            //            {
            //                invqtyonlbl = Convert.ToString(dr.Cells["InvoiceLineQuantityOnLabel"].Value);
            //                invqtyonprint = Convert.ToString(dr.Cells["InvoiceLineQuantityToPrint"].Value);

            //                dr.Cells["InvoiceLineQuantityOnLabel"].Value = invqtyonprint;
            //                dr.Cells["InvoiceLineQuantityToPrint"].Value = invqtyonlbl;
            //            }
            //            else
            //            {
            //                InitDataGrid();
            //                break;
            //            }


            //        }
            //    }

            //}


        }


        //public void fnshowprintername()
        //{
        //    //Set printer name from config file

        //    if (DataGVItems.Rows.Count > 0)
        //    {

        //        if(lobjQBConfiguration.GetLabelConfigSettings("CurrentPrinter")!="Screen")
        //        {
        //            cmbLabelPrinter.SelectedItem = lobjQBConfiguration.GetLabelConfigSettings("CurrentPrinter");
        //            cmbLabelPrinter.Enabled = false;
        //        }
        //        else
        //        {
        //            cmbLabelPrinter.Enabled = true;
        //            cmbLabelPrinter.SelectedIndex = 0;
        //        }
        //    }


        //}


        //public void fnshowFlipInvQty()
        //{

        //    //switch inv qty on lbl and qty to print 
        //    if (rdbInvmultiple.Checked == true && rdbA.Checked == true)
        //    {
        //        string invqtyonlbl = string.Empty;
        //        string invqqtyonprint = string.Empty;
        //        if (DataGVItems.Rows.Count > 0)
        //        {
        //            foreach (DataGridViewRow dr in DataGVItems.Rows)
        //            {
        //                invqtyonlbl = Convert.ToString(dr.Cells["InvoiceLineQuantityOnLabel"].Value);
        //                invqqtyonprint = Convert.ToString(dr.Cells["InvoiceLineQuantityToPrint"].Value);

        //                dr.Cells["InvoiceLineQuantityOnLabel"].Value = invqqtyonprint;
        //                dr.Cells["InvoiceLineQuantityToPrint"].Value = invqtyonlbl;

        //            }
        //        }
        //    }

        //}

        private void rdbInvoice_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
            //rdbC.Enabled = true; 11/30/2016
            rdbB.Checked = true;
            rdbA.Checked = true;
            listviewprintingItem.Visible = false;
            RadioButton btn = sender as RadioButton;
            if (!btn.Checked)
            {
                lbltempName.Text = "";
                cmbLabelName.Items.Clear();
              
            }
        }

        private void cmbLabelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbLabelName.SelectedIndex > 0)
            {
                btnPrint.Enabled = true;
            }
            else
            {
                btnClear.Enabled = false;
            }
        }

        //private void radioButton1_CheckedChanged(object sender, EventArgs e)
        //{
        //    Clear();
        //}

        //private void radioButton2_CheckedChanged(object sender, EventArgs e)
        //{
        //    Clear();
        //}

     

        private void mnuAbout_Click(object sender, EventArgs e)
        {
            frmAbout lobjFrmAbout = new frmAbout();
            lobjFrmAbout.ShowDialog();
        }

        private void txtQtyToPrint_Validating(object sender, CancelEventArgs e)
        {
            int txtcount = !String.IsNullOrWhiteSpace(Convert.ToString(txtQtyToPrint.Text)) ? Convert.ToInt32(txtQtyToPrint.Text) : 0;

            if (txtcount < 1)
            {
                //MessageBox.Show("Quantity to print should be greater than zero.", "Label Connector");
                txtQtyToPrint.Text = "";
                e.Cancel = true;
            }


            else
            {
                e.Cancel = false;
            }
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmAbout objfrmAbout = new frmAbout();
            objfrmAbout.ShowDialog();
        }

        //private void rdbC_CheckedChanged(object sender, EventArgs e)
        //{
        //    Clear();
        //}

        private void btnClear_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < DataGVItems.Rows.Count; i++)
            {
                if (rdbA.Checked)
                {
                    DataGVItems.Rows[i].Cells["CheckBox"].Value = "False";
                    //DataGVItems.Rows[i].Cells["ChkPrintStatus"].Value = "False"; //##1
                }
                else if (rdbC.Checked == true)
                {
                    DataGVItems.Rows[i].Cells["CheckBox"].Value = "False";
                    DataGVItems.Rows[i].Cells["PrintedStatus"].Value = "N";
                }
            }
            //invoice/Sales order filter by date
            if (string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()))
            {

                for (int j = 0; j < dataGVSelectedorderheader.Rows.Count; j++)
                {

                    dataGVSelectedorderheader.Rows[j].Cells["CheckBoxDatefilter"].Value = "False";
                    dateTimePicker1.Value = DateTime.Now;
                    dateTimePicker2.Value = DateTime.Now;
                }
            }
            chkSelectAll.Checked = false;
            cnt = 0;
            cmbLabelName.SelectedIndex = 0;
            lbltempName.Text = "";
            cmbLabelName.Items.Clear();
        }

        private void rdbA_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
        }

        private void rdbB_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
        }

        private void rdbC_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
        }

        private void rdbd_CheckedChanged(object sender, EventArgs e)
        {
            if (rdbd.Checked == true)
            {
                rdbSO.Checked = true;
                gbInvoiceDetail.Visible = true;
                gbInvoiceDetail.Enabled = false;
                gbOrderDetail.Visible = false;
                gbOrderDetail.Enabled = false;
                Clear();

            }
            else
            {
                gbInvoiceDetail.Visible = false;
                gbInvoiceDetail.Enabled = false;
                gbOrderDetail.Visible = true;
                gbOrderDetail.Enabled = false;
            }


        }
        //if scan item is enter 
        private void txtcurrentscanitem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.Handled = true;
                FillGridForSelectedRows();
                txtlastscanitem.Text = txtcurrentscanitem.Text;
                txtcurrentscanitem.Text = "";
                checkboxcount(DataGVItems);

            }

        }
        //Fill the rows for selected checkbox
        private void FillGridForSelectedRows()
        {
            string strscanId = "";
            DataGVItems.Rows[0].Selected = false;

            foreach (DataGridViewRow dgvr in DataGVItems.Rows)
            {
                strscanId = (Convert.ToString(dgvr.Cells[4].Value).Substring((Convert.ToString(dgvr.Cells[4].Value)).IndexOf(":") + 1));
                if (txtcurrentscanitem.Text.ToString().ToLower() == strscanId.ToLower())
                {
                    dgvr.Cells[0].Value = true;
                    dgvr.DefaultCellStyle.ForeColor = Color.Black;//selected row backcolor/forecolor
                    EnableGrid(DataGVItems);
                    chkSelectAll.Enabled = true;
                    break;
                }
            }
        }
        //Disable grid record initially
        private void DisableGrid(DataGridView grid)
        {
            if (grid.Enabled == true) { grid.Enabled = false; }
            chkSelectAll.Enabled = false;
            grid.ForeColor = Color.Gray;
            foreach (DataGridViewColumn col in grid.Rows)
            {
                col.HeaderCell.Style.ForeColor = Color.Gray;

            }
        }
        //Toggle the checkbox status
        private void CheckBoxStatusChecked()
        {
            DataGridViewCheckBoxCell ch1 = new DataGridViewCheckBoxCell();
            ch1 = (DataGridViewCheckBoxCell)DataGVItems.Rows[DataGVItems.CurrentRow.Index].Cells[0];

            if (ch1.Value == null)
                ch1.Value = false;
            switch (ch1.Value.ToString())
            {
                case "True":
                    ch1.Value = false;
                    break;
                case "False":
                    ch1.Value = true;
                    break;
            }
        }

        //Enable grid records when scan item is enter in textbox and press enter
        private void EnableGrid(DataGridView grid)
        {

            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }

            foreach (DataGridViewRow dgvr in DataGVItems.Rows)
            {

                if (Convert.ToBoolean(dgvr.Cells[0].Value) == true)
                {

                    grid[2, dgvr.Index].ReadOnly = false;

                    dgvr.DefaultCellStyle.ForeColor = Color.Black;
                    DataGVItems.CurrentCell = DataGVItems.Rows[dgvr.Index].Cells[2];
                    DataGVItems.BeginEdit(true);

                    dgvr.Cells[2].Style.Font = new Font("Times New Roman", 12, FontStyle.Bold);
                    //break;


                }
                else
                {
                    grid[2, dgvr.Index].ReadOnly = true;

                }

            }

        }
        //This is to enable ToInvoice column to enter quantity
        private void DataGVItems_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            //add colindex 5 & 6 for edit columns in grid
            //7 and 8 index condition added date:21-Nov-2016
            // if (e.ColumnIndex != 2 && e.ColumnIndex != 0 && e.ColumnIndex != 1 && e.ColumnIndex != 5 && e.ColumnIndex != 6 && e.ColumnIndex != 7 && e.ColumnIndex != 8)
            //9 conditon added for new po item checkbox collection:PWH
            //change col index 6 to 10  : 08-Feb-2017
            //additonal check added for po receipt : Date 17-Feb-2017
            if ((rdbPO.Checked == true && rdbA.Checked == true) && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "0")
            {

                if (e.ColumnIndex != 2 && e.ColumnIndex != 0 && e.ColumnIndex != 1 && e.ColumnIndex != 10 && e.ColumnIndex != 7 && e.ColumnIndex != 8 && e.ColumnIndex != 9)
                {
                    e.Cancel = true;
                }
            }
            else if ((rdbPO.Checked == true && rdbA.Checked == true) && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("ShowPo") == "1") //condition added on 17-Feb-2017 for po multiple lbl qty and qty to print columns
            {
                if (e.ColumnIndex != 3 && e.ColumnIndex != 4 && e.ColumnIndex != 9)
                {
                    e.Cancel = true;
                }

            }// 12-Jun-2018 below condition added
             //commented below pack/units:Date 11-APR-2019
            else if ((rdbInvoice.Checked == true && rdbA.Checked == true) && lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("PackperUnits") == "Y")
            {
                if (e.ColumnIndex != 4 && e.ColumnIndex != 5 && e.ColumnIndex != 6) //12-APR-2019 --5
                {
                    e.Cancel = true;
                }
            }
            else
            {

                //columnIndex 12,13 added for SalesPrice and discount :16th Feb-2018
                //columnIndex 4 added : 12-Jun-2018
                if (e.ColumnIndex != 2 && e.ColumnIndex != 0 && e.ColumnIndex != 1 && e.ColumnIndex != 5 && e.ColumnIndex != 6 && e.ColumnIndex != 11 && e.ColumnIndex != 12 && e.ColumnIndex != 9 && e.ColumnIndex != 13) //change 10,11 to 11,12
                {
                    e.Cancel = true;
                }

            }

        }

        //To create inovoice for selected Items
        private void btnsubmit_Click(object sender, EventArgs e)
        {

            bool blnInvoiceQty = false;
            lobjDataExtension = null;
            objInvoice = new clsInvoice();
            DialogResult result = new DialogResult();
            Hashtable objlastscanItem = new Hashtable();
            ArrayList alSOLineItems = new ArrayList();
            objlastscanItem.Clear();
            objSalesOrderLine = new clsSalesOrderLine();
            bool blnMessageShown = false;
            if (DataGVItems.Enabled == true)
            {

                foreach (DataGridViewRow dgvr in DataGVItems.Rows)
                {
                    if (Convert.ToBoolean(dgvr.Cells[0].Value) == true)
                    {
                        if (Convert.ToDouble(dgvr.Cells[1].Value) < Convert.ToDouble(dgvr.Cells[2].Value) && !blnMessageShown)
                        {
                            result = MessageBox.Show("To Invoice Quantity is greater than Sales Order Quantity.", "Label Connector", MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
                            blnMessageShown = true;

                            if (result == DialogResult.OK)
                            {
                                blnInvoiceQty = true;
                                objlastscanItem.Add(dgvr.Cells[4].Value.ToString().Trim(), Convert.ToDouble(dgvr.Cells[2].Value));
                            }
                        }
                        else
                        {
                            blnInvoiceQty = true;
                            objlastscanItem.Add(dgvr.Cells[4].Value.ToString().Trim(), Convert.ToDouble(dgvr.Cells[2].Value));
                        }
                    }
                }

                if (blnInvoiceQty)
                {
                    if (objlastscanItem.Count > 0)
                    {
                        if (lstrQBFileMode == "Close")
                        {
                            alSOLineItems = objSalesOrderLine.GetSOLine(objSalesOrder.RefNumber, lQBSessionManager, moQuickBooksAccountConfig);
                            objInvoice.CreateSalesInvoice(alSOLineItems, objlastscanItem, lQBSessionManager, moQuickBooksAccountConfig);
                        }
                        else
                        {
                            alSOLineItems = objSalesOrderLine.GetSOLine(objSalesOrder.RefNumber, string.Empty);
                            objInvoice.CreateSalesInvoice(alSOLineItems, objlastscanItem);
                        }
                    }
                    else
                        MessageBox.Show("Please select the Invoice Item.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
            }
        }
        //Enable Grid record manually by checking the checkbox 
        private void EnableGridManually(DataGridView grid)
        {

            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {

                blnvar = Convert.ToBoolean(DataGVItems[0, Row.Index].Value);

                if (blnvar)
                {
                    grid[2, Row.Index].ReadOnly = false;

                    Row.DefaultCellStyle.ForeColor = Color.Black;

                    DataGVItems.CurrentCell = DataGVItems.Rows[Row.Index].Cells[2];
                    DataGVItems.BeginEdit(true);
                    Row.Cells[2].Style.Font = new Font("Times New Roman", 12, FontStyle.Bold);


                }
                else
                {
                    grid[2, Row.Index].ReadOnly = true;
                    Row.Cells[2].Style.Font = new Font("Times New Roman", 12, FontStyle.Regular);
                }

            }


        }

        private void ParentItemRowDisable(DataGridView grid)
        {

            bool blnvar = false;
            //if (grid.Enabled == false) { grid.Enabled = true; }
            //if (grid.ReadOnly == true) { grid.ReadOnly = false; }


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {

                blnvar = Convert.ToBoolean(DataGVItems[0, Row.Index].Value);

                if (blnvar)
                {

                    if (grid["GroupItemType", Row.Index].Value != null)
                    {
                        if (grid["GroupItemType", Row.Index].Value.ToString() == "P")
                        {
                            grid[0, Row.Index].Value = false;
                            grid[0, Row.Index].ReadOnly = true;

                        }
                    }


                    // grid[2, Row.Index].ReadOnly = false;

                    //Row.DefaultCellStyle.ForeColor = Color.Black;

                    // DataGVItems.CurrentCell = DataGVItems.Rows[Row.Index].Cells[0];
                    // DataGVItems.BeginEdit(true);
                    //Row.Cells[0].Style.Font = new Font("Times New Roman", 12, FontStyle.Bold);


                }
                else
                {
                    // grid[2, Row.Index].ReadOnly = true;
                    // Row.Cells[2].Style.Font = new Font("Times New Roman", 12, FontStyle.Regular);
                }

            }


        }

        private void Editquantitytoprint(DataGridView grid)
        {
            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            if (!blnvar)
            {
                if (rdbSO.Checked == true && rdbA.Checked == true)
                {
                    if (grid.Rows[grid.CurrentCell.RowIndex].Cells["GroupItemType"].Value != null) //27-Feb-2020 for parent item uncheck
                    {
                        return;
                    }

                }
                MessageBox.Show("Please select checkbox to edit label quantity and/or quanity on label", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;

            }


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {
                lntcurrrowndx = Row.Index;



                if (lntcurrrowndx == lntselrowndx)
                {

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineDesc"].ReadOnly = false;
                    //Edit option added for salesprice and discount: 18th-Jan-2018
                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = false;

                    grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"];

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.BackColor = Color.DarkGray;
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.BackColor = Color.DarkGray;
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineDesc"].Style.BackColor = Color.DarkGray;

                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                    if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Value) != "")
                    {
                        grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.BackColor = Color.DarkGray;
                    }
                    if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Value) != "")
                    {
                        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.BackColor = Color.DarkGray;
                    }

                    grid.BeginEdit(true);
                }
                else
                {

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineDesc"].ReadOnly = true;

                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = true;
                    // grid.Rows[grid.CurrentCell.RowIndex].Cells["SalesOrderLineQuantityToPrint"].Style.ForeColor = Color.Red;
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                }



            }


        }

        private void EditSRquantitytoprint(DataGridView grid)
        {
            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            if (!blnvar)
            {
                if (rdbSR.Checked == true && rdbA.Checked == true)
                {
                    if (grid.Rows[grid.CurrentCell.RowIndex].Cells["GroupItemType"].Value != null) //27-Feb-2020 for parent item uncheck
                    {
                        return;
                    }

                }
                MessageBox.Show("Please select checkbox to edit label quantity and/or quanity on label", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;

            }


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {
                lntcurrrowndx = Row.Index;



                if (lntcurrrowndx == lntselrowndx)
                {

                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityToPrint"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityOnLabel"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineDesc"].ReadOnly = false;
                    //Edit option added for salesprice and discount: 18th-Jan-2018
                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = false;

                    grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityToPrint"];

                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityToPrint"].Style.BackColor = Color.DarkGray;
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityOnLabel"].Style.BackColor = Color.DarkGray;
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineDesc"].Style.BackColor = Color.DarkGray;

                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                    if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Value) != "")
                    {
                        grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.BackColor = Color.DarkGray;
                    }
                    if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Value) != "")
                    {
                        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.BackColor = Color.DarkGray;
                    }

                    grid.BeginEdit(true);
                }
                else
                {

                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityToPrint"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityOnLabel"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineDesc"].ReadOnly = true;

                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = true;
                    // grid.Rows[grid.CurrentCell.RowIndex].Cells["SalesOrderLineQuantityToPrint"].Style.ForeColor = Color.Red;
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["SalesReceiptLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                }



            }


        }
        private void EditSalesPriceColumn(DataGridView grid)
        {
            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            //int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            if (!blnvar)
            {
                //MessageBox.Show("Please select checkbox to edit SalesPrice", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;

            }
            grid.Rows[lntselrowndx].Cells["SalesPrice"].ReadOnly = false;
            grid.Rows[lntselrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
            if (Convert.ToString(grid.Rows[lntselrowndx].Cells["SalesPrice"].Value) != "")
            {
                grid.Rows[lntselrowndx].Cells["SalesPrice"].Style.BackColor = Color.DarkGray;
               // grid.Rows[lntselrowndx].Cells["MarkUpPrice"].Style.BackColor = Color.Empty;
            }

            grid.BeginEdit(true);

            //foreach (DataGridViewRow Row in DataGVItems.Rows)
            //{
            //    lntcurrrowndx = Row.Index;



            //    if (lntcurrrowndx == lntselrowndx)
            //    {

            //       // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].ReadOnly = false;
            //       // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = false;

            //        //Edit option added for salesprice and discount: 18th-Jan-2018
            //        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = false;
            //       // grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = false;

            //       // grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"];

            //       // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
            //       // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

            //      //  grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.BackColor = Color.DarkGray;
            //       // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.BackColor = Color.DarkGray;

            //        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
            //       // grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

            //        //if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Value) != "")
            //        //{
            //        //    grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.BackColor = Color.DarkGray;
            //        //}
            //        if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Value) != "")
            //        {
            //            grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.BackColor = Color.DarkGray;
            //        }

            //        grid.BeginEdit(true);
            //    }
            //    else
            //    {

            //       // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].ReadOnly = true;
            //       // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = true;

            //        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = true;
            //       // grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = true;

            //       grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
            //        grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.BackColor = Color.White;
            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

            //        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
            //        //grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

            //    }



            //}


        }
        private void EditSMarkUpPriceColumn(DataGridView grid)
        {
            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            // int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            if (!blnvar)
            {
                //MessageBox.Show("Please select checkbox to edit Adjusted Label Price", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;

            }

            grid.Rows[lntselrowndx].Cells["MarkUpPrice"].ReadOnly = false;
            grid.Rows[lntselrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
            if (Convert.ToString(grid.Rows[lntselrowndx].Cells["MarkUpPrice"].Value) != "")
            {
                grid.Rows[lntselrowndx].Cells["MarkUpPrice"].Style.BackColor = Color.DarkGray;
               // grid.Rows[lntselrowndx].Cells["SalesPrice"].Style.BackColor = Color.Empty;
            }

            grid.BeginEdit(true);

            //foreach (DataGridViewRow Row in DataGVItems.Rows)
            //{
            //    lntcurrrowndx = Row.Index;



            //    if (lntcurrrowndx == lntselrowndx)
            //    {

            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].ReadOnly = false;
            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = false;

            //        //Edit option added for salesprice and discount: 18th-Jan-2018
            //       // grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = false;
            //         grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = false;

            //        // grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"];

            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

            //        //  grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.BackColor = Color.DarkGray;
            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.BackColor = Color.DarkGray;

            //       // grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
            //         grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

            //        if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Value) != "")
            //        {
            //            grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.BackColor = Color.DarkGray;
            //        }
            //        //if (Convert.ToString(grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Value) != "")
            //        //{
            //        //    grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.BackColor = Color.DarkGray;
            //        //}

            //        grid.BeginEdit(true);
            //    }
            //    else
            //    {

            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].ReadOnly = true;
            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = true;

            //        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].ReadOnly = true;
            //        // grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].ReadOnly = true;

            //        //grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
            //        // grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

            //        grid.Rows[lntcurrrowndx].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
            //        //grid.Rows[lntcurrrowndx].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

            //    }



            //}


        }

        private void EditInvoiceQuantitytoprint(DataGridView grid)
        {
            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            if (!blnvar)
            {
                MessageBox.Show("Please select checkbox to edit label quantity and/or quanity on label", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;

            }


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {
                lntcurrrowndx = Row.Index;

                if (lntcurrrowndx == lntselrowndx)
                {

                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineDesc"].ReadOnly = false;

                    grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"];

                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    //Style.BackColor = Color.Gainsboro;

                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.BackColor = Color.Gainsboro;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.BackColor = Color.Gainsboro;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineDesc"].Style.BackColor = Color.Gainsboro;

                    grid.BeginEdit(true);
                }
                else
                {

                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineDesc"].ReadOnly = true;
                    // grid.Rows[grid.CurrentCell.RowIndex].Cells["SalesOrderLineQuantityToPrint"].Style.ForeColor = Color.Red;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.BackColor = Color.White;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.BackColor = Color.White;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineDesc"].Style.BackColor = Color.White;

                }



            }

        }

        private void EditQuantityperContainer(DataGridView grid)
        {

            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            if (!blnvar)
            {
                MessageBox.Show("Please select checkbox to edit invoice quanity", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;

            }


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {
                lntcurrrowndx = Row.Index;

                if (lntcurrrowndx == lntselrowndx)
                {

                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].ReadOnly = false;


                    //grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantity"]; //12-APR-2019
                    grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"];

                    // grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Bold); //12-APR-2019
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.BackColor = Color.Gainsboro;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.BackColor = Color.Gainsboro;

                    grid.BeginEdit(true);
                }
                else
                {

                    // grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantity"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].ReadOnly = true;
                    // grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Regular); //12-APR-2019
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    //  grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantity"].Style.BackColor = Color.White;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityToPrint"].Style.BackColor = Color.White;
                    grid.Rows[lntcurrrowndx].Cells["InvoiceLineQuantityOnLabel"].Style.BackColor = Color.White;


                }



            }



        }


        private void EditPOquantitytoprint(DataGridView grid)
        {
            bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            if (!blnvar)
            {
                MessageBox.Show("Please select checkbox to edit label quantity and/or quanity on label", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;

            }


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {
                lntcurrrowndx = Row.Index;



                if (lntcurrrowndx == lntselrowndx)
                {

                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].ReadOnly = false;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineDesc"].ReadOnly = false;

                    grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"];

                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].Style.BackColor = Color.Gainsboro;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].Style.BackColor = Color.Gainsboro;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineDesc"].Style.BackColor = Color.Gainsboro;

                    grid.BeginEdit(true);
                }
                else
                {

                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].ReadOnly = true;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineDesc"].ReadOnly = true;
                    // grid.Rows[grid.CurrentCell.RowIndex].Cells["SalesOrderLineQuantityToPrint"].Style.ForeColor = Color.Red;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineDesc"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].Style.BackColor = Color.White;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].Style.BackColor = Color.White;
                    grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineDesc"].Style.BackColor = Color.White;

                }



            }


        }


        private void Editsopackagingquantity(DataGridView grid)
        {
            //bool blnvar = false;
            if (grid.Enabled == false) { grid.Enabled = true; }
            if (grid.ReadOnly == true) { grid.ReadOnly = false; }
            int lntcurrrowndx = 0;
            int lntselrowndx = 0;

            lntselrowndx = grid.CurrentCell.RowIndex;


            //blnvar = Convert.ToBoolean(grid.Rows[grid.CurrentCell.RowIndex].Cells[0].Value);
            //if (!blnvar)
            //{
            //    MessageBox.Show("Please select checkbox to edit  quantity", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            //    return;

            //}


            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {
                lntcurrrowndx = Row.Index;


                if (lntcurrrowndx == lntselrowndx)
                {

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantity"].ReadOnly = false;


                    grid.CurrentCell = grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantity"];

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Bold);

                    // grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].Style.BackColor = Color.Gainsboro;
                    // grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].Style.BackColor = Color.Gainsboro;

                    grid.BeginEdit(true);
                }
                else
                {

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantity"].ReadOnly = true;

                    grid.Rows[lntcurrrowndx].Cells["SalesOrderLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                    // grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityToPrint"].Style.BackColor = Color.White;
                    // grid.Rows[lntcurrrowndx].Cells["PurchaseOrderLineQuantityOnLabel"].Style.BackColor = Color.White;

                }



            }


        }


        //clear the selected check boxes and  lastscanitem
        private void btnitemclear_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow Row in DataGVItems.Rows)
            {
                if (Convert.ToBoolean(Row.Cells[0].Value) == true)
                {
                    Row.Cells[0].Value = false;
                    Row.Cells[2].Style.Font = new Font("Times New Roman", 9, FontStyle.Regular);
                }
            }
            if (txtlastscanitem.Text != null || txtlastscanitem.Text != "") { txtlastscanitem.Text = ""; }
        }
        //To ensure ToInvoice cell conatain valid numeric value.
        private void DataGVItems_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            DataGridViewTextBoxCell cell = DataGVItems[e.ColumnIndex, e.RowIndex] as DataGridViewTextBoxCell;
            if (e.ColumnIndex == 2)
            {
                if (cell != null && rdbd.Checked == true)
                {
                    char[] chars = e.FormattedValue.ToString().ToCharArray();
                    foreach (char c in chars)
                    {
                        if (char.IsDigit(c) == false)
                        {
                            MessageBox.Show("Please enter digits only", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            e.Cancel = true;
                            break;
                        }
                    }
                }
            }
            //14-Mar-2018
            //if (e.RowIndex != -1 && e.ColumnIndex != -1)
            //{
            //    DataGVItems["SalesPrice", e.RowIndex].Style.BackColor = Color.Empty;
            //}
        }
        //Handle enter key on GetOrder button
        private void txtOrderNumber_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar.Equals(Convert.ToChar(13))) { btnGetOrder_Click(sender, e); }

        }


        private void checkboxcount(DataGridView dgv)
        {
            int chkcount = 0;
            foreach (DataGridViewRow dgvr in dgv.Rows)
            {
                if (Convert.ToBoolean(dgvr.Cells[0].Value) == true)
                {
                    chkcount += 1;
                }
            }
            if (dgv.Rows.Count == chkcount)
                chkSelectAll.Checked = true;
        }

        private void quickBooksSettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            LabelConnector.LabelConnectorSettings lobjLabelConnectorSettings = new LabelConnector.LabelConnectorSettings();
            lobjLabelConnectorSettings.ShowDialog();
        }

        private void cmbLabelPrinter_SelectedIndexChanged(object sender, EventArgs e)
        {
         
            //if (cmbLabelPrinter.SelectedItem.ToString() != "Select Printer")
            //    SetDefaultPrinter(cmbLabelPrinter.SelectedItem.ToString());
        }

        private void selectTouchScreenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            lobjQBConfiguration.SaveScreenSettings(false);

            //open new form
            // LabelConnector.frmPrintLabelTuchScreen lobjLabelConnectorSettings = new LabelConnector.frmPrintLabelTuchScreen();
            // lobjLabelConnectorSettings.Dock = DockStyle.Fill;
            // lobjLabelConnectorSettings.Show();
            // this.Close();






        }

        private void selectPCScreenToolStripMenuItem_Click(object sender, EventArgs e)
        {
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            lobjQBConfiguration.SaveScreenSettings(true);
        }

        private void mnuConfiguration_Click(object sender, EventArgs e)
        {
            frmLabelConfig objLable = frmLabelConfig.GetInstance();
            objLable.ShowDialog();
        }

        private void mnuExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btnClearAll_Click(object sender, EventArgs e)
        {
            Clear();
            txtOrderNumber.Text = string.Empty;
        }

        private void txtOrderNumber_TextChanged(object sender, EventArgs e)
        {
            Clear();
        }

        private void dataAccessSettingToolStripMenuItem_Click(object sender, EventArgs e)
        {

            LabelConnector.QBDataAccessSetting lobjQBDataAccessSettings = new LabelConnector.QBDataAccessSetting();
            lobjQBDataAccessSettings.ShowDialog();
        }

        private void DataGVItems_RowHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            int lintAllowedSelectedRows = 0;
            //below condition to check the checkbox status
            int intPrintQuantity = 0;
            int intInvoiceQty = 0;
            if (e.ColumnIndex == 0 && rdbd.Checked == true)
            {
                CheckBoxStatusChecked();
                EnableGridManually(DataGVItems);
                checkboxcount(DataGVItems);
                return;

            }
            if (e.RowIndex != -1 && e.ColumnIndex != -1)
            {
                if (e.ColumnIndex != 0)
                {
                    if (DataGVItems.CurrentRow.Cells[e.ColumnIndex].Value.ToString() == "+")
                    {
                        intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value);
                        intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value);
                        txtQtyOnLabel.Text = GetPreviousLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value), ref intPrintQuantity).ToString();
                        DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                        if (intInvoiceQty == 0 || intPrintQuantity == 0)
                            DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = 0;
                        else
                            DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                        txtQtyToPrint.Text = intPrintQuantity.ToString();
                    }

                    if (DataGVItems.CurrentRow.Cells[e.ColumnIndex].Value.ToString() == "-")
                    {
                        intPrintQuantity = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value);
                        intInvoiceQty = Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value);
                        txtQtyOnLabel.Text = GetNextLabelQtyToPrint(Convert.ToInt32(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value), ref intPrintQuantity).ToString();
                        DataGVItems.CurrentRow.Cells["InvoiceLineQuantityToPrint"].Value = Convert.ToString(intPrintQuantity);

                        if (intInvoiceQty == 0 || intPrintQuantity == 0)
                            DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = 0;
                        else
                            DataGVItems.CurrentRow.Cells["InvoiceLineQuantityOnLabel"].Value = Convert.ToString(intInvoiceQty / intPrintQuantity);

                        txtQtyToPrint.Text = intPrintQuantity.ToString();
                    }

                }
                //below condition added to check rdbd condtion
                if (rdbA.Checked == true || rdbC.Checked == true || rdbd.Checked == true)
                {
                    if (e.ColumnIndex == 0)
                    {
                        //if (rdbC.Checked == true)////six item selection for so packaging commented date:23-Mar-2020
                        //    lintAllowedSelectedRows = 6 > DataGVItems.Rows.Count ? DataGVItems.Rows.Count : 6;
                        //else
                        lintAllowedSelectedRows = DataGVItems.Rows.Count;

                        if (Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value) == "True")
                        {
                            DataGVItems.CurrentRow.Cells[0].Value = "False";
                            chkSelectAll.Checked = false;
                            cnt--;
                            if (cnt == 0)
                            {
                                btnPrint.Enabled = false;
                            }
                        }
                        else //six item selection commented for so packaging:23-Mar-2020
                        {
                            DataGVItems.CurrentRow.Cells[0].Value = "True";
                            cnt = 0;
                            for (int i = 0; i < DataGVItems.Rows.Count; i++)
                            {
                                if (Convert.ToString(DataGVItems.Rows[i].Cells[0].Value) == "True")
                                {
                                    btnPrint.Enabled = true;
                                    cnt = cnt + 1;
                                    //if (cnt > lintAllowedSelectedRows)
                                    //{
                                    //    DataGVItems.CurrentRow.Cells[0].Value = "False";
                                    //    MessageBox.Show("Only six lineitems selection is allowed in packaging option.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    //    return;
                                    //}
                                }
                            }
                            if (cnt == lintAllowedSelectedRows)
                            {
                                chkSelectAll.Checked = true;
                            }
                            else
                            {
                                chkSelectAll.Checked = false;
                            }
                        }
                    }

                    else
                    {
                        if (rdbC.Checked == false && rdbA.Checked == false)
                        {
                            if (Convert.ToString(DataGVItems.CurrentRow.Cells[1].Value) == "")
                            {
                                txtQtyOnLabel.Text = "";
                            }
                            else
                            {

                                txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[1].Value);
                            }
                        }
                        else if (rdbA.Checked == false)
                        {
                            if (Convert.ToString(DataGVItems.CurrentRow.Cells[2].Value) == "")
                            {
                                txtQtyOnLabel.Text = "";
                            }
                            else
                            {
                                txtQtyOnLabel.Text = "1";
                            }
                        }
                    }
                    // if (e.ColumnIndex == 3)
                    // { DataGVItems.ReadOnly = false; MessageBox.Show(Convert.ToString(DataGVItems.CurrentRow.Cells[3].Value)); }
                }
                else
                {
                    //txtQtyOnLabel.Text = "1";//Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                    //txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                    txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value); //Srinivas changes on 26-Feb-2015 
                    txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                }
            }
            else
            {
                //txtQtyOnLabel.Text = "1";//Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                //txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                if (rdbB.Checked == true && rdbPO.Checked == true) //if single po is checked : 17-Feb-2017
                {
                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y")
                    {
                        txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value); //Srinivas changes on 26-Feb-2015 
                        txtQtyOnLabel.Text = "1"; //Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value); 16-Feb-2017
                    }
                    else
                    {
                        txtQtyToPrint.Text = "1";
                        txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                    }
                }
                else if (invpackaging.Checked == true && rdbInvsingle.Checked == true)
                {
                    txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells["InvoiceLineQuantity"].Value);


                }
                else if (rdbSO.Checked == true && rdbC.Checked == true)
                {
                    txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[1].Value);
                    txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[1].Value);

                }
                else
                {
                    txtQtyToPrint.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);
                    txtQtyOnLabel.Text = Convert.ToString(DataGVItems.CurrentRow.Cells[0].Value);

                }
            }
        }

        //filter items having custom field with label value 'No'
        private void btnfilterlabel_Click(object sender, EventArgs e)
        {
            int intError = 0;

            lobjQBConfiguration = new QBConfiguration();

            ArrayList lobjCustomFieldCheck = new ArrayList();
            //if (txtOrderNumber.Text != null || txtOrderNumber.Text != "")
            if (txtOrderNumber.Text.Trim() != "")
            {
                if (DataGVItems.Rows.Count > 0)
                {
                    if (rdbB.Checked == true)
                    {
                        cellindex = 4;
                    }
                    else
                    {
                        cellindex = 10; //9 prev
                    }
                    lstrFilterDisplay = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FilterDisplay");
                    //find label cutsom field and match value to 'No'
                    //check condtion for open or close QuickBook Connection
                    if (lstrFilterDisplay != "")
                    {
                        //MessageBox.Show("FilterValue : " + lstrFilterDisplay , "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");
                        if (lstrQBFileMode == "Close")
                        {
                            lobjCustomFieldCheck = objInvoiceLine.FilterCustomField(txtOrderNumber.Text, lstrFilterDisplay, lQBSessionManager, moQuickBooksAccountConfig);
                        }
                        else
                        {
                            lobjCustomFieldCheck = objInvoiceLine.FilterCustomField(txtOrderNumber.Text, lstrFilterDisplay);
                        }

                        if (lobjCustomFieldCheck != null && lobjCustomFieldCheck.Count > 0)
                        {
                            intGridRowCount1 = Convert.ToInt32(DataGVItems.Rows.Count);
                            foreach (clsInvoiceLine objInvItem in lobjCustomFieldCheck)
                            {
                                if (objInvItem.IsValueFound)
                                {
                                    lstrTxnLineId = objInvItem.InvoiceLineTxnLineID.ToString();
                                    //Delete record from DataGrid base on InvoiceLineTxnLineID
                                    for (int i = 0; i < DataGVItems.Rows.Count; i++)
                                    {
                                        if (Convert.ToString(DataGVItems.Rows[i].Cells[cellindex].Value) == lstrTxnLineId.Trim())
                                        {
                                            DataGVItems.Rows.RemoveAt(i);

                                        }
                                    }

                                }
                            }
                            intGridRowCount2 = Convert.ToInt32(DataGVItems.Rows.Count);
                        }
                        if (intGridRowCount1 == intGridRowCount2)
                        {
                            intError = 3;
                        }
                        else
                        {
                            intError = 4;
                        }
                    }
                    if (intError == 0)
                        intError = 2;
                }
                if (intError == 0)
                    intError = 1;
            }
            if (intError == 0)
                intError = 1;
            if (intError == 1)
            {
                MessageBox.Show("Please Get Invoice data and then filter", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else if (intError == 2)
            {
                MessageBox.Show("Filter Value in App Config file is Blank. Please set filter value", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else if (intError == 3)
            {
                MessageBox.Show("Filter value in settings not found in QuickBooks", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else if (intError == 4)
            {
                //MessageBox.Show("No. of Item filtered: " & intGridRowCount1 - intGridRowCount2, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }

        private void btnPrintWL_Click(object sender, EventArgs e)
        {
            if (cmbLabelPrinter.SelectedIndex > 0)
            {
                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Printing Started...");
                foreach (Process clsProcess in Process.GetProcesses())
                {
                    if (clsProcess.ProcessName.StartsWith("bartend"))
                    {
                        clsProcess.Kill();
                        clsProcess.WaitForExit();
                    }
                }
                BarTender.Application BtApp = default(BarTender.Application);
                BarTender.Format BtFormat = default(BarTender.Format);
                BarTender.SubString BtSubString = default(BarTender.SubString);

                string btNamedSubString = "";
                //string strPrintQuery = "";
                ////Dim strProdLblPath As String = System.Configuration.ConfigurationManager.AppSettings("LabelPath").ToString()
                //string strProdLblPath = "";
                string strProdPrinter = "";
                string strWeatherLabel = "";

                XmlDocument xmlDoc = new XmlDocument();
                // Uses reflection to find the location of the config file.
                System.Reflection.Assembly Asm = System.Reflection.Assembly.GetExecutingAssembly();
                System.IO.FileInfo FileInfo = new System.IO.FileInfo(Asm.Location + ".config");
                if (!FileInfo.Exists)
                {
                    throw new Exception("Missing config file");
                }
                xmlDoc.Load(FileInfo.FullName);
                // Finds the right node and change it to the new value.
                System.Xml.XmlNode Node = null;
                XmlNode appsettingNodes = xmlDoc.SelectSingleNode("configuration/appSettings");

                foreach (XmlNode Node_loopVariable in appsettingNodes)
                {
                    Node = Node_loopVariable;
                    // skip any comments
                    if (Node.Name == "add")
                    {
                        if (Node.Attributes.GetNamedItem("key").Value == "WeatherLabelPath")
                        {
                            strWeatherLabel = Node.Attributes.GetNamedItem("value").Value;
                        }
                    }
                }
                strProdPrinter = cmbLabelPrinter.Text;
                int intQuantity = 0;
                string lstrPropertyValue = string.Empty;
                string QuantityToPrintOnLabel = string.Empty;

                BtApp = new BarTender.ApplicationClass();
                QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Batrender Object is Created...");
                BtFormat = new BarTender.Format();
                // ----------- Code Start Printing Weather Label -----------------

                //if (ckbWeatherLabel.Checked == true)
                //{
                //    int k = 1;
                //    BtFormat = BtApp.Formats.Open(strWeatherLabel, true, strProdPrinter);
                //    while (k <= BtFormat.NamedSubStrings.Count)
                //    {
                //        BtSubString = BtFormat.NamedSubStrings.GetSubString(k);

                //        if (BtSubString.Name == "ShipAddressAddr1") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblStoreNameValue.Text.ToString() + '\r' + '\n';
                //        if (BtSubString.Name == "RefNumber") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblInvoiceNumberValue.Text.ToString() + '\r' + '\n';
                //        if (BtSubString.Name == "LowTemp") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblLowTempValue.Text.ToString() + '\r' + '\n';
                //        if (BtSubString.Name == "HighTemp") btNamedSubString += BtSubString.Name + '\r' + '\n' + lblHighTempValue.Text.ToString() + '\r' + '\n';
                //        k++;
                //    }
                //    if (btNamedSubString != string.Empty)
                //    {
                //        string strDelimiter = string.Concat('\r', '\n');
                //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " String to be Printed:-" + btNamedSubString);
                //        BtFormat.NamedSubStrings.SetAll(btNamedSubString, strDelimiter);
                //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " No Of copies to be printed:-" + intQuantity.ToString());
                //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + "  Printer Name:-" + strProdPrinter.ToString());
                //        BtFormat.IdenticalCopiesOfLabel = 1;//Convert.ToInt32(intQuantity);
                //        BtFormat.PrintOut(false, false);
                //        QBHelper.WriteLog("LabelConnector:Time:-" + DateTime.Now.ToString() + " Substring values are send to Bartender for printing...");
                //    }
                //}

                btNamedSubString = "";
                BtFormat.Close();
                BtApp.Quit();


                //------------Code End for Printing Weather Label---------------

            }

            else
            {
                MessageBox.Show("Select Printer to Print the label", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }

        }

        private void ckbWeatherLabel_CheckedChanged(object sender, EventArgs e)
        {

            //if (ckbWeatherLabel.Checked == true)
            //{
            //    btnPrintWL.Enabled = true;
            //}
            //else
            //{
            //    btnPrintWL.Enabled = false;
            //}

        }

        private void weatherOnlyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (ActiveMdiChild != null)
                ActiveMdiChild.Close();

            if (System.Windows.Forms.Application.OpenForms["FrmPrintWeatherOnly"] == null)
            {
                LabelConnector.FrmPrintWeatherOnly lobjLabelConnectorSettings = new LabelConnector.FrmPrintWeatherOnly();
                pnlhead.Visible = false;
                lobjLabelConnectorSettings.WeatherOnlyOption = 1;
                lobjLabelConnectorSettings.Text = "Invoice Weather Only";
                lobjLabelConnectorSettings.MdiParent = this;
                lobjLabelConnectorSettings.Dock = DockStyle.Fill;
                lobjLabelConnectorSettings.Show();


            }





        }

        public void DisposeAllButThis()
        {
            foreach (Form frm in this.MdiChildren)
            {
                if (!frm.Focused)
                {
                    frm.Close();
                }
            }


        }

        private void standardToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //if (System.Windows.Forms.Application.OpenForms["FrmPrintWeatherOnly"] != null)
            //{

            //}


            DisposeAllButThis();

        }

        private void salesOrderWeatherOnlyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (ActiveMdiChild != null)
                ActiveMdiChild.Close();

            if (System.Windows.Forms.Application.OpenForms["FrmPrintWeatherOnly"] == null)
            {
                LabelConnector.FrmPrintWeatherOnly lobjLabelConnectorSettings = new LabelConnector.FrmPrintWeatherOnly();
                pnlhead.Visible = false;
                lobjLabelConnectorSettings.WeatherOnlyOption = 2;
                lobjLabelConnectorSettings.Text = "Sales Order Weather Only";
                lobjLabelConnectorSettings.MdiParent = this;
                lobjLabelConnectorSettings.Dock = DockStyle.Fill;
                lobjLabelConnectorSettings.Show();
            }

        }

        private void tsmenuPrintByItem_Click(object sender, EventArgs e)
        {
            //check if application is in trial period
            if (!string.IsNullOrEmpty(strTrialmodeDuration))
            {

                MessageBox.Show(strTrialmodeDuration, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            blnconnecheck = lobjitem.CheckQuickBooksConnection();
            if (blnconnecheck == true)
            {
                // Set cursor as hourglass
                Cursor.Current = Cursors.WaitCursor;
                // System.Windows.Forms.Application.DoEvents();
                Thread.Sleep(5000);

                if (ActiveMdiChild != null)
                    ActiveMdiChild.Close();

                if (System.Windows.Forms.Application.OpenForms["FrmPrintbyItem"] == null)
                {
                    LabelConnector.FrmPrintbyItem lobjLabelConnectorSettings = new LabelConnector.FrmPrintbyItem();
                    pnlhead.Visible = false;

                    //lobjLabelConnectorSettings.Text = "Print by Item";
                    lobjLabelConnectorSettings.MdiParent = this;
                    lobjLabelConnectorSettings.Dock = DockStyle.Fill;

                    lobjLabelConnectorSettings.Show();
                }
            }
            else
            {
                MessageBox.Show("Please Open QuickBooks Company file", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            }

        }

        private void packageItemPrintSettingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            PackagingSetting pckstt = new PackagingSetting();
            pckstt.ShowDialog();

        }

        private void DataGVItems_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            e.Control.KeyPress -= new KeyPressEventHandler(Column1_KeyPress);//7 index added to for po multiple col lbl on qty
                                                                             //col index 3 & 4 for po multiple and column index 7 and 8 added for po receipt added : Date 17-Feb-2017
            if (DataGVItems.CurrentCell.ColumnIndex == 3 || DataGVItems.CurrentCell.ColumnIndex == 4 || DataGVItems.CurrentCell.ColumnIndex == 5 || DataGVItems.CurrentCell.ColumnIndex == 6 || DataGVItems.CurrentCell.ColumnIndex == 7 || DataGVItems.CurrentCell.ColumnIndex == 8) //Desired Column
            {
                TextBox tb = e.Control as TextBox;
                if (tb != null)
                {
                    tb.KeyPress += new KeyPressEventHandler(Column1_KeyPress);
                }
            }
        }

        private void Column1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }
        }

        private void invoicePrintModeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // frmInvoicePrintModeConfig lobjinvoprintmode = new frmInvoicePrintModeConfig();
            // lobjinvoprintmode.ShowDialog();


            frmInvoicePrintModeConfig lobjinvoprintmode = frmInvoicePrintModeConfig.GetInstance();
            lobjinvoprintmode.ShowDialog();


        }

        private void divisionByQtyContainerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //FrmDivQuantitySetting lbojdiv = new FrmDivQuantitySetting();
            //lbojdiv.ShowDialog();
            FrmDivQuantitySetting lbojdiv = FrmDivQuantitySetting.GetInstance();
            lbojdiv.ShowDialog();

        }



        private ArrayList GetFilteredInvoicelist(string pstrFromdate, string pstrTodate)
        {

            ArrayList alData = null;
            lobjQBConfiguration = new QBConfiguration();
            lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");

            try
            {
                objInvoice = new clsInvoice();
                if (lstrQBFileMode == "Close")
                {
                    //  alData = objInvoice.GetInvoiceListPackaging(pstrFromdate, pstrTodate, lQBSessionManager, moQuickBooksAccountConfig);
                }
                else
                {
                    alData = objInvoice.GetFilteredInvoices(pstrFromdate, pstrTodate); //05-July-2019

                }
                // pobjinvcustomer = listinvcust;

                return alData;
            }
            catch (Exception ex)
            {

                throw;
                return null;
            }
            finally
            {

            }



        }

        //Get Match invoices for selected customer
        private ArrayList GetMatchInvoicelist(string pstrFromdate, string pstrTodate, string pstritemcustomfieldvalue, bool isdefalutqtyoption, List<clsInvoiceLine.Itemcustomfields> pobjfilterinvcustomerlist)
        {

            ArrayList alData = null;
            lobjQBConfiguration = new QBConfiguration();
            lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");

            try
            {
                objInvoice = new clsInvoice();
                if (lstrQBFileMode == "Close")
                {
                    //  alData = objInvoice.GetInvoiceListPackaging(pstrFromdate, pstrTodate, lQBSessionManager, moQuickBooksAccountConfig);
                }
                else
                {
                    alData = objInvoice.GetInvoicesForMatchCustomer(pstrFromdate, pstrTodate, pstritemcustomfieldvalue, isdefalutqtyoption, pobjfilterinvcustomerlist); //05-July-2019

                }
                // pobjinvcustomer = listinvcust;

                return alData;
            }
            catch (Exception ex)
            {

                throw;
                return null;
            }
            finally
            {

            }



        }

        private ArrayList GetFilteredSolist(string pstrFromdate, string pstrTodate)
        {

            ArrayList alData = null;
            lobjQBConfiguration = new QBConfiguration();
            lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");

            try
            {

                objSalesOrder = new clsSalesOrder();
                if (lstrQBFileMode == "Close")
                {
                    //  alData = objInvoice.GetInvoiceListPackaging(pstrFromdate, pstrTodate, lQBSessionManager, moQuickBooksAccountConfig);
                }
                else
                {
                    alData = objSalesOrder.GetFilteredSalesOrders(pstrFromdate, pstrTodate);
                }

                return alData;
            }
            catch (Exception ex)
            {

                throw;
                return null;
            }
            finally
            {

            }



        }
        private ArrayList GetFilteredSRlist(string pstrFromdate, string pstrTodate)
        {

            ArrayList alData = null;
            lobjQBConfiguration = new QBConfiguration();
            lstrQBFileMode = lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FileMode");

            try
            {

                objSalesReceipt = new clsSalesReceipt();
                if (lstrQBFileMode == "Close")
                {
                    //  alData = objInvoice.GetInvoiceListPackaging(pstrFromdate, pstrTodate, lQBSessionManager, moQuickBooksAccountConfig);
                }
                else
                {
                    alData = objSalesReceipt.GetFilteredSalesReceipt(pstrFromdate, pstrTodate);
                }

                return alData;
            }
            catch (Exception ex)
            {

                throw;
                return null;
            }
            finally
            {

            }



        }

        //private void chkordergrid_Click(object sender, EventArgs e)
        //{

        //    if (DataGVOrders.Rows.Count > 0)
        //    {

        //        if (chkordergrid.Checked == true)
        //        {
        //            btnPrint.Enabled = true;
        //            for (int i = 0; i < DataGVOrders.Rows.Count; i++)
        //            {

        //                DataGVOrders.Rows[i].Cells[0].Value = "True";

        //            }
        //        }
        //        else
        //        {
        //            for (int i = 0; i < DataGVOrders.Rows.Count; i++)
        //            {
        //                DataGVOrders.Rows[i].Cells[0].Value = "False";
        //            }
        //            cnt = 0;
        //            btnPrint.Enabled = false;
        //        }
        //    }

        //}





        private void rdbsearchbyInv_CheckedChanged(object sender, EventArgs e)
        {
            //Clear();
            InitFilterDataGrid();

        }

        private void rdbsearchbyso_CheckedChanged(object sender, EventArgs e)
        {
            // Clear();

            InitFilterDataGrid();


        }


        private void dataGVSelectedorderheader_SelectionChanged(object sender, EventArgs e)
        {

            if (string.IsNullOrWhiteSpace(txtOrderNumber.Text.ToString()) && (rdbInvoice.Checked == true || rdbSO.Checked == true || rdbSR.Checked))
            {

                dataGVSelectedOrders.Visible = true;
                dataGVSelectedOrders.Rows.Clear();

                int k = 0;

                //show line items for selected order

                foreach (DataGridViewRow row in dataGVSelectedorderheader.SelectedRows)
                {
                    if (row.Cells[0].Value != null)
                    {
                        if (this.rdbSO.Checked == true)
                        {

                            foreach (clsSalesOrderLine objlineitem in alInvoiceData)
                            {
                                if (objlineitem.RefNumber.ToString().Trim() == row.Cells[2].Value.ToString().Trim())
                                {
                                    dataGVSelectedOrders.Rows.Add();

                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineQuantity"].Value = objlineitem.SalesOrderLineQuantity;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineUnitOfMeasure"].Value = objlineitem.SalesOrderLineUnitOfMeasure;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineItemRefFullName"].Value = objlineitem.SalesOrderLineItemRefFullName;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineDesc"].Value = objlineitem.SalesOrderLineDesc;

                                    k++;

                                }

                            }
                        }
                        else if (this.rdbSR.Checked)
                        {

                            foreach (clsSalesReceiptLineItems objlineitem in alInvoiceData)
                            {
                                if (objlineitem.RefNumber.ToString().Trim() == row.Cells[2].Value.ToString().Trim())
                                {
                                    dataGVSelectedOrders.Rows.Add();

                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineQuantity"].Value = objlineitem.SalesReceiptQty;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineUnitOfMeasure"].Value = objlineitem.SalesReceiptLineUnitOfMeasure;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineItemRefFullName"].Value = objlineitem.SalesReceiptLineItemRefFullName;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineDesc"].Value = objlineitem.SalesReceiptLineDesc;

                                    k++;

                                }

                            }
                        }
                        else
                        {
                            if (txtrouteno.Text == "")
                            {
                                foreach (clsInvoiceLine objlineitem in alInvoiceData)
                                {
                                    if (objlineitem.RefNumber.ToString().Trim() == row.Cells[2].Value.ToString().Trim())
                                    {
                                        dataGVSelectedOrders.Rows.Add();

                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineQuantity"].Value = objlineitem.InvoiceLineQuantity;
                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineUnitOfMeasure"].Value = objlineitem.InvoiceLineUnitOfMeasure;
                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineItemRefFullName"].Value = objlineitem.InvoiceLineItemRefFullName;
                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineDesc"].Value = objlineitem.InvoiceLineDesc;
                                        if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvParentwithItemName").ToString() == "1"))
                                        {
                                            dataGVSelectedOrders.Rows[k].Cells["InvoiceItemName"].Value = objlineitem.InvoiceItemName;
                                        }
                                        if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvSubItemof").ToString() == "1"))
                                        {
                                            dataGVSelectedOrders.Rows[k].Cells["SubItemof"].Value = objlineitem.SubItemof;
                                        }
                                        k++;

                                    }

                                }
                            }
                            else
                            {
                                foreach (clsInvoice objlineitem in alInvoiceData)
                                {
                                    if (objlineitem.RefNumber.ToString().Trim() == row.Cells[2].Value.ToString().Trim())
                                    {

                                        var resultdata = alInvoiceData.Cast<clsInvoice>().Where(p => p.RefNumber == row.Cells[2].Value.ToString().Trim()).ToList();

                                        foreach (clsInvoice lineitem in resultdata)
                                        {

                                            foreach (clsInvoiceLine invitem in lineitem.LineItemList)
                                            {
                                                dataGVSelectedOrders.Rows.Add();
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineQuantity"].Value = invitem.InvoiceLineQuantity;
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineUnitOfMeasure"].Value = invitem.InvoiceLineUnitOfMeasure;
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineItemRefFullName"].Value = invitem.InvoiceLineItemRefFullName;
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineDesc"].Value = invitem.InvoiceLineDesc;
                                                if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvParentwithItemName").ToString() == "1"))
                                                {
                                                    dataGVSelectedOrders.Rows[k].Cells["InvoiceItemName"].Value = invitem.InvoiceItemName;
                                                }
                                                if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvSubItemof").ToString() == "1"))
                                                {
                                                    dataGVSelectedOrders.Rows[k].Cells["SubItemof"].Value = invitem.SubItemof;
                                                }
                                                k++;
                                            }
                                        }



                                    }

                                }



                            }
                        }

                    }
                    else
                    {

                        string strRefNo = string.Empty;
                        if (this.rdbSO.Checked == true)
                        {

                            foreach (clsSalesOrderLine compareRefno in alInvoiceData)
                            {

                                strRefNo = compareRefno.RefNumber.ToString().Trim();
                                break;

                            }

                            foreach (clsSalesOrderLine compareRefno in alInvoiceData)
                            {

                                if (strRefNo == compareRefno.RefNumber.ToString().Trim())
                                {
                                    dataGVSelectedOrders.Rows.Add();

                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineQuantity"].Value = compareRefno.SalesOrderLineQuantity;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineUnitOfMeasure"].Value = compareRefno.SalesOrderLineUnitOfMeasure;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineItemRefFullName"].Value = compareRefno.SalesOrderLineItemRefFullName;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesOrderLineDesc"].Value = compareRefno.SalesOrderLineDesc;
                                    k++;

                                }
                            }

                        }
                        else if (this.rdbSR.Checked)
                        {
                            foreach (clsSalesReceiptLineItems compareRefno in alInvoiceData)
                            {

                                strRefNo = compareRefno.RefNumber.ToString().Trim();
                                break;

                            }

                            foreach (clsSalesReceiptLineItems compareRefno in alInvoiceData)
                            {
                                if (strRefNo == compareRefno.RefNumber.ToString().Trim())
                                {
                                    dataGVSelectedOrders.Rows.Add();

                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineQuantity"].Value = compareRefno.SalesReceiptQty;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineUnitOfMeasure"].Value = compareRefno.SalesReceiptLineUnitOfMeasure;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineItemRefFullName"].Value = compareRefno.SalesReceiptLineItemRefFullName;
                                    dataGVSelectedOrders.Rows[k].Cells["SalesReceiptLineDesc"].Value = compareRefno.SalesReceiptLineDesc;

                                    k++;

                                }

                            }
                        }
                        else
                        {
                            if (txtrouteno.Text == "")
                            {
                                foreach (clsInvoiceLine compareRefno in alInvoiceData)
                                {

                                    strRefNo = compareRefno.RefNumber.ToString().Trim();
                                    break;

                                }
                                foreach (clsInvoiceLine compareRefno in alInvoiceData)
                                {

                                    if (strRefNo == compareRefno.RefNumber.ToString().Trim())
                                    {
                                        dataGVSelectedOrders.Rows.Add();

                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineQuantity"].Value = compareRefno.InvoiceLineQuantity;
                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineUnitOfMeasure"].Value = compareRefno.InvoiceLineUnitOfMeasure;
                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineItemRefFullName"].Value = compareRefno.InvoiceLineItemRefFullName;
                                        dataGVSelectedOrders.Rows[k].Cells["InvoiceLineDesc"].Value = compareRefno.InvoiceLineDesc;
                                        if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvParentwithItemName").ToString() == "1"))
                                        {
                                            dataGVSelectedOrders.Rows[k].Cells["InvoiceItemName"].Value = compareRefno.InvoiceItemName;
                                        }
                                        if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvSubItemof").ToString() == "1"))
                                        {
                                            dataGVSelectedOrders.Rows[k].Cells["SubItemof"].Value = compareRefno.SubItemof;
                                        }
                                        
                                        k++;

                                    }
                                }

                            }
                            else
                            {
                                foreach (clsInvoice compareRefno in alInvoiceData)
                                {

                                    strRefNo = compareRefno.RefNumber.ToString().Trim();
                                    break;

                                }

                                foreach (clsInvoice compareRefno in alInvoiceData)
                                {

                                    if (strRefNo == compareRefno.RefNumber.ToString().Trim())
                                    {

                                        var resultdata = alInvoiceData.Cast<clsInvoice>().Where(p => p.RefNumber == compareRefno.RefNumber.ToString().Trim()).ToList();
                                        foreach (clsInvoice lineitem in resultdata)
                                        {
                                            foreach (clsInvoiceLine invitem in lineitem.LineItemList)
                                            {
                                                dataGVSelectedOrders.Rows.Add();
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineQuantity"].Value = invitem.InvoiceLineQuantity;
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineUnitOfMeasure"].Value = invitem.InvoiceLineUnitOfMeasure;
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineItemRefFullName"].Value = invitem.InvoiceLineItemRefFullName;
                                                dataGVSelectedOrders.Rows[k].Cells["InvoiceLineDesc"].Value = invitem.InvoiceLineDesc;
                                                if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvParentwithItemName").ToString() == "1"))
                                                {
                                                    dataGVSelectedOrders.Rows[k].Cells["InvoiceItemName"].Value = invitem.InvoiceItemName;
                                                }
                                                if ((lobjQBConfiguration.GetLabelConfigSettings("EnableInvSubItemof").ToString() == "1"))
                                                {
                                                    dataGVSelectedOrders.Rows[k].Cells["SubItemof"].Value = invitem.SubItemof;
                                                }
                                                k++;

                                            }
                                        }

                                    }
                                }



                            }


                            //fortestonly
                            //if (txtrouteno.Text != "" && rdbA.Checked == true && rdbInvoice.Checked == true)
                            //{
                            //    if (txtOrderNumber.Text == "")
                            //    {
                            //        panel1.AutoScroll = false;
                            //        dataGVSelectedOrders.Visible = false;
                            //        DataGVItems.Visible = false;
                            //        chkSelectAll.Visible = false;
                            //        dataGVSelectedorderheader.Height = 500;
                            //        panel1.Height = 600;


                            //    }
                            //}

                        }

                    }

                }
            }


        }

        private void dataGVSelectedorderheader_CellClick(object sender, DataGridViewCellEventArgs e)
        {

            ////new code to show selected  invoice or sales orders filter by date :Date 07-09-2016
            int lintAllowedSelectedRows = 0;
            cnt = 0;


            if (e.RowIndex != -1 && e.ColumnIndex != -1)
            {
                if (e.ColumnIndex == 0)
                {

                    lintAllowedSelectedRows = dataGVSelectedorderheader.Rows.Count;

                    if (Convert.ToString(dataGVSelectedorderheader.CurrentRow.Cells[0].Value) == "True")
                    {
                        dataGVSelectedorderheader.CurrentRow.Cells[0].Value = "False";
                        chkorderheader.Checked = false;

                        cnt--;
                        if (cnt == 0)
                        {
                            btnPrint.Enabled = false;
                        }
                    }
                    else
                    {
                        dataGVSelectedorderheader.CurrentRow.Cells[0].Value = "True";
                        cnt = 0;
                        for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                        {
                            if (Convert.ToString(dataGVSelectedorderheader.Rows[i].Cells[0].Value) == "True")
                            {
                                btnPrint.Enabled = true;
                                cnt = cnt + 1;

                            }
                        }
                        if (cnt == lintAllowedSelectedRows)
                        {
                            chkorderheader.Checked = true;

                        }
                        else
                        {
                            chkorderheader.Checked = false;
                        }
                    }
                }
            }

        }

        private void chkorderheader_Click(object sender, EventArgs e)
        {
            if (dataGVSelectedorderheader.Rows.Count > 0)
            {

                if (chkorderheader.Checked == true)
                {
                    btnPrint.Enabled = true;
                    for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                    {

                        dataGVSelectedorderheader.Rows[i].Cells[0].Value = "True";

                    }
                }
                else
                {
                    for (int i = 0; i < dataGVSelectedorderheader.Rows.Count; i++)
                    {
                        dataGVSelectedorderheader.Rows[i].Cells[0].Value = "False";
                    }
                    cnt = 0;
                    btnPrint.Enabled = false;
                }
            }
        }

        private void chkreceiptall_Click(object sender, EventArgs e)
        {
            int lintRowsSelected = 0;


            ArrayList lstpoitemlist = new ArrayList();
            objPurchaseOrderLine = new clsPurchaseOrderLine();
            double poqty = 0;

            if (DataGVItems.Rows.Count > 0)
            {

                lintRowsSelected = DataGVItems.Rows.Count;

                if (chkreceiptall.Checked == true)
                {

                    for (int j = 0; j < DataGVItems.Rows.Count; j++)
                    {
                        //on checked checkbox show receipt qty again

                        var receiptvals = lobjclsPurchaseOrderLine.Where(p => p.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.Rows[j].Cells["PurchaseOrderLineItemRefFullName"].Value)).ToList();

                        foreach (clsPurchaseOrderLine recptitem in receiptvals)
                        {
                            poqty = recptitem.RecQty;
                        }
                        DataGVItems.Rows[j].Cells["PurchaseOrderLineQuantity"].Value = poqty;
                        DataGVItems.Rows[j].Cells["CheckBoxPOItemreceipt"].Value = "True";

                    }
                }
                else
                {

                    lstpoitemlist = objPurchaseOrderLine.GetPOLine(txtOrderNumber.Text.ToString());
                    for (int i = 0; i < DataGVItems.Rows.Count; i++)
                    {

                        //on unchecked checkbox show po qty
                        var lineqty = from clsPurchaseOrderLine objpoqty in lstpoitemlist
                                      where objpoqty.PurchaseOrderLineItemRefFullName == Convert.ToString(DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value)
                                      select objpoqty;

                        foreach (clsPurchaseOrderLine item in lineqty)
                        {
                            poqty = item.PurchaseOrderQty;
                        }

                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = poqty;
                        DataGVItems.Rows[i].Cells["CheckBoxPOItemreceipt"].Value = "False";

                    }

                }
            }

        }

        private void invpackaging_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
            listviewprintingItem.Visible = false;
            RadioButton btn = sender as RadioButton;
            if (!btn.Checked)
            {
                lbltempName.Text = "";
                cmbLabelName.Items.Clear();
              
            }
        }

        private void rdbInvmultiple_CheckedChanged(object sender, EventArgs e)
        {

            Clear();
            chkSelectAll.Visible = false;
            rdbA.Checked = true;
        }

        private void rdbInvsingle_CheckedChanged(object sender, EventArgs e)
        {

            Clear();
            rdbA.Checked = true;

        }

        private void pOScreenSettingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            FrmPOScreenSetting lbojdiv = FrmPOScreenSetting.GetInstance();
            lbojdiv.ShowDialog();

        }

        private void txtQtyToPrint_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }
        }

        private void txtQtyOnLabel_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar))
            {
                e.Handled = true;
            }
        }

        private void printerSettingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            FrmPrinterSetting lobjprintersetting = FrmPrinterSetting.GetInstance();
            lobjprintersetting.ShowDialog();

        }

        private void tsmenuPrintByItemSearch_Click(object sender, EventArgs e)
        {


        }

        private void itemListScreenSettingToolStripMenuItem_Click(object sender, EventArgs e)
        {

            FrmItemListSettingcs lobjItemlistSetting = FrmItemListSettingcs.GetInstance();
            lobjItemlistSetting.ShowDialog();


        }

       
        private void toolStripReceiptmnu_Click(object sender, EventArgs e)
        {

            //check if application is in trial period
            if (!string.IsNullOrEmpty(strTrialmodeDuration))
            {

                MessageBox.Show(strTrialmodeDuration, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            //blnconnecheck = lobjitem.CheckQuickBooksConnection();
            // if (blnconnecheck == true)
            // {


            if (ActiveMdiChild != null)
                ActiveMdiChild.Close();

            if (System.Windows.Forms.Application.OpenForms["FrmReceiptList"] == null)
            {
                LabelConnector.FrmReceiptList lobjLabelConnectorSettings = new LabelConnector.FrmReceiptList();
                pnlhead.Visible = false;
                //lobjLabelConnectorSettings.Text = "Print by Item";
                lobjLabelConnectorSettings.MdiParent = this;
                lobjLabelConnectorSettings.Dock = DockStyle.Fill;

                lobjLabelConnectorSettings.Show();
            }
            // }
            // else
            // {
            //     MessageBox.Show("Please Open QuickBooks Company file", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            // }

        }

        private void singleItemPrintToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //check if application is in trial period
            if (!string.IsNullOrEmpty(strTrialmodeDuration))
            {

                MessageBox.Show(strTrialmodeDuration, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            //blnconnecheck = lobjitem.CheckQuickBooksConnection();
            // if (blnconnecheck == true)
            // {
            // Set cursor as hourglass
            //Cursor.Current = Cursors.WaitCursor;

            if (ActiveMdiChild != null)
                ActiveMdiChild.Close();

            if (System.Windows.Forms.Application.OpenForms["FrmPrintByItemSearch"] == null)
            {
                LabelConnector.FrmPrintbyItem lobjLabelConnectorSettings = new LabelConnector.FrmPrintbyItem();
                pnlhead.Visible = false;
                //lobjLabelConnectorSettings.Text = "Print by Item";
                lobjLabelConnectorSettings.MdiParent = this;
                lobjLabelConnectorSettings.Dock = DockStyle.Fill;

                lobjLabelConnectorSettings.Show();
            }
            //}
            //else
            //{
            //    MessageBox.Show("Please Open QuickBooks Company file", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //}
        }

        private void multiItemListPrintToolStripMenuItem_Click(object sender, EventArgs e)
        {

            //check if application is in trial period
            if (!string.IsNullOrEmpty(strTrialmodeDuration))
            {

                MessageBox.Show(strTrialmodeDuration, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            //blnconnecheck = lobjitem.CheckQuickBooksConnection();
            // if (blnconnecheck == true)
            // {
            // Set cursor as hourglass
            //Cursor.Current = Cursors.WaitCursor;

            if (ActiveMdiChild != null)
                ActiveMdiChild.Close();

            if (System.Windows.Forms.Application.OpenForms["FrmPrintByItemSearch"] == null)
            {
                LabelConnector.FrmPrintByItemSearch lobjLabelConnectorSettings = new LabelConnector.FrmPrintByItemSearch();
                pnlhead.Visible = false;
                //lobjLabelConnectorSettings.Text = "Print by Item";
                lobjLabelConnectorSettings.MdiParent = this;
                lobjLabelConnectorSettings.Dock = DockStyle.Fill;

                lobjLabelConnectorSettings.Show();
            }
            //}
            //else
            //{
            //    MessageBox.Show("Please Open QuickBooks Company file", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);

            //}

        }

        private void gbInvoicepackoption_Enter(object sender, EventArgs e)
        {

        }


        private void DataGVItems_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex != -1)
            {
                if ((e.ColumnIndex != -1))
                {
                    var cell = DataGVItems[e.ColumnIndex, e.RowIndex];

                    if ((cell.OwningColumn.Name == "SalesPrice" || cell.OwningColumn.Name == "MarkUpPrice") && (rdbSO.Checked == true))
                    {
                        var ColumnSelected = DataGVItems.Rows[e.RowIndex].Cells[e.ColumnIndex].Selected;
                        if (ColumnSelected == true)
                        {

                            DataGVItems[e.ColumnIndex, e.RowIndex].Style.BackColor = Color.Empty;
                            DataGVItems[e.ColumnIndex, e.RowIndex].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                        }
                    }

                }
            }
        }

        private void cmbcustomfield_SelectedIndexChanged(object sender, EventArgs e)
        {
            double dblcustomfieldvalue;
            if (cmbcustomfield.SelectedIndex > 0)
            {
                ArrayList alPOQtyperLineItems = objPurchaseOrderLine.GetPOLine(txtOrderNumber.Text.ToString());
                dblcustomfieldvalue = Convert.ToDouble(cmbcustomfield.SelectedValue);

                FillPOQtyperCaseGrid(alPOQtyperLineItems, dblcustomfieldvalue, cmbcustomfield.Text.ToString());

                chkSelectAll_Click(null, null);
            }

        }


        public void FillPOQtyperCaseGrid(ArrayList alLineItems, double dblcustomfieldselectedvalue, string strcustomfieldText)
        {
            Dictionary<string, string> lobjcustomItemlist = new Dictionary<string, string>();
            string ItemCustomFieldQuickBooksvalue = string.Empty;
            double dbldivisor;
            bool blnisfieldexist = false;
            int intwithoutdiv = 0;
            int intwithdiv = 0;
            int i = 0;
            int isnumber;
            DataGVItems.Rows.Clear();

            foreach (clsPurchaseOrderLine objPOLine in alLineItems) //po multiple
            {

                //new logic:10-Jan-2018

                lobjcustomItemlist = lobjitem.GetAllItemCustomFieldsWithNameValue(objPOLine.purchaseordercombineItem.ToString());  //PurchaseOrderLineItemRefFullName
                                                                                                                                   //get custom field value for selected field in dropdown
                                                                                                                                   //check custom field is exist
                                                                                                                                   //if (lobjcustomItemlist.ContainsKey(strcustomfieldText.ToUpper()))
                                                                                                                                   //{
                                                                                                                                   //    blnisfieldexist = true;
                                                                                                                                   //}

                if (lobjcustomItemlist.Count > 0)
                {

                    DataGVItems.Rows.Add();

                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = objPOLine.PurchaseOrderQty;

                    if (!lobjcustomItemlist.TryGetValue(strcustomfieldText.ToString().Trim().ToUpper(), out ItemCustomFieldQuickBooksvalue))
                    {

                        // the custom field isn't in the QuickBooks.
                        if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y") //default qty
                        {

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = Convert.ToInt32(DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value);

                            if (objPOLine.PurchaseOrderQty == 0)
                                DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 1; //objPOLine.PurchaseOrderLineQuantity;
                        }
                        else
                        {

                            //Print 1 Label by default is selected

                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = 1;
                            if (objPOLine.PurchaseOrderQty == 0)
                                DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                            else
                                DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = Convert.ToInt32(DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value);

                        }

                        DataGVItems.Rows[i].Cells["PurchaseOrderLineUnitOfMeasure"].Value = objPOLine.PurchaseOrderLineUnitOfMeasure;
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value = objPOLine.PurchaseOrderLineItemRefFullName;
                        DataGVItems.Rows[i].Cells["SubItemOf"].Value = objPOLine.SubItemOf != null ? objPOLine.SubItemOf : null; //PO SubItemOf
                                                                                                                                 //support for MPN display : 07-Dec-2018
                        DataGVItems.Rows[i].Cells["MPN"].Value = objPOLine.MPN != null ? objPOLine.MPN : null;
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineDesc"].Value = objPOLine.PurchaseOrderLineDesc;
                        DataGVItems.Rows[i].Cells["PurchaseOrderLineTxnLineID"].Value = objPOLine.PurchaseOrderLineTxnLineID;
                        i++;
                        // bnlshowmsg = true;
                        // MessageBox.Show("Selected custom field does not exist in QuickBooks", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        continue;

                        //return;
                    }

                    //check string contain digit:Date 11-Jan-2019

                    bool isNumeric = int.TryParse(ItemCustomFieldQuickBooksvalue, out isnumber); //only number 
                                                                                                 // if (Regex.IsMatch(ItemCustomFieldQuickBooksvalue, @"^[0-9]+(\.[0-9]+)?$")) //number and decimal
                    if (isNumeric)
                    {
                        dbldivisor = Convert.ToInt32(ItemCustomFieldQuickBooksvalue);
                    }
                    else
                    {
                        dbldivisor = 1;
                    }

                    intwithdiv = 1;
                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y") //default qty
                    {

                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value) / dbldivisor));

                        if (objPOLine.PurchaseOrderQty == 0)
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                        else
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 1; //objPOLine.PurchaseOrderLineQuantity;
                    }
                    else
                    {

                        //Print 1 Label by default is selected

                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = 1;
                        if (objPOLine.PurchaseOrderQty == 0)
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                        else
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value) / dbldivisor));

                    }
                }
                else
                {
                    intwithoutdiv = 1;
                    //for test
                    DataGVItems.Rows.Add();

                    DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value = objPOLine.PurchaseOrderQty;



                    if (lobjQBConfiguration.GetQuickBooksDataAccessConfigSettings("FlipPOQty") == "Y") //default qty
                    {

                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = Convert.ToInt32(DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value);

                        if (objPOLine.PurchaseOrderQty == 0)
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                        else
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 1; //objPOLine.PurchaseOrderLineQuantity;
                    }
                    else
                    {

                        //Print 1 Label by default is selected

                        DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityToPrint"].Value = 1;
                        if (objPOLine.PurchaseOrderQty == 0)
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = 0;
                        else
                            DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantityOnLabel"].Value = Convert.ToInt32(DataGVItems.Rows[i].Cells["PurchaseOrderLineQuantity"].Value);

                    }


                }
                DataGVItems.Rows[i].Cells["PurchaseOrderLineUnitOfMeasure"].Value = objPOLine.PurchaseOrderLineUnitOfMeasure;
                DataGVItems.Rows[i].Cells["PurchaseOrderLineItemRefFullName"].Value = objPOLine.PurchaseOrderLineItemRefFullName;
                DataGVItems.Rows[i].Cells["SubItemOf"].Value = objPOLine.SubItemOf != null ? objPOLine.SubItemOf : null; //PO SubItemOf
                                                                                                                         //support for MPN display : 07-Dec-2018
                DataGVItems.Rows[i].Cells["MPN"].Value = objPOLine.MPN != null ? objPOLine.MPN : null;
                DataGVItems.Rows[i].Cells["PurchaseOrderLineDesc"].Value = objPOLine.PurchaseOrderLineDesc;
                DataGVItems.Rows[i].Cells["PurchaseOrderLineTxnLineID"].Value = objPOLine.PurchaseOrderLineTxnLineID;
                //txtQtyOnLabel.Text = objPOLine.PurchaseOrderLineQuantity.ToString();
                i++;
                // }
            }

            if (intwithoutdiv == 1 && intwithdiv == 0)
            {
                MessageBox.Show("Either selected custom field does not exist or does not have value ", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
        }

        private void toolStripLabelDesign_Click(object sender, EventArgs e)
        {
            //check if application is in trial period
            if (!string.IsNullOrEmpty(strTrialmodeDuration))
            {

                MessageBox.Show(strTrialmodeDuration, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }


            if (ActiveMdiChild != null)
                ActiveMdiChild.Close();

            if (System.Windows.Forms.Application.OpenForms["FrmLabelDesign"] == null)
            {
                LabelConnector.FrmLabelDesign lobjLabelConnectorSettings = new LabelConnector.FrmLabelDesign();
                pnlhead.Visible = false;
                //lobjLabelConnectorSettings.Text = "Print by Item";
                lobjLabelConnectorSettings.MdiParent = this;
                lobjLabelConnectorSettings.Dock = DockStyle.Fill;

                lobjLabelConnectorSettings.Show();
            }
        }

        private void toolStripReportMenu_Click(object sender, EventArgs e)
        {

            //check if application is in trial period
            if (!string.IsNullOrEmpty(strTrialmodeDuration))
            {

                MessageBox.Show(strTrialmodeDuration, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }


            if (ActiveMdiChild != null)
                ActiveMdiChild.Close();

            if (System.Windows.Forms.Application.OpenForms["FrmInventoryReport"] == null)
            {
                LabelConnector.FrmInventoryReport lobjLabelConnectorSettings = new LabelConnector.FrmInventoryReport();
                pnlhead.Visible = false;
                //lobjLabelConnectorSettings.Text = "Print by Item";
                lobjLabelConnectorSettings.MdiParent = this;
                lobjLabelConnectorSettings.Dock = DockStyle.Fill;

                lobjLabelConnectorSettings.Show();
            }
        }

        private void toolStripMenuItemconnectqb_Click(object sender, EventArgs e)
        {
          
            LabelConnector.FrmConnectQuickBooks lobjfrmconnectQuickBooks = new LabelConnector.FrmConnectQuickBooks();
            lobjfrmconnectQuickBooks.ShowDialog();
            if(Globalvariables.CreatedNewConnection == "1")
            {
                Globalvariables.CreatedNewConnection = "0";
                txtOrderNumber.Text = "";
                Clear();
            }
           // QBconnectionupdate(lobjfrmconnectQuickBooks.blnconnecheck);

        }
        public void QBconnectionupdate(bool connection)
        {
            //if (connection)
            //{
            //    toolStripMenuItemconnectqb1.Visible = true;
            //    toolStripMenuItemconnectqb.Visible = false;
            //}
            //else
            //{
            //    toolStripMenuItemconnectqb1.Visible = false;
            //    toolStripMenuItemconnectqb.Visible = true;
            //}
        }

        private void frmPrintLabel_Shown(object sender, EventArgs e)
        {

        }

        private void btnSelect_Click(object sender, EventArgs e)
        {
            try
            {
                clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
                string template = "";
                string templatepath = "";
                string selectedType = "";
                if (rdbSO.Checked == true)
                {
                    selectedType = "sotemppath";
                       templatepath = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("sotemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("sotemppath"));
                }
                else if (rdbPO.Checked == true)
                {
                    selectedType = "potemppath";
                    templatepath = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("potemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("potemppath"));
                }
                else if (rdbInvoice.Checked == true)
                {
                    selectedType = "invtemppath";
                    templatepath = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invtemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("invtemppath"));
                }
                else if (invpackaging.Checked == true)
                {
                    selectedType = "invpatemppath";
                    templatepath = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("invpatemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("invpatemppath"));
                }
                else if (rdbSR.Checked == true)
                {
                    selectedType = "srtemppath";
                    templatepath = string.IsNullOrWhiteSpace(lobjQBConfiguration.GetLabelConfigSettings("srtemppath")) ? "" : Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("srtemppath"));
                  
                }else
                {
                    return;
                }

                printTempName = "";
                OpenFileDialog openFileDialog1 = new OpenFileDialog();
                openFileDialog1.Title = "Browse xml Files";
                lbltempName.Text = "";
                if (templatepath != "")
                {                  
                        openFileDialog1.InitialDirectory = templatepath.Replace(templatepath, Path.GetDirectoryName(templatepath));
                        openFileDialog1.Filter = "XML Files (*.xml)|*.xml";
                        openFileDialog1.FilterIndex = 0;
                        openFileDialog1.DefaultExt = "xml";

                        if (openFileDialog1.ShowDialog() == DialogResult.OK)
                        {

                        lobjQBConfiguration.SaveLabelFilePathSettings(openFileDialog1.FileName.ToString(), selectedType);
                        template =  GetselectedtemplateOnApp(openFileDialog1.FileName.ToString());
                        if (template == "")
                        {
                            lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(template));
                            lbltempName.Text = "";
                        }
                        else
                        {   
                            Globalvariables.PrintTemplateStatus = "0";
                            lbltempName.Text = Path.GetFileName(template);
                            Globalvariables.PrintTemplateName = lbltempName.Text.Trim();
                        }
                    }
                }

                else
                {

                    string Labelpath = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\" + "Label Connector Documents";

                    if (!Directory.Exists(Labelpath))
                        Directory.CreateDirectory(Labelpath);
                    openFileDialog1.InitialDirectory = Labelpath;
                    openFileDialog1.Filter = "XML Files (*.xml)|*.xml";
                    openFileDialog1.FilterIndex = 0;
                    openFileDialog1.DefaultExt = "xml";

                    if (openFileDialog1.ShowDialog() == DialogResult.OK)
                    {
                        lobjQBConfiguration.SaveLabelFilePathSettings(openFileDialog1.FileName.ToString(), selectedType);
                        template = GetselectedtemplateOnApp(openFileDialog1.FileName.ToString());
                        if (template == "")
                        {
                            lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(template));
                            lbltempName.Text = "";
                        }
                        else
                        {
                            Globalvariables.PrintTemplateStatus = "0";
                            lbltempName.Text = Path.GetFileName(template);
                            Globalvariables.PrintTemplateName = lbltempName.Text.Trim();
                        }
                    }

                }

            }
            catch (Exception EX)
            {
                MessageBox.Show(EX.Message, "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        public string GetselectedtemplateOnApp(string filepath)
        {
            try
            {
                bool istemplateexist = false;
                clsTemplateLabelXmlwork lobjtemplatenames = new clsTemplateLabelXmlwork();
                string targetDir = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\");
                if (!Directory.Exists(targetDir))
                {
                    Directory.CreateDirectory(targetDir);

                }
                if (File.Exists(targetDir + Path.GetFileName(filepath)))
                {
                    File.Delete(targetDir + Path.GetFileName(filepath));

                }
                File.Copy(filepath, Path.Combine(targetDir, Path.GetFileName(filepath)), true);
                filepath = targetDir + Path.GetFileName(filepath);
                lobjtemplatenames = new clsTemplateLabelXmlwork();
                var templatenodecount = lobjtemplatenames.CheckImportXmlFormat(Path.GetFileNameWithoutExtension(filepath));
                if (templatenodecount.Count != 4)
                {
                    MessageBox.Show("Invalid Template Format", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return "";
                }

                printTempName = lobjtemplatenames.CreateTempFolder(Path.GetFileNameWithoutExtension(filepath));
                fnGetUDFLabels();
                cmbLabelName.SelectedItem = Path.GetFileNameWithoutExtension(filepath);
                string tempType = "";
                if (rdbPO.Checked)
                {
                    tempType = "Purchase Order";
                }
                else if (rdbSO.Checked)
                {
                    tempType = "Sales Order";
                }
                else if (rdbInvoice.Checked)
                {
                    tempType = "Invoice";
                }
                else if (invpackaging.Checked)
                {
                    tempType = "Invoice";
                }
                else if (rdbSR.Checked)
                {
                    tempType = "Sales Receipts";
                }


                if (printTempName.ToLower().ToString() != tempType.ToLower())
                {
                    MessageBox.Show("You have selected an '" + printTempName + "' type label template. Please select a '" + tempType + "'  type label template.", "Select Label", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return "";
                }
                return filepath;
            }
            catch (Exception EX)
            {
                MessageBox.Show(EX.Message, "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return "";
            }            
        }
        public void UpdateFilePath(string filepath)
        {
            try
            {
                lbltempName.Text = "";
                clsTemplateLabelXmlwork lobjTemplatexml = new clsTemplateLabelXmlwork();
                clsTemplateStatus tempstatus = new clsTemplateStatus();
                tempstatus.TemplatePath = Convert.ToString(filepath);
                tempstatus.TemplateSave = "0";
                tempstatus.TemplateMode = "Print";
                tempstatus.TemplateStatus = "0";
                tempstatus.TempTemplatePath = "";
                lobjTemplatexml.SaveTemplateStatus(tempstatus);
                bool result = GettemplateOnApp();
                if (!result)
                {
                    lobjTemplatexml.DeleteAppTemplate(Path.GetFileNameWithoutExtension(tempstatus.TempTemplatePath));
                    lobjTemplatexml.SaveTemplateStatus(tempstatus);
                    return;
                }
                lbltempName.Text = Path.GetFileName(filepath);
            }
            catch (Exception EX)
            {

                MessageBox.Show(EX.Message, "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        public bool GettemplateOnApp()
        {
            try
            {
                bool istemplateexist = false;
                clsTemplateStatus tempstatus = new clsTemplateStatus();
                clsTemplateLabelXmlwork lobjtemplatenames = new clsTemplateLabelXmlwork();
                tempstatus = lobjtemplatenames.GetTemplateStatus();
                string targetDir = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\");
                if (!Directory.Exists(targetDir))
                {
                    Directory.CreateDirectory(targetDir);

                }
                if (File.Exists(targetDir + Path.GetFileName(tempstatus.TemplatePath)))
                {
                    File.Delete(targetDir + Path.GetFileName(tempstatus.TemplatePath));

                }
                File.Copy(tempstatus.TemplatePath, Path.Combine(targetDir, Path.GetFileName(tempstatus.TemplatePath)), true);
                tempstatus.TempTemplatePath = targetDir + Path.GetFileName(tempstatus.TemplatePath);
                lobjtemplatenames.SaveTemplateStatus(tempstatus);
                // lstrgettargetfile = System.Windows.Forms.Application.StartupPath + @"\" + "TemplateImageslist" + "\\" + openFileDialog1.FileName.ToString() + ".xml";
                lobjtemplatenames = new clsTemplateLabelXmlwork();
                var templatenodecount = lobjtemplatenames.CheckImportXmlFormat(Path.GetFileNameWithoutExtension(tempstatus.TempTemplatePath));
                //istemplateexist = lobjtemplatenames.IsTemplateFieldInXml(Path.GetFileNameWithoutExtension(tempstatus.TempTemplatePath));
                //if (!istemplateexist) //template name attr not exist
                //{
                //    MessageBox.Show("Invalid Template Format", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                //    return false;
                //}
                if (templatenodecount.Count != 4)
                {
                    MessageBox.Show("Invalid Template Format", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }

                printTempName = lobjtemplatenames.CreateTempFolder(Path.GetFileNameWithoutExtension(tempstatus.TemplatePath));
                fnGetUDFLabels();
                cmbLabelName.SelectedItem = Path.GetFileNameWithoutExtension(tempstatus.TemplatePath);
                string tempType = "";
                if (rdbPO.Checked)
                {
                    tempType = "Purchase Order";
                }
                else if (rdbSO.Checked)
                {
                    tempType = "Sales Order";
                }
                else if (rdbInvoice.Checked)
                {
                    tempType = "Invoice";
                }
                else if (invpackaging.Checked)
                {
                    tempType = "Invoice";
                }
                else if (rdbSR.Checked)
                {
                    tempType = "Sales Receipts";
                }


                if (printTempName.ToLower().ToString() != tempType.ToLower())
                {
                    MessageBox.Show("You have selected an '" + printTempName + "' type label template. Please select a '" + tempType + "'  type label template.", "Select Label", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return false;
                }
                return true;
            }
            catch (Exception EX)
            {
                MessageBox.Show(EX.Message, "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return false;
            }
        }

        private void toolStripMenuItemconnectqb1_Click(object sender, EventArgs e)
        {
            MessageBox.Show("If you have already connected to this company file then you are not required to connect again", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void RDOSalesReceipts_CheckedChanged(object sender, EventArgs e)
        {
            Clear();
            rdbB.Checked = true;
            rdbC.Enabled = false;
            rdbA.Checked = true;
            listviewprintingItem.Visible = false;

            RadioButton btn = sender as RadioButton;
            if (!btn.Checked)
            {
                lbltempName.Text = "";
                cmbLabelName.Items.Clear();
             
            }

        }

        private void salesReceiptScreenSettingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            frmSalesReceiptSetting lbojdiv = frmSalesReceiptSetting.GetInstance();
            lbojdiv.ShowDialog();
        }

        private void DataGVItems_Click(object sender, EventArgs e)
        {
          
        }

        private void onlineSupportToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://accuware-inc.com/support-2018/");
        }

        private void chkSelectAll_CheckedChanged(object sender, EventArgs e)
        {
            //if (DataGVItems.Rows.Count > 0)
            //{
            //    if (chkSelectAll.Checked == true)
            //    {
            //        for (int i = 0; i < DataGVItems.Rows.Count; i++)
            //        {
            //            if (DataGVItems.Rows[i].Cells[1].Value != null)
            //            {
            //                DataGVItems.Rows[i].Cells[0].Value = "True";
            //            }
            //        }
            //    }
            //    else
            //    {
            //        for (int i = 0; i < DataGVItems.Rows.Count; i++)
            //        {
            //            if (DataGVItems.Rows[i].Cells[1].Value.ToString().Trim() != "")
            //            {
            //                DataGVItems.Rows[i].Cells[0].Value = "False";
            //            }
            //        }
            //    }
            //}
        }

        private void chkSelectAll_Click(object sender, EventArgs e)
        {
            int lintRowsSelected = 0;
            //packaging option for sales order Date:04/29/2015
            //if (rdbSO.Checked == true && rdbC.Checked == true)
            //{

            //    if (DataGVItems.Rows.Count > 0)
            //    {
            //        if (rdbC.Checked == true)
            //            lintRowsSelected = DataGVItems.Rows.Count;
            //        //    lintRowsSelected = DataGVItems.Rows.Count >= 8 ? 8 : DataGVItems.Rows.Count;
            //        //else
            //        //    lintRowsSelected = DataGVItems.Rows.Count;

            //        if (chkSelectAll.Checked == true)
            //        {
            //            btnPrint.Enabled = true;
            //            for (int i = 0; i < lintRowsSelected; i++)
            //            {

            //                if (DataGVItems.Rows[i].Cells[1].Value != null && DataGVItems.Rows[i].Cells[0].Value != null && DataGVItems.Rows[i].Cells[0].Value.ToString() == "False")
            //                {
            //                   // if (cnt == 8)
            //                     //   return;
            //                   // else
            //                    //{
            //                        DataGVItems.Rows[i].Cells[0].Value = "True";
            //                        cnt++;
            //                  //  }
            //                }
            //                else
            //                {
            //                    DataGVItems.Rows[i].Cells[0].Value = "True";
            //                }
            //            }


            //        }
            //        else
            //        {
            //            for (int i = 0; i < DataGVItems.Rows.Count; i++)
            //            {
            //                DataGVItems.Rows[i].Cells[0].Value = "False";
            //            }
            //            cnt = 0;
            //            btnPrint.Enabled = false;
            //        }
            //    }


            //}

            if (!(rdbSO.Checked == true && rdbC.Checked == true)) //condition added on 05/04/2015
            {

                if (DataGVItems.Rows.Count > 0)
                {
                    //if (rdbC.Checked == true) //six item selection code commented
                    //    lintRowsSelected = DataGVItems.Rows.Count >= 6 ? 6 : DataGVItems.Rows.Count;
                    //else
                    lintRowsSelected = DataGVItems.Rows.Count;
                    DataGVItems.Refresh();
                    if (chkSelectAll.Checked == true)
                    {
                        btnPrint.Enabled = true;
                        for (int i = 0; i < lintRowsSelected; i++)
                        {
                            //below condition added for checkbox rdbd --davino code merging
                            if (rdbA.Checked == true || rdbd.Checked == true || (invpackaging.Checked == true && rdbInvsingle.Checked == true))
                            {
                                DataGVItems.Rows[i].Cells[0].Value = "True";
                            }
                            else if (rdbC.Checked == true)
                            {
                                if (rdbInvoice.Checked == true)
                                {
                                    if (DataGVItems.Rows[i].Cells[2].Value != null && DataGVItems.Rows[i].Cells[0].Value != null && DataGVItems.Rows[i].Cells[0].Value.ToString() == "False")
                                    {
                                        if (cnt == 6)
                                            return;
                                        else
                                        {
                                            DataGVItems.Rows[i].Cells[0].Value = "True";
                                            cnt++;
                                        }
                                    }
                                    else
                                    {
                                        DataGVItems.Rows[i].Cells[0].Value = "True";
                                    }
                                }
                                else
                                {
                                    if (DataGVItems.Rows[i].Cells[1].Value != null && DataGVItems.Rows[i].Cells[0].Value != null && DataGVItems.Rows[i].Cells[0].Value.ToString() == "False")
                                    {
                                        if (cnt == 6)
                                            return;
                                        else
                                        {
                                            DataGVItems.Rows[i].Cells[0].Value = "True";
                                            cnt++;
                                        }
                                    }
                                    else
                                    {
                                        DataGVItems.Rows[i].Cells[0].Value = "True";
                                    }
                                }
                            }

                            //do not allow to select checkbox for parent item:27-Feb-2020
                            if ((rdbSO.Checked == true || rdbInvoice.Checked == true) && rdbA.Checked == true)
                            {
                                if (DataGVItems.Rows[i].Cells["GroupItemType"].Value != null)
                                {
                                    if (DataGVItems.Rows[i].Cells["GroupItemType"].Value.ToString() == "P")
                                    {
                                        // DataGVItems.CurrentRow.Cells[0].ReadOnly = true;
                                        // DataGVItems.CurrentRow.Cells[0].Value = "False";
                                        DataGVItems.Rows[i].Cells[0].Value = "False";
                                        DataGVItems.Rows[i].Cells[0].ReadOnly = true;

                                    }
                                }

                            }

                            if (rdbSR.Checked == true && rdbA.Checked == true)
                            {
                                if (DataGVItems.Rows[i].Cells["GroupItemType"].Value != null)
                                {
                                    if (DataGVItems.Rows[i].Cells["GroupItemType"].Value.ToString() == "P")
                                    {
                                        // DataGVItems.CurrentRow.Cells[0].ReadOnly = true;
                                        // DataGVItems.CurrentRow.Cells[0].Value = "False";
                                        DataGVItems.Rows[i].Cells[0].Value = "False";
                                        DataGVItems.Rows[i].Cells[0].ReadOnly = true;

                                    }
                                }

                            }

                        }

                    }
                    else
                    {
                        for (int i = 0; i < DataGVItems.Rows.Count; i++)
                        {
                            DataGVItems.Rows[i].Cells[0].Value = "False";
                            //reset editable value
                            if (rdbA.Checked == true && rdbSO.Checked == true)
                            {
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].ReadOnly = true;
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].ReadOnly = true;
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                                //16th Feb 2018
                                DataGVItems.Rows[i].Cells["SalesPrice"].ReadOnly = true;
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].ReadOnly = true;
                                DataGVItems.Rows[i].Cells["SalesPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityToPrint"].Style.BackColor = Color.Empty; // 14-Mar-2018
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantityOnLabel"].Style.BackColor = Color.Empty;
                                DataGVItems.Rows[i].Cells["MarkUpPrice"].Style.BackColor = Color.Empty; // 14-Mar-2018
                                DataGVItems.Rows[i].Cells["SalesPrice"].Style.BackColor = Color.Empty;
                            }
                        }
                        cnt = 0;
                        btnPrint.Enabled = false;

                    }
                }
            }
            else
            {
                //04-Feb-2020 ksb
                if (this.rdbSO.Checked == true && this.rdbC.Checked == true)
                {
                    if (DataGVItems.Rows.Count > 0)
                    {
                        //if (rdbC.Checked == true) // showing six select item for so packinging commented: 23-Mar-2020
                        //    lintRowsSelected = DataGVItems.Rows.Count >= 6 ? 6 : DataGVItems.Rows.Count;
                        //else
                        lintRowsSelected = DataGVItems.Rows.Count;

                        if (chkSelectAll.Checked == true)
                        {
                            btnPrint.Enabled = true;
                            for (int i = 0; i < lintRowsSelected; i++)
                            {

                                DataGVItems.Rows[i].Cells[0].Value = "True";
                                // DataGVItems.Rows[i].Cells[0].ReadOnly = false;
                            }
                        }
                        else
                        {

                            for (int i = 0; i < DataGVItems.Rows.Count; i++)
                            {
                                DataGVItems.Rows[i].Cells[0].Value = "False";
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].ReadOnly = true;
                                DataGVItems.Rows[i].Cells["SalesOrderLineQuantity"].Style.Font = new Font("Verdana", 8, FontStyle.Regular);

                            }
                            cnt = 0;
                            btnPrint.Enabled = false;


                        }
                    }

                    txtQtyToPrint.Text = "1"; // set 1 for packaging salese order option
                }
            }
        }
        private void popupfuction()
        {
            DialogResult dialog = new DialogResult();
            dialog = MessageBox.Show("Application will be close due to its session ends.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);

            if (dialog == DialogResult.OK)
            {
                Process.GetCurrentProcess().Kill();
                Environment.Exit(0);
            }
           
        }
        private async void fncSessionProcess()
        {
            LabelConnector.WebReference.LicenseService licenseService = new LabelConnector.WebReference.LicenseService();
            try
            {
                var sessionstate = licenseService.GetSessionState(Globalvariables.EncryptLoginMailID, "QBLC2021");
                if (Convert.ToInt32(sessionstate.SessionReference) != Globalvariables.SessionReference)
                {
                    if(!string.IsNullOrWhiteSpace(sessionstate.SessionReference))
                    {
                        Invoke((MethodInvoker)async delegate
                        {
                            MessageBox.Show("You are signed in on another device, so your current session has expired. " +
                                "session reference Id " + sessionstate.SessionReference + " : " + Globalvariables.SessionReference.ToString() +
                               "UserID: " + Globalvariables.LoginMailID, "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            Process.GetCurrentProcess().Kill();
                            Environment.Exit(0);
                        });
                    }
                   
                }
               
            }
            catch (Exception ex)
            {
                if (ex.Message == "The remote name could not be resolved: 'www.myproactivesoftware.com'")
                {
                    Invoke((MethodInvoker)async delegate
                    {
                        MessageBox.Show("Please check your Internet connection.", "Label Connector", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    });
                }

            }

        }
    }

    class DefaultCursor : System.IDisposable
    {
        public DefaultCursor()
        {
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Default;
        }

        public void Dispose()
        {
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Default;
        }
    }
    public class DataGridViewCustomButtonColumn : DataGridViewButtonColumn
    {
        public DataGridViewCustomButtonColumn()
        {
            this.CellTemplate = new DataGridViewCustomButtonCell();
        }
    }


    public class DataGridViewCustomButtonCell : DataGridViewButtonCell
    {
        private bool enabledValue;
        public bool Enabled
        {
            get
            {
                return enabledValue;
            }
            set
            {
                enabledValue = value;
            }
        }

        // Override the Clone method so that the Enabled property is copied. 
        public override object Clone()
        {
            DataGridViewCustomButtonCell cell =
                (DataGridViewCustomButtonCell)base.Clone();
            cell.Enabled = this.Enabled;
            return cell;
        }

        // By default, enable the button cell. 
        public DataGridViewCustomButtonCell()
        {
            this.enabledValue = true;
        }

        protected override void Paint(Graphics graphics,
            Rectangle clipBounds, Rectangle cellBounds, int rowIndex,
            DataGridViewElementStates elementState, object value,
            object formattedValue, string errorText,
            DataGridViewCellStyle cellStyle,
            DataGridViewAdvancedBorderStyle advancedBorderStyle,
            DataGridViewPaintParts paintParts)
        {
            // The button cell is disabled, so paint the border,   
            // background, and disabled button for the cell. 
            if (!this.enabledValue)
            {
                // Draw the cell background, if specified. 
                if ((paintParts & DataGridViewPaintParts.Background) ==
                    DataGridViewPaintParts.Background)
                {
                    SolidBrush cellBackground =
                        new SolidBrush(cellStyle.BackColor);
                    graphics.FillRectangle(cellBackground, cellBounds);
                    cellBackground.Dispose();
                }

                // Draw the cell borders, if specified. 
                if ((paintParts & DataGridViewPaintParts.Border) ==
                    DataGridViewPaintParts.Border)
                {
                    PaintBorder(graphics, clipBounds, cellBounds, cellStyle,
                        advancedBorderStyle);
                }

                // Calculate the area in which to draw the button.
                Rectangle buttonArea = cellBounds;
                Rectangle buttonAdjustment =
                    this.BorderWidths(advancedBorderStyle);
                buttonArea.X += buttonAdjustment.X;
                buttonArea.Y += buttonAdjustment.Y;
                buttonArea.Height -= buttonAdjustment.Height;
                buttonArea.Width -= buttonAdjustment.Width;

                // Draw the disabled button.                
                ButtonRenderer.DrawButton(graphics, buttonArea,
                    PushButtonState.Disabled);

                // Draw the disabled button text.  
                if (this.FormattedValue is String)
                {
                    TextRenderer.DrawText(graphics,
                        (string)this.FormattedValue,
                        this.DataGridView.Font,
                        buttonArea, SystemColors.GrayText);
                }
            }
            else
            {

                cellStyle.Font = new Font("Verdana", 9);
                base.Paint(graphics, clipBounds, cellBounds, rowIndex,
                    elementState, value, formattedValue, errorText,
                    cellStyle, advancedBorderStyle, paintParts);
            }
        }
    }


    #region "show dateTimepicker in DataGridView"
    //public class CalendarColumn : DataGridViewColumn
    //{
    //    public CalendarColumn()
    //        : base(new CalendarCell())
    //    {
    //    }

    //    public override DataGridViewCell CellTemplate
    //    {
    //        get
    //        {
    //            return base.CellTemplate;
    //        }
    //        set
    //        {
    //            // Ensure that the cell used for the template is a CalendarCell.
    //            if (value != null &&
    //                !value.GetType().IsAssignableFrom(typeof(CalendarCell)))
    //            {
    //                throw new InvalidCastException("Must be a CalendarCell");
    //            }
    //            base.CellTemplate = value;
    //        }
    //    }
    //}

    //public class CalendarCell : DataGridViewTextBoxCell
    //{

    //    public CalendarCell()
    //        : base()
    //    {
    //        // Use the short date format.
    //        this.Style.Format = "d";
    //    }

    //    public override void InitializeEditingControl(int rowIndex, object
    //        initialFormattedValue, DataGridViewCellStyle dataGridViewCellStyle)
    //    {
    //        // Set the value of the editing control to the current cell value.
    //        base.InitializeEditingControl(rowIndex, initialFormattedValue,
    //            dataGridViewCellStyle);
    //        CalendarEditingControl ctl =
    //            DataGridView.EditingControl as CalendarEditingControl;
    //        // Use the default row value when Value property is null.
    //        if (this.Value != System.DBNull.Value)
    //        {
    //            ctl.Value = (DateTime)this.DefaultNewRowValue;
    //        }
    //        else
    //        {
    //            ctl.Value = (DateTime)this.Value;
    //        }
    //    }

    //    public override Type EditType
    //    {
    //        get
    //        {
    //            // Return the type of the editing control that CalendarCell uses.
    //            return typeof(CalendarEditingControl);
    //        }
    //    }

    //    public override Type ValueType
    //    {
    //        get
    //        {
    //            // Return the type of the value that CalendarCell contains.

    //            return typeof(DateTime);
    //        }
    //    }

    //    public override object DefaultNewRowValue
    //    {
    //        get
    //        {
    //            // Use the current date and time as the default value.
    //            return DateTime.Now;
    //        }
    //    }
    //}

    //class CalendarEditingControl : DateTimePicker, IDataGridViewEditingControl
    //{
    //    DataGridView dataGridView;
    //    private bool valueChanged = false;
    //    int rowIndex;

    //    public CalendarEditingControl()
    //    {
    //        this.Format = DateTimePickerFormat.Short;
    //    }

    //    // Implements the IDataGridViewEditingControl.EditingControlFormattedValue 
    //    // property.
    //    public object EditingControlFormattedValue
    //    {
    //        get
    //        {
    //            return this.Value.ToShortDateString();
    //        }
    //        set
    //        {
    //            if (value is String)
    //            {
    //                try
    //                {
    //                    // This will throw an exception of the string is 
    //                    // null, empty, or not in the format of a date.
    //                    this.Value = DateTime.Parse((String)value);
    //                }
    //                catch
    //                {
    //                    // In the case of an exception, just use the 
    //                    // default value so we're not left with a null
    //                    // value.
    //                    this.Value = DateTime.Now;
    //                }
    //            }
    //        }
    //    }

    //    // Implements the 
    //    // IDataGridViewEditingControl.GetEditingControlFormattedValue method.
    //    public object GetEditingControlFormattedValue(
    //        DataGridViewDataErrorContexts context)
    //    {
    //        return EditingControlFormattedValue;
    //    }

    //    // Implements the 
    //    // IDataGridViewEditingControl.ApplyCellStyleToEditingControl method.
    //    public void ApplyCellStyleToEditingControl(
    //        DataGridViewCellStyle dataGridViewCellStyle)
    //    {
    //        this.Font = dataGridViewCellStyle.Font;
    //        this.CalendarForeColor = dataGridViewCellStyle.ForeColor;
    //        this.CalendarMonthBackground = dataGridViewCellStyle.BackColor;


    //    }

    //    // Implements the IDataGridViewEditingControl.EditingControlRowIndex 
    //    // property.
    //    public int EditingControlRowIndex
    //    {
    //        get
    //        {
    //            return rowIndex;
    //        }
    //        set
    //        {
    //            rowIndex = value;
    //        }
    //    }

    //    // Implements the IDataGridViewEditingControl.EditingControlWantsInputKey 
    //    // method.
    //    public bool EditingControlWantsInputKey(
    //        Keys key, bool dataGridViewWantsInputKey)
    //    {
    //        // Let the DateTimePicker handle the keys listed.
    //        switch (key & Keys.KeyCode)
    //        {
    //            case Keys.Left:
    //            case Keys.Up:
    //            case Keys.Down:
    //            case Keys.Right:
    //            case Keys.Home:
    //            case Keys.End:
    //            case Keys.PageDown:
    //            case Keys.PageUp:
    //                return true;
    //            default:
    //                return !dataGridViewWantsInputKey;
    //        }
    //    }

    //    // Implements the IDataGridViewEditingControl.PrepareEditingControlForEdit 
    //    // method.
    //    public void PrepareEditingControlForEdit(bool selectAll)
    //    {
    //        // No preparation needs to be done.
    //    }

    //    // Implements the IDataGridViewEditingControl
    //    // .RepositionEditingControlOnValueChange property.
    //    public bool RepositionEditingControlOnValueChange
    //    {
    //        get
    //        {
    //            return false;
    //        }
    //    }

    //    // Implements the IDataGridViewEditingControl
    //    // .EditingControlDataGridView property.
    //    public DataGridView EditingControlDataGridView
    //    {
    //        get
    //        {
    //            return dataGridView;
    //        }
    //        set
    //        {
    //            dataGridView = value;
    //        }
    //    }

    //    // Implements the IDataGridViewEditingControl
    //    // .EditingControlValueChanged property.
    //    public bool EditingControlValueChanged
    //    {
    //        get
    //        {
    //            return valueChanged;
    //        }
    //        set
    //        {
    //            valueChanged = value;
    //        }
    //    }

    //    // Implements the IDataGridViewEditingControl
    //    // .EditingPanelCursor property.
    //    public Cursor EditingPanelCursor
    //    {
    //        get
    //        {
    //            return base.Cursor;
    //        }
    //    }

    //    protected override void OnValueChanged(EventArgs eventargs)
    //    {
    //        // Notify the DataGridView that the contents of the cell
    //        // have changed.
    //        valueChanged = true;
    //        this.EditingControlDataGridView.NotifyCurrentCellDirty(true);
    //        base.OnValueChanged(eventargs);
    //    }
    //}


    #endregion



}