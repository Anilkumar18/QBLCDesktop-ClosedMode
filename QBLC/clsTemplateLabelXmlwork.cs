using Interop.QBFC13;
using iTextSharp.text;
using iTextSharp.text.pdf;
using NReco.PdfRenderer;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Drawing.Printing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using System.Xml;

namespace LabelConnector
{
    public class clsTemplateLabelXmlwork
    {
        ArrayList arrPropertyfield = new ArrayList();
        public const int pointmultiplier = 96;
        Dictionary<string, bool> openWith = new Dictionary<string, bool>();
        public clsTemplateLabelXmlwork()
        {

        }
        public clsTemplateLabelXmlwork(string cmbtemplatename, string templatename, string transactiontype, string width, string height)
        {
            cmbTemplateName = cmbtemplatename;
            TemplateName = templatename;
            TransactionType = transactiontype;
            Width = width;
            Height = height;
        }
        public clsTemplateLabelXmlwork(string templatename, string fieldId, string cmbfieldtype, string txtfieldname, string txtdatasource, string txttestdata, string cmbbarcodetype, string txtwordwrap, string txtlinebreak, string txtorientation, string txtimgwidth, string txtimgheight, string txtnewimgwidth, string txtxposition, string txtyposition, string txtfontsize, string txtxoriginalposition, string txtyoriginalposition)
        {

            TemplateName = templatename;
            Id = fieldId;
            fieldtype = cmbfieldtype;
            fieldname = txtfieldname;
            datasource = txtdatasource;
            testdata = txttestdata;
            barcodetype = cmbbarcodetype;
            wordwrap = txtwordwrap;
            linebreak = txtlinebreak;
            orientation = txtorientation;
            imgwidth = txtimgwidth;
            imgheight = txtimgheight;
            imgnewwidth = txtnewimgwidth;
            //dmheight = cmbdatamatrixheight;
            //dmwidth = cmbdatamatrixwidth;
            xposition = txtxposition;
            yposition = txtyposition;
            fontsize = txtfontsize;
            xoriginalposition = txtxoriginalposition;
            yoriginalposition = txtyoriginalposition;

        }

        //test
        public clsTemplateLabelXmlwork(string templatename, string fieldId, string cmbfieldtype, string txtfieldname, string txtdatasource, string txtdatasourcetext, string txttestdata, string cmbbarcodetype, string txtwordwrap, string txtlinebreak, string txtorientation, string txtimgwidth, string txtimgheight, string txtimgnewwidth, string txtxposition, string txtyposition, string txtfontsize, string txtdelimiter, string txtxoriginalposition, string txtyoriginalposition, string txtbarcodestring, string txtbarcharvisible, string txtDataCharView, string txtDataCharAlign, string txtfontbold, string txttextAlign)
        {
            TemplateName = templatename;
            Id = fieldId;
            fieldtype = cmbfieldtype;
            fieldname = txtfieldname;
            datasource = txtdatasource;
            datasourcetext = txtdatasourcetext;
            testdata = txttestdata;
            barcodetype = cmbbarcodetype;
            wordwrap = txtwordwrap;
            linebreak = txtlinebreak;
            orientation = txtorientation;
            imgwidth = txtimgwidth;
            imgheight = txtimgheight;
            // dmheight = cmbdatamatrixheight;
            // dmwidth = cmbdatamatrixwidth;
            imgnewwidth = txtimgnewwidth;
            xposition = txtxposition;
            yposition = txtyposition;
            fontsize = txtfontsize;
            delimiter = txtdelimiter;
            xoriginalposition = txtxoriginalposition;
            yoriginalposition = txtyoriginalposition;
            barcodestring = txtbarcodestring;
            barcharvisible = txtbarcharvisible;
            DataCharView = txtDataCharView;
            DataCharAlign = txtDataCharAlign;
            fontbold = txtfontbold;
            textAlign = txttextAlign;
        }
        // public static string SetValuesForTransType { get; set; }
        public clsTemplateLabelXmlwork(string templatename, string fieldId, string imgfield, string imagename, string imgpath, string resizeimgagepath, string aspatio, string txtorientation, string txtimgwidth, string txtimgheight, string txtxposition, string txtyposition, string txtxoriginalposition, string txtyoriginalposition, string image, string txtdatasource, string txtdatasourcetext,string useRadioFixedImage, string useRadioVariableImage)
        {
            TemplateName = templatename;
            Id = fieldId;
            fieldtype = imgfield;
            fieldname = imagename;
            originimgpath = imgpath;
            resizeimgpath = resizeimgagepath;
            aspectratio = aspatio;
            orientation = txtorientation;
            imgwidth = txtimgwidth;
            imgheight = txtimgheight;
            xposition = txtxposition;
            yposition = txtyposition;
            xoriginalposition = txtxoriginalposition;
            yoriginalposition = txtyoriginalposition;
            imagestring = image;
            datasource = txtdatasource;
            datasourcetext = txtdatasourcetext;
            UseFixedImage = useRadioFixedImage;
            UseVariableImage = useRadioVariableImage;

        }
        public clsTemplateLabelXmlwork(string templatename, string fieldId, string imgfield, string imagename, string imgpath, string resizeimgagepath, string txtorientation, string txtimgwidth, string txtimgheight, string txtxposition, string txtyposition, string txtxoriginalposition, string txtyoriginalposition, string image)
        {
            int imgwidthpixels;
            TemplateName = templatename;
            Id = fieldId;
            fieldtype = imgfield;
            fieldname = imagename;
            originimgpath = imgpath;
            resizeimgpath = resizeimgagepath;
            orientation = txtorientation;
            //imgwidthpixels= Convert.ToInt32(txtimgwidth) * pointmultiplier;
            //imgwidth = Convert.ToString(imgwidthpixels);
            imgwidth = txtimgwidth;
            imgheight = txtimgheight;
            xposition = txtxposition;
            yposition = txtyposition;
            xoriginalposition = txtxoriginalposition;
            yoriginalposition = txtyoriginalposition;
            imagestring = image;
        }
        public string TemplateName { get; set; }
        public string cmbTemplateName { get; set; }
        public string TransactionType { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }

        //Template details field
        public string Id { get; set; }
        public string fieldtype { get; set; }
        public string gridfieldname { get; set; }
        public string fieldname { get; set; }
        public string datasource { get; set; }
        public string datasourcetext { get; set; }
        public string testdata { get; set; }
        public string barcodetype { get; set; }
        public string wordwrap { get; set; }
        public string linebreak { get; set; }
        public string delimiter { get; set; }
        public string orientation { get; set; }
        public string xposition { get; set; }
        public string yposition { get; set; }
        public string imgwidth { get; set; }
        public string imgheight { get; set; }
        public string imgnewwidth { get; set; }
        public string dmheight { get; set; }
        public string dmwidth { get; set; }
        public string fontsize { get; set; }
        public string imgpath { get; set; }
        public string resizeimgpath { get; set; }
        public string originimgpath { get; set; }
        public string xoriginalposition { get; set; }
        public string yoriginalposition { get; set; }
        public string barcodestring { get; set; }
        public string barcharvisible { get; set; }
        public string DataCharView { get; set; }
        public string DataCharAlign { get; set; }
        public string fontbold { get; set; }
        public string textAlign { get; set; }
        public string imagestring { get; set; }
        public string aspectratio { get; set; }

        public string UseFixedImage { get; set; }

        public string UseVariableImage { get; set; }

        //public List<clsTemplateLabelXmlwork> lsthederdata { get; set; }

        public static string SetValuesForTransTypetest { get; set; }

        //create New Template xml
        public void CreateTemplateXml(clsTemplateLabelXmlwork pobjTemplatexml, string pstrtemplatefilepath)
        {
            //string strStartupPath = System.Windows.Forms.Application.StartupPath + @"\imgtemplate.xml";
            XmlTextWriter objXmlTextWriter = new XmlTextWriter(pstrtemplatefilepath, System.Text.Encoding.UTF8);
            objXmlTextWriter.WriteStartDocument(true);
            objXmlTextWriter.Formatting = Formatting.Indented;
            objXmlTextWriter.Indentation = 2;

            objXmlTextWriter.WriteStartElement("QuickBooks");

            objXmlTextWriter.WriteStartElement("template");
            objXmlTextWriter.WriteAttributeString("templatename", pobjTemplatexml.TemplateName);
            objXmlTextWriter.WriteElementString("transtype", pobjTemplatexml.TransactionType);
            objXmlTextWriter.WriteElementString("width", pobjTemplatexml.Width);
            objXmlTextWriter.WriteElementString("height", pobjTemplatexml.Height);

            objXmlTextWriter.WriteEndElement();
            objXmlTextWriter.WriteEndElement();

            objXmlTextWriter.Flush();
            objXmlTextWriter.Close();

        }

        //Add or update template header part : 08-Jan-2019
        public bool AddUpdateTemplateHeader(clsTemplateLabelXmlwork pobjTemplatexml)
        {
            bool isresult = false;
            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist")))
                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist"));

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.cmbTemplateName + ".xml");

            XmlDocument doc = new XmlDocument();
            try
            {
                if (File.Exists(strStartupPath)) //update
                {
                    doc.Load(strStartupPath);

                    XmlNodeList xNodeList = doc.GetElementsByTagName("template");

                    for (int i = 0; i < xNodeList.Count; i++)
                    {

                        XmlAttributeCollection xmlattrc = xNodeList[i].Attributes;

                        //XML Attribute Name and Value returned
                        //if (xmlattrc[0].Name == "templatename" && xmlattrc[0].Value.ToString().ToLower().Trim() == pobjTemplatexml.cmbTemplateName.ToLower().Trim())
                        //{

                        //string ss = xmlattrc[i].InnerText;
                        // xNodeList[i]["templatename"].InnerText = pobjTemplatexml.TemplateName;
                        xmlattrc[i].InnerText = pobjTemplatexml.TemplateName;
                        xNodeList[i]["transtype"].InnerText = pobjTemplatexml.TransactionType;
                        xNodeList[i]["width"].InnerText = pobjTemplatexml.Width;
                        xNodeList[i]["height"].InnerText = pobjTemplatexml.Height;
                        //}
                    }

                    doc.Save(strStartupPath);
                    //xml file Rename
                    //if (pobjTemplatexml.cmbTemplateName.ToLower().Trim() != pobjTemplatexml.TemplateName.ToLower().Trim())
                    //{
                    string path1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.cmbTemplateName + ".xml");
                    string path2 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName + ".xml");
                    File.Move(path1, path2);


                    // }

                }
                else
                {
                    //create template xml if not exist first time
                    CreateTemplateXml(pobjTemplatexml, strStartupPath);
                }
                isresult = true;
            }
            catch (Exception exp)
            {
                isresult = false;
            }

            return isresult;

        }

        // Add or Update template details part : 08-Jan-2019
        public bool AddTemplateDetails(clsTemplateLabelXmlwork pobjTemplatexml, string pstrbarcodecategory, string pstrtranstype)
        {
            bool blnIsSuccess = false;

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            bool istemplatefieldexist = false;
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pobjTemplatexml.TemplateName.ToString() + "']");
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {
                            // if (xnfield.ChildNodes[2].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                            if (xnfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                            {
                                istemplatefieldexist = true;
                                blnIsSuccess = false;
                                break;
                            }
                        }
                    }

                    if (istemplatefieldexist == false) //template field does not exist add new
                    {

                        XmlElement elefield = doc.CreateElement("field");

                        XmlElement eleId = doc.CreateElement("Id");
                        eleId.InnerText = AutoIncrement();

                        elefield.AppendChild(eleId);

                        XmlElement eletype = doc.CreateElement("fieldtype");
                        eletype.InnerText = pobjTemplatexml.fieldtype.ToString();
                        elefield.AppendChild(eletype);

                        XmlElement elefieldname = doc.CreateElement("fieldname");
                        elefieldname.InnerText = pobjTemplatexml.fieldname.ToString();
                        elefield.AppendChild(elefieldname);

                        XmlElement eledatasource = doc.CreateElement("datasource");
                        eledatasource.InnerText = pobjTemplatexml.datasource.ToString();
                        elefield.AppendChild(eledatasource);

                        XmlElement eledatasourcetext = doc.CreateElement("datasourcetext");
                        eledatasourcetext.InnerText = pobjTemplatexml.datasourcetext.ToString();
                        elefield.AppendChild(eledatasourcetext);


                        XmlElement eletestdata = doc.CreateElement("testdata");
                        eletestdata.InnerText = pobjTemplatexml.testdata.ToString();
                        elefield.AppendChild(eletestdata);

                        if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "text")
                        {
                            XmlElement eledelimiter = doc.CreateElement("delimiter");
                            eledelimiter.InnerText = pobjTemplatexml.delimiter != "" ? pobjTemplatexml.delimiter.ToString() : null;
                            elefield.AppendChild(eledelimiter);

                            XmlElement elfontbold = doc.CreateElement("fontbold");
                            elfontbold.InnerText = pobjTemplatexml.fontbold.ToString();
                            elefield.AppendChild(elfontbold);

                            XmlElement eltextalign = doc.CreateElement("textalign");
                            eltextalign.InnerText = pobjTemplatexml.textAlign.ToString();
                            elefield.AppendChild(eltextalign);
                        }
                        if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "barcode")
                        {
                            XmlElement elebarcodetype = doc.CreateElement("barcodetype");
                            elebarcodetype.InnerText = pobjTemplatexml.barcodetype.ToString();
                            elefield.AppendChild(elebarcodetype);
                            //save delimiter for qrcode

                            XmlElement eledelimiter = doc.CreateElement("delimiter");
                            eledelimiter.InnerText = pobjTemplatexml.delimiter != "" ? pobjTemplatexml.delimiter.ToString() : "";
                            elefield.AppendChild(eledelimiter);


                            XmlElement elebarcharvisible = doc.CreateElement("barcharvisible");
                            elebarcharvisible.InnerText = pobjTemplatexml.barcharvisible.ToString();
                            elefield.AppendChild(elebarcharvisible);

                            XmlElement eleDataCharView = doc.CreateElement("DataCharView");
                            eleDataCharView.InnerText = pobjTemplatexml.DataCharView.ToString();
                            elefield.AppendChild(eleDataCharView);

                            XmlElement eleDataCharAlign = doc.CreateElement("DataCharAlign");
                            eleDataCharAlign.InnerText = pobjTemplatexml.DataCharAlign.ToString();
                            elefield.AppendChild(eleDataCharAlign);
                        }
                        else
                        {

                            XmlElement elewordwrap = doc.CreateElement("wordwrap");
                            elewordwrap.InnerText = pobjTemplatexml.wordwrap != "" ? pobjTemplatexml.wordwrap.ToString() : "0";
                            elefield.AppendChild(elewordwrap);
                            //Add line break char
                            // if (!string.IsNullOrWhiteSpace(pobjTemplatexml.linebreak.ToString()))
                            //{
                            if (pstrtranstype == "item list" && pobjTemplatexml.datasource.ToLower().Trim() == "description")
                            {
                                XmlElement elewordwraplinebreak = doc.CreateElement("linebreak");
                                elewordwraplinebreak.InnerText = !string.IsNullOrWhiteSpace(pobjTemplatexml.linebreak) ? pobjTemplatexml.linebreak.ToString() : null;
                                elefield.AppendChild(elewordwraplinebreak);
                            }
                            //}
                        }
                        //if (pstrbarcodecategory == "qrcode")
                        //{

                        // }


                        XmlElement eleorientation = doc.CreateElement("orientation");
                        eleorientation.InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                        elefield.AppendChild(eleorientation);

                        XmlElement elexpos = doc.CreateElement("xposition");
                        elexpos.InnerText = pobjTemplatexml.xposition.ToString();
                        elefield.AppendChild(elexpos);

                        XmlElement eleypos = doc.CreateElement("yposition");
                        eleypos.InnerText = pobjTemplatexml.yposition.ToString();
                        elefield.AppendChild(eleypos);

                        XmlElement elexopos = doc.CreateElement("xoriginalposition");
                        elexopos.InnerText = pobjTemplatexml.xoriginalposition.ToString();
                        elefield.AppendChild(elexopos);

                        XmlElement eleyopos = doc.CreateElement("yoriginalposition");
                        eleyopos.InnerText = pobjTemplatexml.yoriginalposition.ToString();
                        elefield.AppendChild(eleyopos);

                        XmlElement elefontsize = doc.CreateElement("fontsize");
                        elefontsize.InnerText = pobjTemplatexml.fontsize.ToString();
                        elefield.AppendChild(elefontsize);

                        if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "barcode")
                        {
                            XmlElement eleimgwidth = doc.CreateElement("imgwidth");
                            eleimgwidth.InnerText = pobjTemplatexml.imgwidth.ToString();
                            elefield.AppendChild(eleimgwidth);

                            XmlElement eleimgheight = doc.CreateElement("imgheight");
                            eleimgheight.InnerText = pobjTemplatexml.imgheight.ToString();
                            elefield.AppendChild(eleimgheight);

                            XmlElement elenewimgheight = doc.CreateElement("imgnewwidth");
                            elenewimgheight.InnerText = pobjTemplatexml.imgnewwidth.ToString();
                            elefield.AppendChild(elenewimgheight);
                        }
                        XmlElement elebarcodestring = doc.CreateElement("barcodestring");
                        elebarcodestring.InnerText = pobjTemplatexml.barcodestring.ToString();
                        elefield.AppendChild(elebarcodestring);

                        el.AppendChild(elefield);
                        blnIsSuccess = true;

                    }


                } //end if
            }
            catch (XmlException xmlexc)
            {
                blnIsSuccess = false;
            }

            doc.Save(strStartupPath);
            return blnIsSuccess;

        }


        //Add or update template image part:01-Apr-2019
        public bool AddTemplateImageDetails(clsTemplateLabelXmlwork pobjTemplatexml)
        {
            bool blnIsSuccess = false;

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            bool istemplatefieldexist = false;
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pobjTemplatexml.TemplateName.ToString() + "']");
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {
                            // if (xnfield.ChildNodes[2].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                            if (xnfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                            {
                                istemplatefieldexist = true;
                                blnIsSuccess = false;
                                break;
                            }
                        }
                    }

                    if (istemplatefieldexist == false) //template field does not exist add new
                    {

                        XmlElement elefield = doc.CreateElement("field");

                        XmlElement eleId = doc.CreateElement("Id");
                        eleId.InnerText = AutoIncrement();

                        elefield.AppendChild(eleId);

                        XmlElement eletype = doc.CreateElement("fieldtype");
                        eletype.InnerText = pobjTemplatexml.fieldtype.ToString();
                        elefield.AppendChild(eletype);

                        XmlElement elefieldname = doc.CreateElement("fieldname");
                        elefieldname.InnerText = pobjTemplatexml.fieldname.ToString();
                        elefield.AppendChild(elefieldname);

                        XmlElement eleimgpath = doc.CreateElement("imgpath");
                        eleimgpath.InnerText = pobjTemplatexml.originimgpath.ToString();
                        elefield.AppendChild(eleimgpath);

                        XmlElement eledataresizeimg = doc.CreateElement("resizeimgpath");
                        eledataresizeimg.InnerText = pobjTemplatexml.resizeimgpath.ToString();
                        elefield.AppendChild(eledataresizeimg);

                        XmlElement eleaspectratio = doc.CreateElement("aspectratio");
                        eleaspectratio.InnerText = pobjTemplatexml.aspectratio.ToString();
                        elefield.AppendChild(eleaspectratio);

                        //XmlElement eletestdata = doc.CreateElement("testdata");
                        //eletestdata.InnerText = pobjTemplatexml.testdata.ToString();
                        //elefield.AppendChild(eletestdata);
                        //if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "barcode")
                        //{
                        //    XmlElement elebarcodetype = doc.CreateElement("barcodetype");
                        //    elebarcodetype.InnerText = pobjTemplatexml.barcodetype.ToString();
                        //    elefield.AppendChild(elebarcodetype);
                        //}

                        //XmlElement elewordwrap = doc.CreateElement("wordwrap");
                        //elewordwrap.InnerText = pobjTemplatexml.wordwrap != "" ? pobjTemplatexml.wordwrap.ToString() : "0";
                        //elefield.AppendChild(elewordwrap);

                        XmlElement eleorientation = doc.CreateElement("orientation");
                        eleorientation.InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                        elefield.AppendChild(eleorientation);

                        XmlElement elexpos = doc.CreateElement("xposition");
                        elexpos.InnerText = pobjTemplatexml.xposition.ToString();
                        elefield.AppendChild(elexpos);

                        XmlElement eleypos = doc.CreateElement("yposition");
                        eleypos.InnerText = pobjTemplatexml.yposition.ToString();
                        elefield.AppendChild(eleypos);

                        XmlElement elexopos = doc.CreateElement("xoriginalposition");
                        elexopos.InnerText = pobjTemplatexml.xoriginalposition.ToString();
                        elefield.AppendChild(elexopos);

                        XmlElement eleyopos = doc.CreateElement("yoriginalposition");
                        eleyopos.InnerText = pobjTemplatexml.yoriginalposition.ToString();
                        elefield.AppendChild(eleyopos);

                        XmlElement eleimagestring = doc.CreateElement("imagestring");
                        eleimagestring.InnerText = pobjTemplatexml.imagestring.ToString();
                        elefield.AppendChild(eleimagestring);

                        //XmlElement elefontsize = doc.CreateElement("fontsize");
                        //elefontsize.InnerText = pobjTemplatexml.fontsize.ToString();
                        //elefield.AppendChild(elefontsize);

                        //add image type 01-Apr-2019

                        XmlElement eleimgwidth = doc.CreateElement("imgwidth");
                        eleimgwidth.InnerText = pobjTemplatexml.imgwidth.ToString();
                        elefield.AppendChild(eleimgwidth);

                        XmlElement eleimgheight = doc.CreateElement("imgheight");
                        eleimgheight.InnerText = pobjTemplatexml.imgheight.ToString();
                        elefield.AppendChild(eleimgheight);

                        XmlElement eledatasource = doc.CreateElement("datasource");
                        eledatasource.InnerText = pobjTemplatexml.datasource.ToString();
                        elefield.AppendChild(eledatasource);

                        XmlElement eledatasourceText = doc.CreateElement("datasourcetext");
                        eledatasourceText.InnerText = pobjTemplatexml.datasourcetext.ToString();
                        elefield.AppendChild(eledatasourceText);

                        XmlElement eleUsefixedimage = doc.CreateElement("UseFixedImage");
                        eleUsefixedimage.InnerText = pobjTemplatexml.UseFixedImage.ToString();
                        elefield.AppendChild(eleUsefixedimage);

                        XmlElement eleUsevariableimage = doc.CreateElement("UseVariableImage");
                        eleUsevariableimage.InnerText = pobjTemplatexml.UseVariableImage.ToString();
                        elefield.AppendChild(eleUsevariableimage);

                        el.AppendChild(elefield);
                        blnIsSuccess = true;

                    }


                } //end if
            }
            catch (XmlException xmlexc)
            {
                blnIsSuccess = false;
            }

            doc.Save(strStartupPath);
            return blnIsSuccess;

        }

        public string AutoGenerateLineFieldName(string Fieldname)
        {
            string splitLineName = ""; string newLineName = "";

            string getlatesFieldName = Fieldname;

            char[] chararray = getlatesFieldName.ToCharArray();

            for (int i = 4; i < chararray.Length; i++)
            {
                splitLineName = splitLineName + chararray[i];
            }
            int nextnum = Convert.ToInt32(splitLineName) + 1;

            newLineName = ("Line" + nextnum);

            return newLineName;
        }

        public bool AddTemplateLineDetails(clsTemplateLabelXmlwork pobjTemplatexml)
        {
            bool blnIsSuccess = false;
            string splitLineName = "";
            var newfieldname = String.Empty;
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            // int Pixelwidth = (Convert.ToInt32(pobjTemplatexml.imgwidth) *2) * pointmultiplier;

            bool istemplatefieldexist = false;
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);

                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");

                    int count = tempfieldnodelist.Count;
                    newfieldname = "Line" + count;
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {
                            if (xnfield["fieldname"].InnerText.ToString().ToLower().Trim() == newfieldname.ToLower().Trim())
                            {
                                newfieldname = AutoGenerateLineFieldName(xnfield["fieldname"].InnerText.ToString().ToLower().Trim());
                            }

                        }
                    }

                    if (istemplatefieldexist == false) //template field does not exist add new
                    {

                        XmlElement elefield = doc.CreateElement("field");

                        XmlElement eleId = doc.CreateElement("Id");
                        eleId.InnerText = AutoIncrement();

                        elefield.AppendChild(eleId);

                        XmlElement eletype = doc.CreateElement("fieldtype");
                        eletype.InnerText = pobjTemplatexml.fieldtype.ToString();
                        elefield.AppendChild(eletype);

                        XmlElement elefieldname = doc.CreateElement("fieldname");
                        elefieldname.InnerText = newfieldname.ToString();
                        elefield.AppendChild(elefieldname);

                        XmlElement eledatasource = doc.CreateElement("imgpath");
                        eledatasource.InnerText = pobjTemplatexml.originimgpath.ToString();
                        elefield.AppendChild(eledatasource);

                        XmlElement eledataresizeimg = doc.CreateElement("resizeimgpath");
                        eledataresizeimg.InnerText = pobjTemplatexml.resizeimgpath.ToString();
                        elefield.AppendChild(eledataresizeimg);

                        XmlElement eleorientation = doc.CreateElement("orientation");
                        eleorientation.InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                        elefield.AppendChild(eleorientation);

                        XmlElement elexpos = doc.CreateElement("xposition");
                        elexpos.InnerText = pobjTemplatexml.xposition.ToString();
                        elefield.AppendChild(elexpos);

                        XmlElement eleypos = doc.CreateElement("yposition");
                        eleypos.InnerText = pobjTemplatexml.yposition.ToString();
                        elefield.AppendChild(eleypos);

                        XmlElement elexopos = doc.CreateElement("xoriginalposition");
                        elexopos.InnerText = pobjTemplatexml.xoriginalposition.ToString();
                        elefield.AppendChild(elexopos);

                        XmlElement eleyopos = doc.CreateElement("yoriginalposition");
                        eleyopos.InnerText = pobjTemplatexml.yoriginalposition.ToString();
                        elefield.AppendChild(eleyopos);

                        XmlElement eleimagestring = doc.CreateElement("imagestring");
                        eleimagestring.InnerText = pobjTemplatexml.imagestring.ToString();
                        elefield.AppendChild(eleimagestring);

                        XmlElement eleimgwidth = doc.CreateElement("imgwidth");
                        eleimgwidth.InnerText = pobjTemplatexml.imgwidth.ToString();
                        // eleimgwidth.InnerText = Pixelwidth.ToString();
                        elefield.AppendChild(eleimgwidth);

                        XmlElement eleimgheight = doc.CreateElement("imgheight");
                        eleimgheight.InnerText = pobjTemplatexml.imgheight.ToString();
                        elefield.AppendChild(eleimgheight);


                        el.AppendChild(elefield);
                        blnIsSuccess = true;

                    }


                } //end if
            }
            catch (XmlException xmlexc)
            {
                blnIsSuccess = false;
            }

            doc.Save(strStartupPath);
            return blnIsSuccess;

        }

        public bool LineBreakNodeExist(clsTemplateLabelXmlwork pobjTemplatexml, string pstrdatasourcename, string pstrchangedatasource)
        {
            bool blnIsSuccess = false;
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //  doc.PreserveWhitespace = true;

                //XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pobjTemplatexml.TemplateName.ToString() + "']");
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {

                            if ((xnfield["datasource"].InnerText.ToString().ToLower().Trim() == pstrdatasourcename.ToString().ToLower().Trim()) || (xnfield["datasource"].InnerText.ToString().ToLower().Trim() == pstrchangedatasource)) //fieldname
                            {


                                if (xnfield["linebreak"] == null) //check if linebreak not exist
                                {
                                    //Add linebreak empty node

                                    XmlElement elem = doc.CreateElement("linebreak");
                                    elem.InnerText = null;
                                    //Add the node to the document.
                                    xnfield.AppendChild(elem);
                                    el.AppendChild(xnfield);
                                    doc.DocumentElement.AppendChild(el);


                                    blnIsSuccess = true;
                                    break;

                                }


                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                blnIsSuccess = false;
            }
            doc.Save(strStartupPath);
            return blnIsSuccess;
        }

        public bool UpdateLineTemplateDetails(clsTemplateLabelXmlwork pobjTemplatexml, string pstrgridfieldname, string pstrbarcodecategory, string pstrtranstype)
        {
            bool blnIsSuccess = false;
            //string strStartupPath = System.Windows.Forms.Application.StartupPath + @"\" + pstrtemplatename + ".xml";
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            bool istemplatefieldexist = false;
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pobjTemplatexml.TemplateName.ToString() + "']");
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {
                            // if (xnfield.ChildNodes[2].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                            if (pobjTemplatexml.fieldname.ToString().ToLower().Trim() != pstrgridfieldname.ToLower().Trim())
                            {
                                if (xnfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                                {
                                    istemplatefieldexist = true;
                                    blnIsSuccess = false;
                                    break;
                                }
                            }
                        }
                    }

                    //string param = "205330890";
                    //update selected field name
                    if (istemplatefieldexist == false)
                    {
                        foreach (XmlNode xmlfield in tempfieldnodelist)
                        {
                            if (xmlfield != null)
                            {
                                //if (xmlfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim())
                                if (xmlfield["Id"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.Id.ToString().ToLower().Trim())
                                {
                                    if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "line")
                                    {
                                        int Pixelwidth = (Convert.ToInt32(pobjTemplatexml.imgwidth) * 2) * pointmultiplier;
                                        xmlfield["fieldname"].InnerText = pobjTemplatexml.fieldname.ToString();
                                        xmlfield["fieldtype"].InnerText = pobjTemplatexml.fieldtype.ToString();
                                        xmlfield["imgpath"].InnerText = pobjTemplatexml.originimgpath.ToString();
                                        xmlfield["resizeimgpath"].InnerText = pobjTemplatexml.resizeimgpath.ToString();
                                        xmlfield["orientation"].InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                        xmlfield["imgwidth"].InnerText = Pixelwidth.ToString();
                                        xmlfield["imgheight"].InnerText = pobjTemplatexml.imgheight.ToString();
                                        xmlfield["xposition"].InnerText = pobjTemplatexml.xposition.ToString();
                                        xmlfield["yposition"].InnerText = pobjTemplatexml.yposition.ToString();
                                        xmlfield["xoriginalposition"].InnerText = pobjTemplatexml.xoriginalposition.ToString();
                                        xmlfield["yoriginalposition"].InnerText = pobjTemplatexml.yoriginalposition.ToString();
                                        xmlfield["imagestring"].InnerText = pobjTemplatexml.imagestring.ToString();
                                    }
                                }
                                blnIsSuccess = true;

                            }
                        }

                    }


                } //end if
            }
            catch (XmlException xmlexc)
            {
                blnIsSuccess = false;
            }

            doc.Save(strStartupPath);
            return blnIsSuccess;

        }

        public bool UpdateTemplateDetails(clsTemplateLabelXmlwork pobjTemplatexml, string pstrgridfieldname, string pstrbarcodecategory, string pstrtranstype)
        {
            bool blnIsSuccess = false;
            //string strStartupPath = System.Windows.Forms.Application.StartupPath + @"\" + pstrtemplatename + ".xml";
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            bool istemplatefieldexist = false;
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pobjTemplatexml.TemplateName.ToString() + "']");
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {
                            // if (xnfield.ChildNodes[2].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                            if (pobjTemplatexml.fieldname.ToString().ToLower().Trim() != pstrgridfieldname.ToLower().Trim())
                            {
                                if (xnfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                                {
                                    istemplatefieldexist = true;
                                    blnIsSuccess = false;
                                    break;
                                }
                            }
                        }
                    }

                    //string param = "205330890";
                    //update selected field name
                    if (istemplatefieldexist == false)
                    {
                        foreach (XmlNode xmlfield in tempfieldnodelist)
                        {
                            if (xmlfield != null)
                            {
                                //if (xmlfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim())
                                if (xmlfield["Id"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.Id.ToString().ToLower().Trim())
                                {
                                    //Text Type
                                    if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "text")
                                    {
                                        if (xmlfield["fontbold"] == null)
                                        {
                                            //create title node
                                            XmlNode nodeTitle = doc.CreateElement("fontbold");
                                            //add value for it
                                            if (pobjTemplatexml.fontbold != null)
                                            {
                                                nodeTitle.InnerText = pobjTemplatexml.fontbold.ToString();
                                            }
                                            else
                                            {
                                                nodeTitle.InnerText = "true";
                                            }

                                            xmlfield.AppendChild(nodeTitle);

                                        }
                                        else
                                        {
                                            xmlfield["fontbold"].InnerText = pobjTemplatexml.fontbold.ToString();
                                        }
                                        if (xmlfield["textalign"] == null)
                                        {
                                            //create title node
                                            XmlNode nodeTitle = doc.CreateElement("textalign");
                                            //add value for it
                                            if (pobjTemplatexml.textAlign != null)
                                            {
                                                nodeTitle.InnerText = pobjTemplatexml.textAlign.ToString();
                                            }
                                            else
                                            {
                                                nodeTitle.InnerText = "0";
                                            }

                                            xmlfield.AppendChild(nodeTitle);

                                        }
                                        else
                                        {
                                            xmlfield["textalign"].InnerText = pobjTemplatexml.textAlign.ToString();
                                        }
                                        //xmlfield["fieldtype"].InnerText = pobjTemplatexml.fieldtype.ToString();
                                        xmlfield["fieldname"].InnerText = pobjTemplatexml.fieldname.ToString();
                                        xmlfield["datasource"].InnerText = pobjTemplatexml.datasource.ToString();
                                        xmlfield["datasourcetext"].InnerText = pobjTemplatexml.datasourcetext.ToString();
                                        xmlfield["testdata"].InnerText = pobjTemplatexml.testdata.ToString();
                                        if (xmlfield["delimiter"] != null)
                                        {
                                            xmlfield["delimiter"].InnerText = !string.IsNullOrWhiteSpace(pobjTemplatexml.delimiter) ? Convert.ToString(pobjTemplatexml.delimiter) : "";
                                        }
                                        else
                                        {
                                            XmlElement eledelimiter = doc.CreateElement("delimiter");
                                            eledelimiter.InnerText = !string.IsNullOrWhiteSpace(pobjTemplatexml.delimiter) ? Convert.ToString(pobjTemplatexml.delimiter) : "";

                                            xmlfield.ReplaceChild(eledelimiter, xmlfield["barcodestring"]);
                                        }

                                        xmlfield["wordwrap"].InnerText = pobjTemplatexml.wordwrap != "" ? pobjTemplatexml.wordwrap.ToString() : "0";
                                        //if (!string.IsNullOrWhiteSpace(pobjTemplatexml.linebreak.ToString()))
                                        //{
                                        if (pstrtranstype == "item list" && pobjTemplatexml.datasource.ToLower().Trim() == "description")
                                        {
                                            if (xmlfield["linebreak"] == null)
                                            {
                                                //create title node
                                                XmlNode nodeTitle = doc.CreateElement("linebreak");
                                                //add value for it                                                
                                                nodeTitle.InnerText = !string.IsNullOrWhiteSpace(pobjTemplatexml.linebreak) ? pobjTemplatexml.linebreak.ToString().Trim() : null; ;
                                                xmlfield.AppendChild(nodeTitle);

                                            }
                                            else
                                            {
                                                xmlfield["linebreak"].InnerText = !string.IsNullOrWhiteSpace(pobjTemplatexml.linebreak) ? pobjTemplatexml.linebreak.ToString().Trim() : null;
                                            }
                                        }
                                        //}
                                        xmlfield["orientation"].InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                        xmlfield["xposition"].InnerText = pobjTemplatexml.xposition.ToString();
                                        xmlfield["yposition"].InnerText = pobjTemplatexml.yposition.ToString();
                                        xmlfield["fontsize"].InnerText = pobjTemplatexml.fontsize.ToString();
                                        xmlfield["xoriginalposition"].InnerText = pobjTemplatexml.xoriginalposition.ToString();
                                        xmlfield["yoriginalposition"].InnerText = pobjTemplatexml.yoriginalposition.ToString();
                                        xmlfield["fontsize"].InnerText = pobjTemplatexml.fontsize.ToString();
                                    }
                                    else if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "barcode")
                                    {
                                        //BarCode Type
                                        xmlfield["fieldname"].InnerText = pobjTemplatexml.fieldname.ToString();

                                        xmlfield["datasource"].InnerText = pobjTemplatexml.datasource.ToString();
                                        xmlfield["datasourcetext"].InnerText = pobjTemplatexml.datasourcetext.ToString();


                                        xmlfield["barcodetype"].InnerText = pobjTemplatexml.barcodetype.ToString();
                                        xmlfield["testdata"].InnerText = pobjTemplatexml.testdata.ToString();

                                        //if (pstrbarcodecategory == "qrcode")
                                        // {
                                        if (xmlfield["delimiter"] != null)
                                        {
                                            xmlfield["delimiter"].InnerText = pobjTemplatexml.delimiter != "" ? pobjTemplatexml.delimiter.ToString() : "";
                                        }
                                        // }
                                        //else#1
                                        //{

                                        //    xmlfield["wordwrap"].InnerText = pobjTemplatexml.wordwrap != "" ? pobjTemplatexml.wordwrap.ToString() : "0";
                                        //}

                                        xmlfield["barcharvisible"].InnerText = pobjTemplatexml.barcharvisible.ToString();
                                        xmlfield["orientation"].InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                        xmlfield["xposition"].InnerText = pobjTemplatexml.xposition.ToString();
                                        xmlfield["yposition"].InnerText = pobjTemplatexml.yposition.ToString();
                                        xmlfield["imgwidth"].InnerText = pobjTemplatexml.imgwidth.ToString();
                                        xmlfield["imgheight"].InnerText = pobjTemplatexml.imgheight.ToString();
                                        xmlfield["xoriginalposition"].InnerText = pobjTemplatexml.xoriginalposition.ToString();
                                        xmlfield["yoriginalposition"].InnerText = pobjTemplatexml.yoriginalposition.ToString();
                                        xmlfield["barcharvisible"].InnerText = pobjTemplatexml.barcharvisible.ToString();
                                        xmlfield["barcodestring"].InnerText = pobjTemplatexml.barcodestring.ToString();
                                        xmlfield["DataCharView"].InnerText = pobjTemplatexml.DataCharView.ToString();
                                        xmlfield["DataCharAlign"].InnerText = pobjTemplatexml.DataCharAlign.ToString();
                                        if (xmlfield["imgnewwidth"] != null)
                                        {
                                            xmlfield["imgnewwidth"].InnerText = pobjTemplatexml.imgnewwidth != "" ? pobjTemplatexml.imgnewwidth.ToString() : "0";
                                        }
                                        xmlfield["fontsize"].InnerText = pobjTemplatexml.fontsize.ToString();
                                    }
                                    else if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "image") //get resize image details
                                    {
                                        xmlfield["fieldname"].InnerText = pobjTemplatexml.fieldname.ToString();
                                        xmlfield["fieldtype"].InnerText = pobjTemplatexml.fieldtype.ToString();
                                        xmlfield["imgpath"].InnerText = pobjTemplatexml.originimgpath.ToString();
                                        xmlfield["resizeimgpath"].InnerText = pobjTemplatexml.resizeimgpath.ToString(); //#
                                        xmlfield["aspectratio"].InnerText = pobjTemplatexml.aspectratio.ToString();
                                        xmlfield["orientation"].InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                        xmlfield["imgwidth"].InnerText = pobjTemplatexml.imgwidth.ToString();
                                        xmlfield["imgheight"].InnerText = pobjTemplatexml.imgheight.ToString();
                                        xmlfield["xposition"].InnerText = pobjTemplatexml.xposition.ToString();
                                        xmlfield["yposition"].InnerText = pobjTemplatexml.yposition.ToString();
                                        xmlfield["xoriginalposition"].InnerText = pobjTemplatexml.xoriginalposition.ToString();
                                        xmlfield["yoriginalposition"].InnerText = pobjTemplatexml.yoriginalposition.ToString();
                                        xmlfield["imagestring"].InnerText = pobjTemplatexml.imagestring.ToString();
                                        xmlfield["datasource"].InnerText = pobjTemplatexml.datasource.ToString();
                                        xmlfield["datasourcetext"].InnerText = pobjTemplatexml.datasourcetext.ToString();
                                        xmlfield["UseFixedImage"].InnerText = pobjTemplatexml.UseFixedImage.ToString();
                                        xmlfield["UseVariableImage"].InnerText = pobjTemplatexml.UseVariableImage.ToString();
                                    }
                                    else if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "line") //get resize image details
                                    {

                                        xmlfield["fieldname"].InnerText = pobjTemplatexml.fieldname.ToString();
                                        xmlfield["fieldtype"].InnerText = pobjTemplatexml.fieldtype.ToString();
                                        xmlfield["imgpath"].InnerText = pobjTemplatexml.originimgpath.ToString();
                                        xmlfield["resizeimgpath"].InnerText = pobjTemplatexml.resizeimgpath.ToString();
                                        xmlfield["orientation"].InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                        xmlfield["imgwidth"].InnerText = pobjTemplatexml.imgwidth.ToString();
                                        xmlfield["imgheight"].InnerText = pobjTemplatexml.imgheight.ToString();
                                        xmlfield["xposition"].InnerText = pobjTemplatexml.xposition.ToString();
                                        xmlfield["yposition"].InnerText = pobjTemplatexml.yposition.ToString();
                                        xmlfield["xoriginalposition"].InnerText = pobjTemplatexml.xoriginalposition.ToString();
                                        xmlfield["yoriginalposition"].InnerText = pobjTemplatexml.yoriginalposition.ToString();
                                        xmlfield["imagestring"].InnerText = pobjTemplatexml.imagestring.ToString();
                                    }
                                }
                                blnIsSuccess = true;

                            }
                        }

                    }


                } //end if
            }
            catch (XmlException xmlexc)
            {
                blnIsSuccess = false;
            }

            doc.Save(strStartupPath);
            return blnIsSuccess;

        }

        public bool DuplicateTemplateDetails(clsTemplateLabelXmlwork pobjTemplatexml, string pstrgridfieldname, string pstrbarcodecategory, string pstrtranstype)
        {
            bool blnIsSuccess = false;
            //string strStartupPath = System.Windows.Forms.Application.StartupPath + @"\" + pstrtemplatename + ".xml";
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);

                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xmlfield in tempfieldnodelist)
                    {
                        if (xmlfield != null)
                        {
                            //if (xmlfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim())
                            if (xmlfield["Id"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.Id.ToString().ToLower().Trim())
                            {
                                if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "image")
                                {
                                    XmlElement elefield = doc.CreateElement("field");

                                    XmlElement eleId = doc.CreateElement("Id");
                                    eleId.InnerText = AutoIncrement();

                                    elefield.AppendChild(eleId);

                                    XmlElement eletype = doc.CreateElement("fieldtype");
                                    eletype.InnerText = pobjTemplatexml.fieldtype.ToString();
                                    elefield.AppendChild(eletype);

                                    XmlElement elefieldname = doc.CreateElement("fieldname");
                                    elefieldname.InnerText = CreateFieldName(pobjTemplatexml.fieldname.ToString(), pobjTemplatexml.TemplateName.ToString());
                                    //elefieldname.InnerText = pobjTemplatexml.fieldname.ToString() + eleId.InnerText;
                                    elefield.AppendChild(elefieldname);

                                    XmlElement eledatasource = doc.CreateElement("imgpath");
                                    eledatasource.InnerText = pobjTemplatexml.originimgpath.ToString();
                                    elefield.AppendChild(eledatasource);

                                    XmlElement eledataresizeimg = doc.CreateElement("resizeimgpath");
                                    eledataresizeimg.InnerText = pobjTemplatexml.resizeimgpath.ToString();
                                    elefield.AppendChild(eledataresizeimg);

                                    XmlElement eledatasourcetext = doc.CreateElement("aspectratio");
                                    eledatasourcetext.InnerText = pobjTemplatexml.aspectratio.ToString();
                                    elefield.AppendChild(eledatasourcetext);

                                    XmlElement eleorientation = doc.CreateElement("orientation");
                                    eleorientation.InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                    elefield.AppendChild(eleorientation);

                                    XmlElement elexpos = doc.CreateElement("xposition");
                                    elexpos.InnerText = pobjTemplatexml.xposition.ToString();
                                    elefield.AppendChild(elexpos);

                                    XmlElement eleypos = doc.CreateElement("yposition");
                                    eleypos.InnerText = pobjTemplatexml.yposition.ToString();
                                    elefield.AppendChild(eleypos);

                                    XmlElement elexopos = doc.CreateElement("xoriginalposition");
                                    elexopos.InnerText = (Convert.ToInt32(pobjTemplatexml.xoriginalposition) - 15).ToString();
                                    elefield.AppendChild(elexopos);

                                    XmlElement eleyopos = doc.CreateElement("yoriginalposition");
                                    eleyopos.InnerText = (Convert.ToInt32(pobjTemplatexml.yoriginalposition) - 13).ToString();
                                    elefield.AppendChild(eleyopos);

                                    XmlElement eleimagestring = doc.CreateElement("imagestring");
                                    eleimagestring.InnerText = pobjTemplatexml.imagestring.ToString();
                                    elefield.AppendChild(eleimagestring);

                                    XmlElement eleimgwidth = doc.CreateElement("imgwidth");
                                    eleimgwidth.InnerText = pobjTemplatexml.imgwidth.ToString();
                                    elefield.AppendChild(eleimgwidth);

                                    XmlElement eleimgheight = doc.CreateElement("imgheight");
                                    eleimgheight.InnerText = pobjTemplatexml.imgheight.ToString();
                                    elefield.AppendChild(eleimgheight);

                                    el.AppendChild(elefield);
                                }
                                else if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "line")
                                {
                                    XmlElement elefield = doc.CreateElement("field");

                                    XmlElement eleId = doc.CreateElement("Id");
                                    eleId.InnerText = AutoIncrement();

                                    elefield.AppendChild(eleId);

                                    XmlElement eletype = doc.CreateElement("fieldtype");
                                    eletype.InnerText = pobjTemplatexml.fieldtype.ToString();
                                    elefield.AppendChild(eletype);

                                    XmlElement elefieldname = doc.CreateElement("fieldname");
                                    elefieldname.InnerText = CreateFieldName(pobjTemplatexml.fieldname.ToString(), pobjTemplatexml.TemplateName.ToString());
                                    elefield.AppendChild(elefieldname);

                                    XmlElement eledatasource = doc.CreateElement("imgpath");
                                    eledatasource.InnerText = pobjTemplatexml.originimgpath.ToString();
                                    elefield.AppendChild(eledatasource);

                                    XmlElement eledataresizeimg = doc.CreateElement("resizeimgpath");
                                    eledataresizeimg.InnerText = pobjTemplatexml.resizeimgpath.ToString();
                                    elefield.AppendChild(eledataresizeimg);

                                    XmlElement eleorientation = doc.CreateElement("orientation");
                                    eleorientation.InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                    elefield.AppendChild(eleorientation);

                                    XmlElement elexpos = doc.CreateElement("xposition");
                                    elexpos.InnerText = pobjTemplatexml.xposition.ToString();
                                    elefield.AppendChild(elexpos);

                                    XmlElement eleypos = doc.CreateElement("yposition");
                                    eleypos.InnerText = pobjTemplatexml.yposition.ToString();
                                    elefield.AppendChild(eleypos);

                                    XmlElement elexopos = doc.CreateElement("xoriginalposition");
                                    elexopos.InnerText = (Convert.ToInt32(pobjTemplatexml.xoriginalposition) - 15).ToString();
                                    elefield.AppendChild(elexopos);

                                    XmlElement eleyopos = doc.CreateElement("yoriginalposition");
                                    eleyopos.InnerText = (Convert.ToInt32(pobjTemplatexml.yoriginalposition) - 13).ToString();
                                    elefield.AppendChild(eleyopos);

                                    XmlElement eleimagestring = doc.CreateElement("imagestring");
                                    eleimagestring.InnerText = pobjTemplatexml.imagestring.ToString();
                                    elefield.AppendChild(eleimagestring);

                                    XmlElement eleimgwidth = doc.CreateElement("imgwidth");
                                    eleimgwidth.InnerText = pobjTemplatexml.imgwidth.ToString();
                                    elefield.AppendChild(eleimgwidth);

                                    XmlElement eleimgheight = doc.CreateElement("imgheight");
                                    eleimgheight.InnerText = pobjTemplatexml.imgheight.ToString();
                                    elefield.AppendChild(eleimgheight);

                                    el.AppendChild(elefield);
                                }
                                else
                                {
                                    XmlElement elefield = doc.CreateElement("field");

                                    XmlElement eleId = doc.CreateElement("Id");
                                    eleId.InnerText = AutoIncrement();
                                    elefield.AppendChild(eleId);

                                    XmlElement eletype = doc.CreateElement("fieldtype");
                                    eletype.InnerText = pobjTemplatexml.fieldtype.ToString();
                                    elefield.AppendChild(eletype);

                                    XmlElement elefieldname = doc.CreateElement("fieldname");
                                    elefieldname.InnerText = CreateFieldName(pobjTemplatexml.fieldname.ToString(), pobjTemplatexml.TemplateName.ToString());
                                    //elefieldname.InnerText = pobjTemplatexml.fieldname.ToString() + eleId.InnerText;
                                    elefield.AppendChild(elefieldname);

                                    XmlElement eledatasource = doc.CreateElement("datasource");
                                    eledatasource.InnerText = pobjTemplatexml.datasource.ToString();
                                    elefield.AppendChild(eledatasource);

                                    XmlElement eledatasourcetext = doc.CreateElement("datasourcetext");
                                    eledatasourcetext.InnerText = pobjTemplatexml.datasourcetext.ToString();
                                    elefield.AppendChild(eledatasourcetext);


                                    XmlElement eletestdata = doc.CreateElement("testdata");
                                    eletestdata.InnerText = pobjTemplatexml.testdata.ToString();
                                    elefield.AppendChild(eletestdata);

                                    if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "text")
                                    {
                                        XmlElement eledelimiter = doc.CreateElement("delimiter");
                                        eledelimiter.InnerText = pobjTemplatexml.delimiter != "" ? pobjTemplatexml.delimiter.ToString() : null;
                                        elefield.AppendChild(eledelimiter);

                                        XmlElement elfontbold = doc.CreateElement("fontbold");
                                        elfontbold.InnerText = pobjTemplatexml.fontbold.ToString();
                                        elefield.AppendChild(elfontbold);

                                        XmlElement eltextalign = doc.CreateElement("textalign");
                                        eltextalign.InnerText = pobjTemplatexml.textAlign.ToString();
                                        elefield.AppendChild(eltextalign);
                                    }
                                    if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "barcode")
                                    {
                                        XmlElement elebarcodetype = doc.CreateElement("barcodetype");
                                        elebarcodetype.InnerText = pobjTemplatexml.barcodetype.ToString();
                                        elefield.AppendChild(elebarcodetype);
                                        //save delimiter for qrcode

                                        XmlElement eledelimiter = doc.CreateElement("delimiter");
                                        eledelimiter.InnerText = pobjTemplatexml.delimiter != "" ? pobjTemplatexml.delimiter.ToString() : "";
                                        elefield.AppendChild(eledelimiter);


                                        XmlElement elebarcharvisible = doc.CreateElement("barcharvisible");
                                        elebarcharvisible.InnerText = pobjTemplatexml.barcharvisible.ToString();
                                        elefield.AppendChild(elebarcharvisible);

                                        XmlElement eleDataCharView = doc.CreateElement("DataCharView");
                                        eleDataCharView.InnerText = pobjTemplatexml.DataCharView.ToString();
                                        elefield.AppendChild(eleDataCharView);

                                        XmlElement eleDataCharAlign = doc.CreateElement("DataCharAlign");
                                        eleDataCharAlign.InnerText = pobjTemplatexml.DataCharAlign.ToString();
                                        elefield.AppendChild(eleDataCharAlign);
                                    }
                                    else
                                    {

                                        XmlElement elewordwrap = doc.CreateElement("wordwrap");
                                        elewordwrap.InnerText = pobjTemplatexml.wordwrap != "" ? pobjTemplatexml.wordwrap.ToString() : "0";
                                        elefield.AppendChild(elewordwrap);

                                        if (pstrtranstype == "item list" && pobjTemplatexml.datasource.ToLower().Trim() == "description")
                                        {
                                            XmlElement elewordwraplinebreak = doc.CreateElement("linebreak");
                                            elewordwraplinebreak.InnerText = !string.IsNullOrWhiteSpace(pobjTemplatexml.linebreak) ? pobjTemplatexml.linebreak.ToString() : null;
                                            elefield.AppendChild(elewordwraplinebreak);
                                        }

                                    }

                                    XmlElement eleorientation = doc.CreateElement("orientation");
                                    eleorientation.InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                    elefield.AppendChild(eleorientation);

                                    XmlElement elexpos = doc.CreateElement("xposition");
                                    elexpos.InnerText = (pobjTemplatexml.xposition).ToString();
                                    elefield.AppendChild(elexpos);

                                    XmlElement eleypos = doc.CreateElement("yposition");
                                    eleypos.InnerText = (pobjTemplatexml.yposition).ToString();
                                    elefield.AppendChild(eleypos);

                                    XmlElement elexopos = doc.CreateElement("xoriginalposition");
                                    elexopos.InnerText = (Convert.ToInt32(pobjTemplatexml.xoriginalposition) + 15).ToString();
                                    elefield.AppendChild(elexopos);

                                    XmlElement eleyopos = doc.CreateElement("yoriginalposition");
                                    eleyopos.InnerText = (Convert.ToInt32(pobjTemplatexml.yoriginalposition) + 13).ToString();
                                    elefield.AppendChild(eleyopos);

                                    XmlElement elefontsize = doc.CreateElement("fontsize");
                                    elefontsize.InnerText = pobjTemplatexml.fontsize.ToString();
                                    elefield.AppendChild(elefontsize);

                                    if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "barcode")
                                    {
                                        XmlElement eleimgwidth = doc.CreateElement("imgwidth");
                                        eleimgwidth.InnerText = pobjTemplatexml.imgwidth.ToString();
                                        elefield.AppendChild(eleimgwidth);

                                        XmlElement eleimgheight = doc.CreateElement("imgheight");
                                        eleimgheight.InnerText = pobjTemplatexml.imgheight.ToString();
                                        elefield.AppendChild(eleimgheight);

                                        XmlElement elenewimgheight = doc.CreateElement("imgnewwidth");
                                        elenewimgheight.InnerText = pobjTemplatexml.imgnewwidth.ToString();
                                        elefield.AppendChild(elenewimgheight);
                                    }
                                    XmlElement elebarcodestring = doc.CreateElement("barcodestring");
                                    elebarcodestring.InnerText = pobjTemplatexml.barcodestring.ToString();
                                    elefield.AppendChild(elebarcodestring);

                                    el.AppendChild(elefield);


                                }


                                blnIsSuccess = true;

                            }
                        }

                    }
                }
            }
            catch (XmlException xmlexc)
            {
                blnIsSuccess = false;
            }

            doc.Save(strStartupPath);
            return blnIsSuccess;

        }

        public string CreateFieldName(string FieldName, string TemplateName)
        {
            int i = 0;
            while (true)
            {

                if (generateFieldName(FieldName + "(" + i + ")", TemplateName))
                {
                    i = i + 1;
                    continue;
                }
                return FieldName + "(" + i + ")";
            }

        }



        private bool generateFieldName(string FieldName, string TemplateName)
        {
            bool fieldeVal = false;
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + TemplateName.ToString() + ".xml");

            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {

                            if (xnfield["fieldname"].InnerText.ToString().ToLower().Trim() == FieldName.ToLower().Trim())
                            {
                                return true;

                            }

                        }
                    }
                    return false;

                }
                return false;
            }
            catch (XmlException xmlexc)
            {
                return false;
            }

        }

        //update resize image:01-APR-2019
        public bool UpdateResizeImageDetails(clsTemplateLabelXmlwork pobjTemplatexml, string pstrgridfieldname)
        {
            bool blnIsSuccess = false;

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pobjTemplatexml.TemplateName.ToString() + ".xml");

            bool istemplatefieldexist = false;
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pobjTemplatexml.TemplateName.ToString() + "']");
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {

                            if (pobjTemplatexml.fieldname.ToString().ToLower().Trim() != pstrgridfieldname.ToLower().Trim())
                            {
                                if (xnfield["fieldname"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.fieldname.ToString().ToLower().Trim()) //fieldname
                                {
                                    istemplatefieldexist = true;
                                    blnIsSuccess = false;
                                    break;
                                }
                            }
                        }
                    }


                    //update selected field name
                    if (istemplatefieldexist == false)
                    {
                        foreach (XmlNode xmlfield in tempfieldnodelist)
                        {
                            if (xmlfield != null)
                            {

                                if (xmlfield["Id"].InnerText.ToString().ToLower().Trim() == pobjTemplatexml.Id.ToString().ToLower().Trim())
                                {
                                    //Text Type
                                    if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "text")
                                    {
                                        //xmlfield["fieldtype"].InnerText = pobjTemplatexml.fieldtype.ToString();
                                        xmlfield["fieldname"].InnerText = pobjTemplatexml.fieldname.ToString();
                                        xmlfield["datasource"].InnerText = pobjTemplatexml.datasource.ToString();
                                        xmlfield["datasourcetext"].InnerText = pobjTemplatexml.datasourcetext.ToString();
                                        xmlfield["testdata"].InnerText = pobjTemplatexml.testdata.ToString();
                                        xmlfield["wordwrap"].InnerText = pobjTemplatexml.wordwrap != "" ? pobjTemplatexml.wordwrap.ToString() : "0";
                                        xmlfield["orientation"].InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                        xmlfield["xposition"].InnerText = pobjTemplatexml.xposition.ToString();
                                        xmlfield["yposition"].InnerText = pobjTemplatexml.yposition.ToString();
                                        xmlfield["fontsize"].InnerText = pobjTemplatexml.fontsize.ToString();
                                        xmlfield["xoriginalposition"].InnerText = pobjTemplatexml.xoriginalposition.ToString();
                                        xmlfield["yoriginalposition"].InnerText = pobjTemplatexml.yoriginalposition.ToString();
                                    }
                                    //else if (pobjTemplatexml.fieldtype.ToString().ToLower().Trim() == "barcode")
                                    //{
                                    //    //BarCode Type
                                    //    xmlfield["fieldname"].InnerText = pobjTemplatexml.fieldname.ToString();
                                    //    xmlfield["datasource"].InnerText = pobjTemplatexml.datasource.ToString();
                                    //    xmlfield["datasourcetext"].InnerText = pobjTemplatexml.datasourcetext.ToString();
                                    //    xmlfield["barcodetype"].InnerText = pobjTemplatexml.barcodetype.ToString();
                                    //    xmlfield["testdata"].InnerText = pobjTemplatexml.testdata.ToString();
                                    //    xmlfield["wordwrap"].InnerText = pobjTemplatexml.wordwrap != "" ? pobjTemplatexml.wordwrap.ToString() : "0";
                                    //    xmlfield["orientation"].InnerText = pobjTemplatexml.orientation != "" ? pobjTemplatexml.orientation.ToString() : "0";
                                    //    xmlfield["xposition"].InnerText = pobjTemplatexml.xposition.ToString();
                                    //    xmlfield["yposition"].InnerText = pobjTemplatexml.yposition.ToString();
                                    //    xmlfield["imgwidth"].InnerText = pobjTemplatexml.imgwidth.ToString();
                                    //    xmlfield["imgheight"].InnerText = pobjTemplatexml.imgheight.ToString();
                                    //    xmlfield["fontsize"].InnerText = pobjTemplatexml.fontsize.ToString();
                                    //}

                                }
                                blnIsSuccess = true;

                            }
                        }

                    }


                } //end if
            }
            catch (XmlException xmlexc)
            {
                blnIsSuccess = false;
            }

            doc.Save(strStartupPath);
            return blnIsSuccess;

        }

        public static string AutoIncrement()
        {
            string num = string.Empty;
            string dtformat = string.Empty;
            //Random rndtext = new Random();
            //num = rndtext.Next();
            //return num;
            dtformat = DateTime.Today.ToString("dd-MM-yyyy");

            num = dtformat + "-" + (DateTime.Now.Millisecond.ToString());
            return num;
        }

        //check if template name field is exist
        public bool IsTemplateFieldInXml1(string pstrTemplateName)
        {
            bool blntempfieldexist = false;
            string strAttribute = string.Empty;
            // string fieldnamevalue = string.Empty;
            //string strStartupPath = System.Windows.Forms.Application.StartupPath + @"\imgtemplate.xml";
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml");

            using (XmlReader reader = XmlReader.Create(strStartupPath))
            {
                while (reader.Read())
                {
                    switch (reader.NodeType)
                    {
                        case XmlNodeType.Element:
                            if (reader.Name == pstrTemplateName)
                            {
                                strAttribute = reader.GetAttribute("templatename");
                                if (strAttribute.ToLower().Trim() == pstrTemplateName.ToLower().Trim())
                                {
                                    blntempfieldexist = true;
                                    return blntempfieldexist;
                                }
                            }
                            //if (reader.Name == pstrTemplateName) // check fieldname exist
                            //{
                            //    // string strAttribute = reader.GetAttribute("AttributeName");
                            //    fieldnamevalue = reader.ReadString();
                            //    if (fieldnamevalue.ToLower() == "kiwi")
                            //    {
                            //        blntempfieldexist = true;
                            //        return blntempfieldexist;
                            //    }
                            //}
                            break;

                    }
                }
            }

            return blntempfieldexist;
        }

        //check attributevalue exist in xml:date 26-mar-2019
        public bool IsTemplateFieldInXml(string pstrTemplateName)
        {
            bool blntempfieldexist = false;
            string strAttribute = string.Empty;
            string templname = string.Empty;
            string strStartupPath = string.Empty;
            strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml");

            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //build ur Xdoc with nodes here
                var nodes = from System.Xml.XmlNode nd in doc.SelectNodes("//QuickBooks/template")
                            where nd.Attributes["templatename"].Value.ToLower().Trim() == pstrTemplateName.ToLower().Trim()
                            select nd;

                if (nodes.Count() > 0)
                {
                    //exists
                    blntempfieldexist = true;
                }
                else
                {
                    //not exists
                    blntempfieldexist = false;
                }

            }
            catch (Exception ex)
            {
                blntempfieldexist = false;
            }
            return blntempfieldexist;
        }
        public bool IsTempFieldInXml(string pstrTemplateName)
        {
            bool blntempfieldexist = false;
            string strAttribute = string.Empty;
            string templname = string.Empty;
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(pstrTemplateName);
                //build ur Xdoc with nodes here
                var nodes = from System.Xml.XmlNode nd in doc.SelectNodes("//QuickBooks/template")
                            where nd.Attributes["templatename"].Value.ToLower().Trim() == Path.GetFileNameWithoutExtension(pstrTemplateName).ToLower().Trim()
                            select nd;

                if (nodes.Count() > 0)
                {
                    //exists
                    blntempfieldexist = true;
                }
                else
                {
                    //not exists
                    blntempfieldexist = false;
                }

            }
            catch (Exception ex)
            {
                blntempfieldexist = false;
            }
            return blntempfieldexist;
        }
        //Get TemplateHeader Details based on Template Name
        public List<QuickBooksField> GetTemplateHeaderInfo(string pstrTemplateName)
        {

            List<QuickBooksField> objTemplateInfo = new List<QuickBooksField>();

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml");

            using (XmlReader reader = XmlReader.Create(strStartupPath))
            {
                while (reader.Read())
                {
                    switch (reader.NodeType)
                    {
                        case XmlNodeType.Element:

                            if (reader.Name == "transtype")
                            {
                                objTemplateInfo.Add(new QuickBooksField(1, reader.ReadString()));
                            }
                            else if (reader.Name == "width")
                            {
                                objTemplateInfo.Add(new QuickBooksField(2, reader.ReadString()));
                            }
                            else if (reader.Name == "height")
                            {
                                objTemplateInfo.Add(new QuickBooksField(3, reader.ReadString()));
                            }

                            break;

                    }
                }
            }
            return objTemplateInfo;

        }

        //check xml format of import xml:date 29-Mar-2019
        public List<QuickBooksField> CheckImportXmlFormat(string pstrTemplateName)
        {

            List<QuickBooksField> objTemplateInfo = new List<QuickBooksField>();

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml");

            using (XmlReader reader = XmlReader.Create(strStartupPath))
            {

                while (reader.Read())
                {
                    switch (reader.NodeType)
                    {

                        case XmlNodeType.Element:
                            if (reader.HasAttributes)
                            {
                                //if (reader.GetAttribute("templatename").ToString().ToLower().Trim() == pstrTemplateName.ToLower().Trim())
                                //{
                                objTemplateInfo.Add(new QuickBooksField(1, reader.GetAttribute("templatename")));
                                //}
                            }

                            if (reader.Name.ToLower().Trim() == "transtype")
                            {
                                objTemplateInfo.Add(new QuickBooksField(2, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "width")
                            {
                                objTemplateInfo.Add(new QuickBooksField(3, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "height")
                            {
                                objTemplateInfo.Add(new QuickBooksField(4, reader.ReadString()));
                            }
                            //else if (reader.Name == "field")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(5, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "id")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(6, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "fieldtype")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(7, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "fieldname")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(8, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "datasource")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(9, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "testdata")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(10, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "datasourcetext")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(11, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "wordwrap")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(12, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "orientation")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(13, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "xposition")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(14, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "yposition")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(15, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "fontsize")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(16, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "xoriginalposition")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(17, reader.ReadString()));
                            //}
                            //else if (reader.Name.ToLower().Trim() == "yoriginalposition")
                            //{
                            //    objTemplateInfo.Add(new QuickBooksField(18, reader.ReadString()));
                            //}

                            break;


                    }
                }
            }
            return objTemplateInfo;

        }
        public List<QuickBooksField> CheckXmlTempFormat(string pstrTemplateName)
        {

            List<QuickBooksField> objTemplateInfo = new List<QuickBooksField>();

            // string strStartupPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml";

            using (XmlReader reader = XmlReader.Create(pstrTemplateName))
            {
                while (reader.Read())
                {
                    switch (reader.NodeType)
                    {

                        case XmlNodeType.Element:
                            if (reader.HasAttributes)
                            {
                                //if (reader.GetAttribute("templatename").ToString().ToLower().Trim() == Path.GetFileNameWithoutExtension(pstrTemplateName).ToLower().Trim())
                                //{
                                objTemplateInfo.Add(new QuickBooksField(1, reader.GetAttribute("templatename")));
                                //}
                            }

                            if (reader.Name.ToLower().Trim() == "transtype")
                            {
                                objTemplateInfo.Add(new QuickBooksField(2, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "width")
                            {
                                objTemplateInfo.Add(new QuickBooksField(3, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "height")
                            {
                                objTemplateInfo.Add(new QuickBooksField(4, reader.ReadString()));
                            }
                            else if (reader.Name == "field")
                            {
                                objTemplateInfo.Add(new QuickBooksField(5, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "id")
                            {
                                objTemplateInfo.Add(new QuickBooksField(6, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "fieldtype")
                            {
                                objTemplateInfo.Add(new QuickBooksField(7, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "fieldname")
                            {
                                objTemplateInfo.Add(new QuickBooksField(8, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "datasource")
                            {
                                objTemplateInfo.Add(new QuickBooksField(9, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "testdata")
                            {
                                objTemplateInfo.Add(new QuickBooksField(10, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "datasourcetext")
                            {
                                objTemplateInfo.Add(new QuickBooksField(11, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "wordwrap")
                            {
                                objTemplateInfo.Add(new QuickBooksField(12, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "orientation")
                            {
                                objTemplateInfo.Add(new QuickBooksField(13, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "xposition")
                            {
                                objTemplateInfo.Add(new QuickBooksField(14, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "yposition")
                            {
                                objTemplateInfo.Add(new QuickBooksField(15, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "fontsize")
                            {
                                objTemplateInfo.Add(new QuickBooksField(16, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "xoriginalposition")
                            {
                                objTemplateInfo.Add(new QuickBooksField(17, reader.ReadString()));
                            }
                            else if (reader.Name.ToLower().Trim() == "yoriginalposition")
                            {
                                objTemplateInfo.Add(new QuickBooksField(18, reader.ReadString()));
                            }

                            break;


                    }
                }
            }
            return objTemplateInfo;

        }

        //Get Template Name list from xml file:08-Jan-2021
        public List<QuickBooksField> GetTemplateNameList()
        {
            int cntIndex = 0;
            List<QuickBooksField> objTemplateNames = new List<QuickBooksField>();
            string path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat");
            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\");

            // string[] fileNamesWithoutExtention = Directory.GetFiles(strStartupPath, "*.xml").Select(fileName => Path.GetFileNameWithoutExtension(fileName)).ToArray();
            string[] fileNamesWithoutExtention = Directory.GetFiles(strStartupPath, "*.pdf").Select(fileName => Path.GetFileNameWithoutExtension(fileName)).ToArray();
            objTemplateNames.Add(new QuickBooksField(cntIndex++, "---Select Template---"));
            if (fileNamesWithoutExtention.Length > 0)
            {
                foreach (var files in fileNamesWithoutExtention)
                {
                    objTemplateNames.Add(new QuickBooksField(cntIndex++, files));
                }
            }
            return objTemplateNames;
        }

        //Get Item custom & general fields from QuickBooks :08-jan-2019
        public List<QuickBooksField> GetItemCustomFieldsList()
        {

            int cntIndex = 1;
            List<QuickBooksField> objItemFieldvalues = new List<QuickBooksField>();
            QBSessionManager lQBSessionManager = null;
            IMsgSetResponse lMsgResponse = default(IMsgSetResponse);

            try
            {
                lQBSessionManager = ModGlobal.QBGlobalSessionManager;

                IMsgSetRequest lMsgRequest = lQBSessionManager.CreateMsgSetRequest("US", Convert.ToInt16(ConfigurationManager.AppSettings["QBXMLVersion"]), 0);

                lMsgRequest.Attributes.OnError = ENRqOnError.roeContinue;

                IDataExtDefQuery ItemInventoryQueryRq = lMsgRequest.AppendDataExtDefQueryRq();

                 ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoItem);
                //add customer custom field
                ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoCustomer);

                lQBSessionManager.OpenConnection("", "Label Connector");
                lQBSessionManager.BeginSession("", ENOpenMode.omDontCare);
                lMsgResponse = lQBSessionManager.DoRequests(lMsgRequest);
            }
            catch (Exception Ex)
            {
                throw;
            }
            finally
            {
                if ((lQBSessionManager != null))
                {
                    lQBSessionManager.EndSession();
                    lQBSessionManager.CloseConnection();
                }
            }
            try
            {
                if ((lMsgResponse.ResponseList.Count > 0))
                {
                    //we have one response for  single add request
                    // IResponse loResponse = lMsgResponse.ResponseList.GetAt(0);
                    IResponseList responseList = lMsgResponse.ResponseList;
                    if (responseList == null) ;

                    for (int i = 0; i < responseList.Count; i++)
                    {
                        IResponse loResponse = responseList.GetAt(i);
                        //check the status code of the response, 0=ok, >0 is warning
                        if (loResponse.StatusCode >= 0)
                        {
                            //the request-specific response is in the details, make sure we have some
                            if (loResponse.Detail != null)
                            {
                                //make sure the response is the type we're expecting
                                ENResponseType responseType = (ENResponseType)loResponse.Type.GetValue();


                                if (responseType == ENResponseType.rtDataExtDefQueryRs)
                                {

                                    IDataExtDefRetList loList = (IDataExtDefRetList)loResponse.Detail;

                                    IDataExtDefRet loProduct = default(IDataExtDefRet);
                                    string custfieldname = string.Empty;
                                    if (loList != null)
                                    {
                                        for (int Index = 0; Index < loList.Count; Index++)
                                        {
                                            loProduct = loList.GetAt(Index);

                                            if (loProduct.DataExtName != null)
                                            {
                                                objItemFieldvalues.Add(new QuickBooksField(cntIndex++, loProduct.DataExtName.GetValue().ToString()));
                                            }

                                        }
                                    }


                                }


                            }
                        }
                    }


                }

                return objItemFieldvalues;
            }
            catch (Exception ex)
            {
                throw;
                // return null;
            }

        }


        //public List<QuickBooksField> GetItemCustomFieldsList()
        //{

        //    int cntIndex = 1;
        //    List<QuickBooksField> objItemFieldvalues = new List<QuickBooksField>();
        //    QBSessionManager lQBSessionManager = null;
        //    IMsgSetResponse lMsgResponse = default(IMsgSetResponse);

        //    try
        //    {
        //        lQBSessionManager = ModGlobal.QBGlobalSessionManager;

        //        IMsgSetRequest lMsgRequest = lQBSessionManager.CreateMsgSetRequest("US", Convert.ToInt16(ConfigurationManager.AppSettings["QBXMLVersion"]), 0);

        //        lMsgRequest.Attributes.OnError = ENRqOnError.roeContinue;


        //        ICustomerQuery CustomerQuery = default(ICustomerQuery);
        //        CustomerQuery = lMsgRequest.AppendCustomerQueryRq();
        //        CustomerQuery.OwnerIDList.Add("0");
        //        CustomerQuery.ORCustomerListQuery.CustomerListFilter.ORNameFilter.NameRangeFilter.FromName.SetValue("168 Landscaping");
        //        // IDataExtDefQuery ItemInventoryQueryRq = lMsgRequest.AppendDataExtDefQueryRq();

        //        // ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoItem);
        //        //add customer custom field
        //        // ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoCustomer);

        //        lQBSessionManager.OpenConnection("", "Label Connector");
        //        lQBSessionManager.BeginSession("", ENOpenMode.omDontCare);
        //        lMsgResponse = lQBSessionManager.DoRequests(lMsgRequest);
        //    }
        //    catch (Exception Ex)
        //    {
        //        throw;
        //    }
        //    finally
        //    {
        //        if ((lQBSessionManager != null))
        //        {
        //            lQBSessionManager.EndSession();
        //            lQBSessionManager.CloseConnection();
        //        }
        //    }
        //    try
        //    {
        //        if (lMsgResponse != null && lMsgResponse.ResponseList != null && lMsgResponse.ResponseList.Count > 0)
        //        {
        //            IResponse lobjIResponse = lMsgResponse.ResponseList.GetAt(1);
        //            ICustomerRetList lobjICustomerRetList = (ICustomerRetList)lobjIResponse.Detail;
        //            ICustomerRet loCustomerRet = default(ICustomerRet);
        //            if (lobjICustomerRetList != null)
        //            {
        //                for (int Index1 = 0; Index1 < lobjICustomerRetList.Count; Index1++)
        //                {
        //                    loCustomerRet = lobjICustomerRetList.GetAt(Index1);
        //                    if (!string.IsNullOrWhiteSpace(loCustomerRet.FullName.GetValue()))
        //                    {
        //                        if (loCustomerRet.DataExtRetList != null)
        //                        {
        //                            for (int i = 0; i < loCustomerRet.DataExtRetList.Count; i++)
        //                            {
        //                                IDataExtRet DataExtRet = loCustomerRet.DataExtRetList.GetAt(i);

        //                                string strdName = Convert.ToString(DataExtRet.DataExtName.GetValue()).Replace(" ", string.Empty).ToUpper();
        //                                string strdValue = Convert.ToString(DataExtRet.DataExtValue.GetValue());
        //                                objItemFieldvalues.Add(new QuickBooksField(cntIndex++, strdName));
        //                            }
        //                        }
        //                    }

        //                }
        //            }
        //        }
        //        return objItemFieldvalues;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw;
        //        // return null;
        //    }

        //}


        //Get Item Custom field for Inovoice setting screen: 07-02-2019
        public List<QuickBooksField> GetItemCustomForInvoiceSetting()
        {

            int cntIndex = 1;
            //Item  Standard Fields
            List<QuickBooksField> objItemFieldvalues = new List<QuickBooksField>();


            //step2: create QBFC session manager and prepare the request
            QBSessionManager lQBSessionManager = null;
            IMsgSetResponse lMsgResponse = default(IMsgSetResponse);

            try
            {
                lQBSessionManager = ModGlobal.QBGlobalSessionManager;

                IMsgSetRequest lMsgRequest = lQBSessionManager.CreateMsgSetRequest("US", Convert.ToInt16(ConfigurationManager.AppSettings["QBXMLVersion"]), 0);

                lMsgRequest.Attributes.OnError = ENRqOnError.roeContinue;

                IDataExtDefQuery ItemInventoryQueryRq = lMsgRequest.AppendDataExtDefQueryRq();

                ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoItem);
                //add customer custom field
                //ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoCustomer);

                lQBSessionManager.OpenConnection("", "Label Connector");
                lQBSessionManager.BeginSession("", ENOpenMode.omDontCare);
                lMsgResponse = lQBSessionManager.DoRequests(lMsgRequest);
            }
            catch (Exception Ex)
            {
                throw;
            }
            finally
            {
                if ((lQBSessionManager != null))
                {
                    lQBSessionManager.EndSession();
                    lQBSessionManager.CloseConnection();
                }
            }
            try
            {
                if ((lMsgResponse.ResponseList.Count > 0))
                {
                    //we have one response for  single add request
                    // IResponse loResponse = lMsgResponse.ResponseList.GetAt(0);
                    IResponseList responseList = lMsgResponse.ResponseList;
                    if (responseList == null) ;

                    for (int i = 0; i < responseList.Count; i++)
                    {
                        IResponse loResponse = responseList.GetAt(i);
                        //check the status code of the response, 0=ok, >0 is warning
                        if (loResponse.StatusCode >= 0)
                        {
                            //the request-specific response is in the details, make sure we have some
                            if (loResponse.Detail != null)
                            {
                                //make sure the response is the type we're expecting
                                ENResponseType responseType = (ENResponseType)loResponse.Type.GetValue();


                                if (responseType == ENResponseType.rtDataExtDefQueryRs)
                                {

                                    IDataExtDefRetList loList = (IDataExtDefRetList)loResponse.Detail;

                                    IDataExtDefRet loProduct = default(IDataExtDefRet);
                                    string custfieldname = string.Empty;
                                    if (loList != null)
                                    {
                                        for (int Index = 0; Index < loList.Count; Index++)
                                        {
                                            loProduct = loList.GetAt(Index);

                                            if (loProduct.DataExtName != null)
                                            {

                                                objItemFieldvalues.Add(new QuickBooksField(cntIndex++, loProduct.DataExtName.GetValue().ToString()));
                                            }

                                        }
                                    }


                                }


                            }
                        }
                    }


                }

                return objItemFieldvalues;
            }
            catch (Exception ex)
            {
                throw;
                // return null;
            }

        }

        //Get Customer Custom field for Invoice setting screen
        public List<QuickBooksField> GetCustomCustomForInvoiceSetting()
        {

            int cntIndex = 1;
            //Item  Standard Fields
            List<QuickBooksField> objItemFieldvalues = new List<QuickBooksField>();


            //step2: create QBFC session manager and prepare the request
            QBSessionManager lQBSessionManager = null;
            IMsgSetResponse lMsgResponse = default(IMsgSetResponse);

            try
            {
                lQBSessionManager = ModGlobal.QBGlobalSessionManager;

                IMsgSetRequest lMsgRequest = lQBSessionManager.CreateMsgSetRequest("US", Convert.ToInt16(ConfigurationManager.AppSettings["QBXMLVersion"]), 0);

                lMsgRequest.Attributes.OnError = ENRqOnError.roeContinue;

                IDataExtDefQuery ItemInventoryQueryRq = lMsgRequest.AppendDataExtDefQueryRq();

                // ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoItem);
                //add customer custom field
                ItemInventoryQueryRq.ORDataExtDefQuery.AssignToObjectList.Add(ENAssignToObject.atoCustomer);

                lQBSessionManager.OpenConnection("", "Label Connector");
                lQBSessionManager.BeginSession("", ENOpenMode.omDontCare);
                lMsgResponse = lQBSessionManager.DoRequests(lMsgRequest);
            }
            catch (Exception Ex)
            {
                throw;
            }
            finally
            {
                if ((lQBSessionManager != null))
                {
                    lQBSessionManager.EndSession();
                    lQBSessionManager.CloseConnection();
                }
            }
            try
            {
                if ((lMsgResponse.ResponseList.Count > 0))
                {
                    //we have one response for  single add request
                    // IResponse loResponse = lMsgResponse.ResponseList.GetAt(0);
                    IResponseList responseList = lMsgResponse.ResponseList;
                    if (responseList == null) ;

                    for (int i = 0; i < responseList.Count; i++)
                    {
                        IResponse loResponse = responseList.GetAt(i);
                        //check the status code of the response, 0=ok, >0 is warning
                        if (loResponse.StatusCode >= 0)
                        {
                            //the request-specific response is in the details, make sure we have some
                            if (loResponse.Detail != null)
                            {
                                //make sure the response is the type we're expecting
                                ENResponseType responseType = (ENResponseType)loResponse.Type.GetValue();


                                if (responseType == ENResponseType.rtDataExtDefQueryRs)
                                {

                                    IDataExtDefRetList loList = (IDataExtDefRetList)loResponse.Detail;

                                    IDataExtDefRet loProduct = default(IDataExtDefRet);
                                    string custfieldname = string.Empty;
                                    if (loList != null)
                                    {
                                        for (int Index = 0; Index < loList.Count; Index++)
                                        {
                                            loProduct = loList.GetAt(Index);

                                            if (loProduct.DataExtName != null)
                                            {

                                                objItemFieldvalues.Add(new QuickBooksField(cntIndex++, loProduct.DataExtName.GetValue().ToString()));
                                            }

                                        }
                                    }


                                }


                            }
                        }
                    }


                }

                return objItemFieldvalues;
            }
            catch (Exception ex)
            {
                throw;
                // return null;
            }

        }

        //Get Field Properties list:jan-17-2019
        public List<clsTemplateLabelXmlwork> GetFieldPropertiesList(string pstrTemplateName, string pstrfieldId)
        {

            List<clsTemplateLabelXmlwork> objTemplateInfo = new List<clsTemplateLabelXmlwork>();

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml");

            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);
                //XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pstrTemplateName + "']");
                XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename]");
                if (el != null)
                {
                    XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
                    foreach (XmlNode xnfield in tempfieldnodelist)
                    {
                        if (xnfield != null)
                        {
                            //Resize Image:01-APR-2019
                            if (xnfield["fieldtype"].InnerText.ToString().ToLower().Trim() == "image")
                            {
                                if (xnfield["Id"].InnerText.ToString().ToLower().Trim() == pstrfieldId.ToLower().Trim())
                                {
                                    //edit mode
                                    objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
                                                                                                       xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
                                                                                                       xnfield["imgpath"] != null ? xnfield["imgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["resizeimgpath"] != null ? xnfield["resizeimgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["aspectratio"] != null ? xnfield["aspectratio"].InnerText.ToString() : null,

                                                                                                       xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
                                                                                                       xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
                                                                                                       xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
                                                                                                       xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null,
                                                                                                       xnfield["xoriginalposition"] != null ? xnfield["xoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yoriginalposition"] != null ? xnfield["yoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["imagestring"] != null ? xnfield["imagestring"].InnerText.ToString() : null,
                                                                                                       xnfield["datasource"] != null ? xnfield["datasource"].InnerText.ToString() : null,
                                                                                                       xnfield["datasourcetext"] != null ? xnfield["datasourcetext"].InnerText.ToString() : null,
                                                                                                       xnfield["UseFixedImage"] != null ? xnfield["UseFixedImage"].InnerText.ToString() : null,
                                                                                                       xnfield["UseVariableImage"] != null ? xnfield["UseVariableImage"].InnerText.ToString() : null));

                                }
                                else if (string.IsNullOrWhiteSpace(pstrfieldId))
                                {
                                    //Get all rec

                                    objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
                                                                                                       xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
                                                                                                       xnfield["imgpath"] != null ? xnfield["imgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["resizeimgpath"] != null ? xnfield["resizeimgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["aspectratio"] != null ? xnfield["aspectratio"].InnerText.ToString() : null,

                                                                                                       xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
                                                                                                       xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
                                                                                                       xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
                                                                                                       xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null,
                                                                                                       xnfield["xoriginalposition"] != null ? xnfield["xoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yoriginalposition"] != null ? xnfield["yoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["imagestring"] != null ? xnfield["imagestring"].InnerText.ToString() : null,
                                                                                                        xnfield["datasource"] != null ? xnfield["datasource"].InnerText.ToString() : null,
                                                                                                       xnfield["datasourcetext"] != null ? xnfield["datasourcetext"].InnerText.ToString() : null,
                                                                                                       xnfield["UseFixedImage"] != null ? xnfield["UseFixedImage"].InnerText.ToString() : null,
                                                                                                       xnfield["UseVariableImage"] != null ? xnfield["UseVariableImage"].InnerText.ToString() : null));




                                }

                            }
                            else if (xnfield["fieldtype"].InnerText.ToString().ToLower().Trim() == "line")
                            {
                                if (xnfield["Id"].InnerText.ToString().ToLower().Trim() == pstrfieldId.ToLower().Trim())
                                {
                                    //edit mode
                                    objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
                                                                                                       xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
                                                                                                       xnfield["imgpath"] != null ? xnfield["imgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["resizeimgpath"] != null ? xnfield["resizeimgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
                                                                                                       xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
                                                                                                       xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
                                                                                                       xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null,
                                                                                                       xnfield["xoriginalposition"] != null ? xnfield["xoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yoriginalposition"] != null ? xnfield["yoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["imagestring"] != null ? xnfield["imagestring"].InnerText.ToString() : null));

                                }
                                else if (string.IsNullOrWhiteSpace(pstrfieldId))
                                {
                                    //Get all rec

                                    objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
                                                                                                       xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
                                                                                                       xnfield["imgpath"] != null ? xnfield["imgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["resizeimgpath"] != null ? xnfield["resizeimgpath"].InnerText.ToString() : null,
                                                                                                       xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
                                                                                                       xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
                                                                                                       xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
                                                                                                       xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null,
                                                                                                       xnfield["xoriginalposition"] != null ? xnfield["xoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yoriginalposition"] != null ? xnfield["yoriginalposition"].InnerText.ToString() : null,
                                                                                                       xnfield["imagestring"] != null ? xnfield["imagestring"].InnerText.ToString() : null));




                                }

                            }
                            else
                            {
                                if (xnfield["Id"].InnerText.ToString().ToLower().Trim() == pstrfieldId.ToLower().Trim())
                                {
                                    //edit mode
                                    objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
                                                                                                       xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
                                                                                                       xnfield["datasource"] != null ? xnfield["datasource"].InnerText.ToString() : null,
                                                                                                       xnfield["datasourcetext"] != null ? xnfield["datasourcetext"].InnerText.ToString() : null,
                                                                                                       xnfield["testdata"] != null ? xnfield["testdata"].InnerText.ToString() : null,
                                                                                                       xnfield["barcodetype"] != null ? xnfield["barcodetype"].InnerText.ToString() : null,

                                                                                                       xnfield["wordwrap"] != null ? xnfield["wordwrap"].InnerText.ToString() : null,
                                                                                                       xnfield["linebreak"] != null ? xnfield["linebreak"].InnerText.ToString() : null,
                                                                                                       xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
                                                                                                       xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
                                                                                                       xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
                                                                                                       xnfield["imgnewwidth"] != null ? xnfield["imgnewwidth"].InnerText.ToString() : null,
                                                                                                       xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
                                                                                                       xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null,
                                                                                                       xnfield["fontsize"] != null ? xnfield["fontsize"].InnerText.ToString() : null,

                                                                                                       xnfield["delimiter"] != null ? xnfield["delimiter"].InnerText.ToString() : null,
                                                                                                      xnfield["xoriginalposition"] != null ? xnfield["xoriginalposition"].InnerText.ToString() : null,
                                                                                                      xnfield["yoriginalposition"] != null ? xnfield["yoriginalposition"].InnerText.ToString() : null,
                                                                                                      xnfield["barcodestring"] != null ? xnfield["barcodestring"].InnerText.ToString() : null,
                                                                                                      xnfield["barcharvisible"] != null ? xnfield["barcharvisible"].InnerText.ToString() : null,
                                                                                                      xnfield["DataCharView"] != null ? xnfield["DataCharView"].InnerText.ToString() : null,
                                                                                                      xnfield["DataCharAlign"] != null ? xnfield["DataCharAlign"].InnerText.ToString() : null,
                                                                                                      xnfield["fontbold"] != null ? xnfield["fontbold"].InnerText.ToString() : null,
                                                                                                      xnfield["textalign"] != null ? xnfield["textalign"].InnerText.ToString() : null));
                                }
                                else if (string.IsNullOrWhiteSpace(pstrfieldId))
                                {
                                    //Get all rec
                                    objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
                                                                                                      xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
                                                                                                      xnfield["datasource"] != null ? xnfield["datasource"].InnerText.ToString() : null,
                                                                                                      xnfield["datasourcetext"] != null ? xnfield["datasourcetext"].InnerText.ToString() : null,
                                                                                                      xnfield["testdata"] != null ? xnfield["testdata"].InnerText.ToString() : null,
                                                                                                      xnfield["barcodetype"] != null ? xnfield["barcodetype"].InnerText.ToString() : null,
                                                                                                      xnfield["wordwrap"] != null ? xnfield["wordwrap"].InnerText.ToString() : null,
                                                                                                      xnfield["linebreak"] != null ? xnfield["linebreak"].InnerText.ToString() : null,
                                                                                                      xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
                                                                                                      xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,

                                                                                                      xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
                                                                                                      xnfield["imgnewwidth"] != null ? xnfield["imgnewwidth"].InnerText.ToString() : null,
                                                                                                      xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
                                                                                                      xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null,
                                                                                                      xnfield["fontsize"] != null ? xnfield["fontsize"].InnerText.ToString() : null,
                                                                                                      xnfield["delimiter"] != null ? xnfield["delimiter"].InnerText.ToString() : null,
                                                                                                      xnfield["xoriginalposition"] != null ? xnfield["xoriginalposition"].InnerText.ToString() : null,
                                                                                                      xnfield["yoriginalposition"] != null ? xnfield["yoriginalposition"].InnerText.ToString() : null,
                                                                                                      xnfield["barcodestring"] != null ? xnfield["barcodestring"].InnerText.ToString() : null,
                                                                                                      xnfield["barcharvisible"] != null ? xnfield["barcharvisible"].InnerText.ToString() : null,
                                                                                                      xnfield["DataCharView"] != null ? xnfield["DataCharView"].InnerText.ToString() : null,
                                                                                                      xnfield["DataCharAlign"] != null ? xnfield["DataCharAlign"].InnerText.ToString() : null,
                                                                                                      xnfield["fontbold"] != null ? xnfield["fontbold"].InnerText.ToString() : null,
                                                                                                      xnfield["textalign"] != null ? xnfield["textalign"].InnerText.ToString() : null));




                                }
                            }



                        }

                    }
                } //end if
            }
            catch (Exception ex)
            {

            }

            return objTemplateInfo;

        }
        //Get Image properties list:01-03-2019
        //public List<clsTemplateLabelXmlwork> GetResizeImageFieldPropertiesList(string pstrTemplateName, string pstrfieldId)
        //{

        //    List<clsTemplateLabelXmlwork> objTemplateInfo = new List<clsTemplateLabelXmlwork>();

        //    string strStartupPath = System.Windows.Forms.Application.StartupPath + @"\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml";

        //    XmlDocument doc = new XmlDocument();
        //    try
        //    {
        //        doc.Load(strStartupPath);
        //        XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template[@templatename='" + pstrTemplateName + "']");

        //        if (el != null)
        //        {
        //            XmlNodeList tempfieldnodelist = doc.SelectNodes(".//field");
        //            foreach (XmlNode xnfield in tempfieldnodelist)
        //            {
        //                if (xnfield != null)
        //                {
        //                    if (xnfield["Id"].InnerText.ToString().ToLower().Trim() == pstrfieldId.ToLower().Trim())
        //                    {
        //                        //edit mode
        //                        objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
        //                                                                                           xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
        //                                                                                           xnfield["imgpath"] != null ? xnfield["imgpath"].InnerText.ToString() : null,
        //                                                                                           xnfield["aspectratio"] != null ? xnfield["aspectratio"].InnerText.ToString() : null,

        //                                                                                           xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
        //                                                                                           xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
        //                                                                                           xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
        //                                                                                           xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
        //                                                                                           xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null));

        //                    }
        //                    else if (string.IsNullOrWhiteSpace(pstrfieldId))
        //                    {
        //                        //Get all rec
        //                        //objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["datasource"] != null ? xnfield["datasource"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["datasourcetext"] != null ? xnfield["datasourcetext"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["testdata"] != null ? xnfield["testdata"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["barcodetype"] != null ? xnfield["barcodetype"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["wordwrap"] != null ? xnfield["wordwrap"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null,
        //                        //                                                                  xnfield["fontsize"] != null ? xnfield["fontsize"].InnerText.ToString() : null));

        //                        objTemplateInfo.Add(new clsTemplateLabelXmlwork(pstrTemplateName, xnfield["Id"] != null ? xnfield["Id"].InnerText.ToString() : null, xnfield["fieldtype"] != null ? xnfield["fieldtype"].InnerText.ToString() : null,
        //                                                                                           xnfield["fieldname"] != null ? xnfield["fieldname"].InnerText.ToString() : null,
        //                                                                                           xnfield["imgpath"] != null ? xnfield["imgpath"].InnerText.ToString() : null,
        //                                                                                           xnfield["aspectratio"] != null ? xnfield["aspectratio"].InnerText.ToString() : null,

        //                                                                                           xnfield["orientation"] != null ? xnfield["orientation"].InnerText.ToString() : null,
        //                                                                                           xnfield["imgwidth"] != null ? xnfield["imgwidth"].InnerText.ToString() : null,
        //                                                                                           xnfield["imgheight"] != null ? xnfield["imgheight"].InnerText.ToString() : null,
        //                                                                                           xnfield["xposition"] != null ? xnfield["xposition"].InnerText.ToString() : null,
        //                                                                                           xnfield["yposition"] != null ? xnfield["yposition"].InnerText.ToString() : null));




        //                    }



        //                }

        //            }
        //        } //end if
        //    }
        //    catch (Exception ex)
        //    {

        //    }

        //    return objTemplateInfo;

        //}

        //Update Template Attribute
        public bool UpdateTemplateAttribute(string pstrTemplateName)
        {
            bool blnattrupdate = false;
            string currentValue = string.Empty;

            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + pstrTemplateName + ".xml");

            // instantiate XmlDocument and load XML from file
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(strStartupPath);

                XmlNodeList aNodes = doc.SelectNodes("/QuickBooks/template");

                // loop through all AID nodes
                foreach (XmlNode aNode in aNodes)
                {
                    // grab the "id" attribute
                    XmlAttribute idAttribute = aNode.Attributes["templatename"];

                    // check if that attribute even exists...
                    if (idAttribute != null)
                    {
                        // if yes - read its current value
                        currentValue = idAttribute.Value;
                        idAttribute.Value = pstrTemplateName;
                        blnattrupdate = true;

                    }
                }
            }
            catch (XmlException ex)
            {
                blnattrupdate = false;
            }

            // save the XmlDocument back to disk
            doc.Save(strStartupPath);

            return blnattrupdate;



        }
        //GetItemField Xml
        public void ItemFieldList(List<QuickBooksField> customitemQuickBooksField, string pstrfilepath)
        {
            //create new instance of XmlDocument
            XmlDocument doc = new XmlDocument();
            string lstrescapeitemname = string.Empty;

            try
            {
                //load from file
                doc.Load(pstrfilepath);

                string lstrinnerxml = string.Empty;

                //foreach (XmlElement chNode in doc.SelectNodes("//QuickBooks/CustomItemFields"))
                //{
                //    if (chNode != null)
                //    {
                //        lstrinnerxml = chNode.InnerXml;
                //        break;
                //    }
                //}



                //create node and add value
                XmlNode node = doc.CreateNode(XmlNodeType.Element, "CustomItemFields", null);
         

                foreach (QuickBooksField field in customitemQuickBooksField)
                {
                    //create custom field node
                    XmlNode nodeTitle = doc.CreateElement(Regex.Replace(RemoveSpecialCharacters(field.ItemFieldName.ToString()), @"\s+", "").Replace("/", ""));
                    //XmlNode nodeTitle = doc.CreateElement("_" + field.ItemFieldName.ToString());
                    //add value for it
                    nodeTitle.InnerText = field.ItemFieldName.ToString().Trim();
                    //add to parent node
                    node.AppendChild(nodeTitle);


                }

                //add to elements collection
                doc.DocumentElement.AppendChild(node);

                //save back
                doc.Save(pstrfilepath);
            }
            catch (Exception ex)
            {


            }
        }

        public string RemoveSpecialCharacters(string str)
        {
            return Regex.Replace(str, "[^a-zA-Z0-9_.]+", "", RegexOptions.Compiled);
        }
       
        public string EscapeXml(string s)
        {
            string toxml = s;
            if (!string.IsNullOrEmpty(toxml))
            {

                // replace literal values with entities
                toxml = toxml.Replace("&", "&amp;");
                toxml = toxml.Replace("'", "&apos;");
                toxml = toxml.Replace("\"", "&quot;");
                toxml = toxml.Replace("/", "&quot;");
                toxml = toxml.Replace(">", "&gt;");
                toxml = toxml.Replace("<", "&lt;");
            }
            return toxml;
        }
        public static string UnescapeXml(string s)
        {
            string unxml = s;
            if (!string.IsNullOrEmpty(unxml))
            {
                // replace entities with literal values
                unxml = unxml.Replace("&apos;", "'");
                unxml = unxml.Replace("&quot;", "\"");
                unxml = unxml.Replace("&gt;", ">");
                unxml = unxml.Replace("&lt;", "<");
                unxml = unxml.Replace("&amp;", "&");
            }
            return unxml;
        }

        public void DeletePropertiesField(string path, string searchconditionAttributevalue)
        {

            XmlDocument doc = new XmlDocument();
            doc.Load(path);
            XmlElement el = (XmlElement)doc.SelectSingleNode("/QuickBooks/template/field[Id='" + searchconditionAttributevalue + "']");
            try
            {
                if (el != null) { el.ParentNode.RemoveChild(el); }
            }
            catch (XmlException exp)
            {


            }

            //save xml file.
            doc.Save(path);


        }

        public void Deletecustomfieldxmlnode(string pstrfilepath)
        {
            XmlDocument doc = new XmlDocument();
            try
            {
                doc.Load(pstrfilepath);

                XmlNodeList nodes = doc.SelectNodes("//QuickBooks/CustomItemFields");
                foreach (XmlNode node in nodes)
                {
                    node.ParentNode.RemoveChild(node);
                }
                doc.Save(pstrfilepath);
            }
            catch (Exception ex)
            {

            }
        }

       
        //get item fields with custom field in list
        public List<QuickBooksField> GetItemFieldListfromxml(string pstrfilepath)
        {

            string keyname = string.Empty;
            string keyvalue = string.Empty;
            string fieldnamevalue = string.Empty;
            List<QuickBooksField> lbojQuickBooksfields = new List<QuickBooksField>();
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreWhitespace = true;
            settings.ConformanceLevel = ConformanceLevel.Document;
            using (XmlReader reader = XmlReader.Create(pstrfilepath, settings))
            {
                lbojQuickBooksfields.Add(new QuickBooksField("0", "---Select field---"));
                while (reader.Read())
                {
                    if (reader.IsStartElement() || reader.MoveToContent() == XmlNodeType.Element)
                    {
                        if (reader.Name.Trim() != "QuickBooks" && reader.Name.Trim() != "template" && reader.Name.Trim() != "CustomItemFields")
                        {

                            keyname = reader.Name.ToString().Trim();
                            keyvalue = reader.ReadString().Trim();
                            lbojQuickBooksfields.Add(new QuickBooksField(keyname, keyvalue)); //13-feb
                        }
                    }

                }
            }

            return lbojQuickBooksfields;
        }

        public List<QuickBooksField> GetItemCustomFieldListfromxml(string pstrfilepath)
        {
            bool cntItemFields = false;
            string keyname = string.Empty;
            string keyvalue = string.Empty;
            string fieldnamevalue = string.Empty;
            List<QuickBooksField> lbojQuickBooksfields = new List<QuickBooksField>();
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreWhitespace = true;
            settings.ConformanceLevel = ConformanceLevel.Document;
            using (XmlReader reader = XmlReader.Create(pstrfilepath, settings))
            {
                lbojQuickBooksfields.Add(new QuickBooksField("0", "---Select field---"));
                while (reader.Read())
                {
                    if (reader.IsStartElement() || reader.MoveToContent() == XmlNodeType.Element)
                    {

                        if (reader.Name.Trim() == "CustomItemFields")
                        {
                            cntItemFields = true;
                        }
                        if (cntItemFields && reader.Name.Trim() != "CustomItemFields")
                        {
                            keyname = reader.Name.ToString().Trim();
                            keyvalue = reader.ReadString().Trim();
                            lbojQuickBooksfields.Add(new QuickBooksField(keyname, keyvalue));
                        }
                        //if (reader.Name.Trim() != "QuickBooks" && reader.Name.Trim() != "template" && reader.Name.Trim() != "CustomItemFields")
                        //{
                        //    keyname = reader.Name.ToString().Trim();
                        //    keyvalue = reader.ReadString().Trim();
                        //    lbojQuickBooksfields.Add(new QuickBooksField(keyname, keyvalue)); //13-feb
                        //}
                    }

                }
            }

            return lbojQuickBooksfields;
        }
        public List<QuickBooksField> GetMultiItemFieldListfromxml(string pstrfilepath)
        {
            int cntIndex = 1;
            string keyname = string.Empty;
            string keyvalue = string.Empty;
            string fieldnamevalue = string.Empty;
            List<QuickBooksField> lbojQuickBooksfields = new List<QuickBooksField>();
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreWhitespace = true;
            settings.ConformanceLevel = ConformanceLevel.Document;
            using (XmlReader reader = XmlReader.Create(pstrfilepath, settings))
            {
                while (reader.Read())
                {
                    if (reader.IsStartElement() || reader.MoveToContent() == XmlNodeType.Element)
                    {
                        if (reader.Name.Trim() != "QuickBooks" && reader.Name.Trim() != "template" && reader.Name.Trim() != "CustomItemFields")
                        {
                            keyname = reader.Name.ToString().Trim();
                            keyvalue = reader.ReadString().Trim();
                            lbojQuickBooksfields.Add(new QuickBooksField(keyname, keyvalue)); //13-feb
                        }
                    }


                    //switch (reader.NodeType)
                    //{
                    //    case XmlNodeType.Element:
                    //        if (reader.Name.Trim() != "QuickBooks" && reader.Name.Trim() != "template" && reader.Name.Trim() != "CustomItemFields")
                    //        {

                    //            // lbojQuickBooksfields.Add(new QuickBooksField(cntIndex++, reader.ReadString()));
                    //            lbojQuickBooksfields.Add(new QuickBooksField(reader.Name.ToString().Trim(), reader.ReadString())); //13-feb

                    //        }
                    //        break;


                    //}

                }
            }

            return lbojQuickBooksfields;
        }

        //get customer and item custom field for invoice setting screen: Date 02-July-2019
        public List<QuickBooksField> FillCustomfieldListfromxml(string pstrfilepath)
        {

            string keyname = string.Empty;
            string keyvalue = string.Empty;
            string fieldnamevalue = string.Empty;
            List<QuickBooksField> lbojQuickBooksfields = new List<QuickBooksField>();
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreWhitespace = true;
            settings.ConformanceLevel = ConformanceLevel.Document;
            using (XmlReader reader = XmlReader.Create(pstrfilepath, settings))
            {
                lbojQuickBooksfields.Add(new QuickBooksField(" ", " "));
                while (reader.Read())
                {
                    if (reader.IsStartElement() || reader.MoveToContent() == XmlNodeType.Element)
                    {
                        if (reader.Name.Trim() != "QuickBooks" && reader.Name.Trim() != "template" && reader.Name.Trim() != "CustomItemFields")
                        {
                            keyname = reader.Name.ToString().Trim();
                            keyvalue = reader.ReadString().Trim();
                            lbojQuickBooksfields.Add(new QuickBooksField(keyname, keyvalue)); //13-feb
                        }
                    }


                }
            }

            return lbojQuickBooksfields;
        }

        //for singel invoice item
        public List<QuickBooksField> FillCustomfieldListSingleInvoice(string pstrfilepath)
        {

            string keyname = string.Empty;
            string keyvalue = string.Empty;
            string fieldnamevalue = string.Empty;
            List<QuickBooksField> lbojQuickBooksfieldsinv = new List<QuickBooksField>();
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreWhitespace = true;
            settings.ConformanceLevel = ConformanceLevel.Document;
            using (XmlReader reader = XmlReader.Create(pstrfilepath, settings))
            {
                lbojQuickBooksfieldsinv.Add(new QuickBooksField(" ", " ", " "));
                while (reader.Read())
                {
                    if (reader.IsStartElement() || reader.MoveToContent() == XmlNodeType.Element)
                    {
                        if (reader.Name.Trim() != "QuickBooks" && reader.Name.Trim() != "template" && reader.Name.Trim() != "CustomItemFields")
                        {
                            keyname = reader.Name.ToString().Trim();
                            keyvalue = reader.ReadString().Trim();
                            lbojQuickBooksfieldsinv.Add(new QuickBooksField(keyname, keyvalue, string.Empty)); //13-feb
                        }
                    }


                }
            }

            return lbojQuickBooksfieldsinv;
        }

        //create Template Pdf
        private void pdfImageDelete(string pstrTemplatename)
        {
            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfImagesList")))
                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfImagesList")); //#1

            string imgpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfImagesList" + "\\" + pstrTemplatename + "\\" + pstrTemplatename + ".Tiff");
            string pdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\" + pstrTemplatename + ".pdf");

            if (File.Exists(pdfpath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(pdfpath);
            }

            if (File.Exists(imgpath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(imgpath);
            }
        }
        public string CreateUpdateTemplatePDF(string Templatename, string templateheaderwidth, string templateheaderheight, string fieldTypeName, string TransType, List<clsTemplateLabelXmlwork> objtemplatedetailslist, List<QuickBooksField> objdatasource)
        {
            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float fltpdfimgwidth = '0';
            float fltpdfimgheight = '0';
            float constval = (float)0.010416;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            double? QrImaageWidth;
            float? ImageWidth;
            float? ImageNewWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            string labelfontsize = string.Empty;
            // string lstrupcamsg = string.Empty;
            double Num;
            string datasourcevalue = string.Empty;
            int QrWidth = 0;
            //int QrHeight = 0;
            double pintwidth = 0;
            bool isNum;
            float xplus = '0';
            float yminus = '0';

            //Delete pdf image file if exist

            pdfImageDelete(Templatename);

            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat");


            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);
            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\" + Templatename + ".pdf");
            fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

            fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;



            var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);
            // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

            //doc.SetMargins(0,0,0,0);
            doc.SetMargins(0f, 0f, 0f, 0f);
            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

            doc.Open();

            PdfContentByte cb = writer.DirectContent;
            int returnResult = 0;
            int nwidth = 0, nheight = 0;
            //****Start **** code for Barcode

            //Loop through Template Field Names
            if (objtemplatedetailslist.Count > 0)
            {
                foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                {

                    divX = (Convert.ToSingle(DetailItem.xposition) / constval); //b4 popup
                    divY = (Convert.ToSingle(DetailItem.yposition) / constval);

                    fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                    ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                    ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                    ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;
                    if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                    {
                        //insert image to pdf at x,y location
                        if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                        {
                            Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                            //Resize image depend upon your need
                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                            imageinsert.SetAbsolutePosition(divX, divY);
                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            cb.AddImage(imageinsert);
                        }
                        else
                        {
                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                            //Resize image depend upon your need
                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                            imageinsert.SetAbsolutePosition(divX, divY);
                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            cb.AddImage(imageinsert);
                        }
                    }
                    else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                    {

                        if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                        {
                            iTextSharp.text.pdf.Barcode128 bc = new Barcode128();


                            bc.Code = DetailItem.testdata;
                            labelfontsize = DetailItem.fontsize;
                            bc.StartStopText = false;
                            bc.ChecksumText = true;
                            bc.GenerateChecksum = true;

                            try
                            {
                                if (bc.Code != null && bc.Code != string.Empty)
                                {
                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.Extended = true;
                                    //22-APR-2019

                                    if (fieldTypeName.ToLower() == "barcode" && labelfontsize == "" || Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                    {
                                        bc.Font = null;
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                        {
                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(labelfontsize) / 4));
                                        }
                                        else
                                        {
                                            bc.Baseline = Convert.ToSingle(labelfontsize);
                                        }
                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                        {
                                            case 0:
                                                bc.TextAlignment = Element.ALIGN_LEFT;
                                                break;
                                            case 1:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                            case 2:
                                                bc.TextAlignment = Element.ALIGN_RIGHT;
                                                break;
                                            default:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                        }
                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        bc.Size = Convert.ToSingle(labelfontsize);

                                    }
                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);

                                    img.SetAbsolutePosition(divX, divY);
                                    // img.RotationDegrees = 360;
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                    var createPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                    if (!Directory.Exists(createPath))
                                        Directory.CreateDirectory(createPath);



                                    var path1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");

                                    if (File.Exists(path1))
                                    {
                                        System.GC.Collect();
                                        System.GC.WaitForPendingFinalizers();
                                        File.Delete(path1);
                                    }

                                    float x = img.Width;
                                    float y = img.Height;

                                    var doc1 = new Document(new iTextSharp.text.Rectangle((float)img.Width, (float)ImageHeight), 0f, 0f, 0f, 0f);

                                    // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                                    //doc.SetMargins(0,0,0,0);
                                    doc1.SetMargins(0f, 0f, 0f, 0f);
                                    PdfWriter writer1 = PdfWriter.GetInstance(doc1, new FileStream(path1, FileMode.Create));

                                    doc1.Open();

                                    PdfContentByte cb1 = writer1.DirectContent;
                                    iTextSharp.text.Image img1 = bc.CreateImageWithBarcode(cb1,
                                 iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);
                                    img1.ScaleAbsolute(img1.Width, (float)ImageHeight);
                                    img1.SetAbsolutePosition(0, 0.9f);
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                    cb1.AddImage(img1);
                                    if (doc1.PageNumber == 0)
                                    {
                                        cb1.BeginText();
                                        BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        cb1.SetFontAndSize(bf, 9);
                                        cb1.ShowText(".");
                                        cb1.EndText();
                                    }
                                    doc1.Close();
                                    writer1.Close();


                                    var fltpdfimgwidth1 = (Convert.ToSingle(x) * 2) * 300;

                                    var fltpdfimgheight1 = (Convert.ToSingle(y) * 2) * 300;


                                    var createPath1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                    if (!Directory.Exists(createPath1))
                                        Directory.CreateDirectory(createPath1);

                                    string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");
                                    if (!string.IsNullOrWhiteSpace(Filepath))
                                    {

                                        //image with full size
                                        var pdfToImage = new PdfToImageConverter();

                                        var thumbImg = pdfToImage.GenerateImage(Filepath, 1);
                                        //pixel to inches and resize image
                                        var thumbImgH600 = ResizeImage(thumbImg, Convert.ToInt32(Math.Ceiling(fltpdfimgwidth1)), Convert.ToInt32(Math.Ceiling(fltpdfimgheight1)));

                                        // System.Threading.Thread.Sleep(3000);
                                        thumbImgH600.Save(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".Tiff"), System.Drawing.Imaging.ImageFormat.Tiff);
                                        thumbImg.Dispose();
                                        thumbImgH600.Dispose();
                                        var dirpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF");
                                        if (Directory.Exists(dirpath))
                                        {
                                            Directory.Delete(dirpath, true);
                                        }
                                    }
                                }

                            }
                            catch (Exception ex)
                            {

                            }

                        } //code 128 end
                        else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode")
                        {

                            string lstrqrcodetext = string.Empty;


                            //for (int i = 0; i < objdatasource.Count; i++) //#
                            //{
                            //    datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                            //    if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                            //    {
                            //        if (datasourcevalue == "salesprice")
                            //        {
                            //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                            //            if (isNum)
                            //            {
                            //                lstrqrcodetext = Convert.ToDouble(DetailItem.testdata).ToString("N2");
                            //            }
                            //            else
                            //            {
                            //                lstrqrcodetext = DetailItem.testdata;
                            //            }
                            //        }
                            //        else
                            //        {
                            //            lstrqrcodetext = DetailItem.testdata;

                            //        }


                            //    }

                            //}
                            lstrqrcodetext = DetailItem.testdata;
                            try
                            {
                                if (!string.IsNullOrWhiteSpace(lstrqrcodetext))
                                {
                                    foreach (var itemdimension in objtemplatedetailslist)
                                    {
                                        if (itemdimension.barcodetype != null)
                                        {
                                            if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                            {
                                                // QrHeight = Convert.ToInt32(itemdimension.imgheight);//QrImaageWidth
                                                // QrWidth = Convert.ToInt32(itemdimension.imgwidth);
                                                pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;
                                                // QrImaageWidth = itemdimension.imgwidth !="" ? ((Convert.ToDouble(itemdimension.imgwidth)/ constval)) : 0;
                                                QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel
                                                break;
                                            }
                                        }

                                    }
                                    IDictionary<iTextSharp.text.pdf.qrcode.EncodeHintType, Object> hints = new Dictionary<iTextSharp.text.pdf.qrcode.EncodeHintType, object>();
                                    hints[iTextSharp.text.pdf.qrcode.EncodeHintType.CHARACTER_SET] = "UTF-8";
                                    iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrqrcodetext, QrWidth, QrWidth, hints);
                                    //qrcode.PlaceBarcode(cb,
                                    //iTextSharp.text.BaseColor.BLACK, 1);

                                    iTextSharp.text.Image img = qrcode.GetImage();

                                    //var mask = qrcode.GetImage();
                                    //mask.MakeMask();
                                    //img.ImageMask = mask;


                                    // img.Border = 4;
                                    //img.ScaleToFitHeight = false;
                                    // cb.SetTextMatrix(-2.0f, 0.0f);
                                    //img.ScaleToFit(QrWidth, QrWidth);

                                    // img.ScaleAbsolute((float)QrWidth, (float)QrWidth);
                                    // img.ScaleToFit((float)QrWidth, (float)QrWidth);
                                    img.SetAbsolutePosition(divX, divY);
                                    // img.ScalePercent(100);
                                    //img.SetAbsolutePosition(divX -(float)-15, divY);


                                    //img.ScalePercent(100);
                                    // img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                    var createPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                    if (!Directory.Exists(createPath))
                                        Directory.CreateDirectory(createPath);



                                    var path1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");

                                    if (File.Exists(path1))
                                    {
                                        System.GC.Collect();
                                        System.GC.WaitForPendingFinalizers();
                                        File.Delete(path1);
                                    }
                                    float x = QrWidth;
                                    float y = QrWidth;

                                    var doc1 = new Document(new iTextSharp.text.Rectangle(QrWidth, QrWidth), 0f, 0f, 0f, 0f);

                                    // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                                    //doc.SetMargins(0,0,0,0);
                                    doc1.SetMargins(0f, 0f, 0f, 0f);
                                    PdfWriter writer1 = PdfWriter.GetInstance(doc1, new FileStream(path1, FileMode.Create));

                                    doc1.Open();

                                    PdfContentByte cb1 = writer1.DirectContent;
                                    iTextSharp.text.pdf.BarcodeQRCode qrcode1 = new BarcodeQRCode(lstrqrcodetext, QrWidth, QrWidth, hints);

                                    iTextSharp.text.Image img1 = qrcode1.GetImage();
                                    img1.SetAbsolutePosition(0, 0);

                                    cb1.AddImage(img1);
                                    if (doc1.PageNumber == 0)
                                    {
                                        cb1.BeginText();
                                        BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        cb1.SetFontAndSize(bf, 9);
                                        cb1.ShowText(".");
                                        cb1.EndText();
                                    }
                                    doc1.Close();
                                    writer1.Close();


                                    //var fltpdfimgwidth1 = img1.Width;

                                    //var fltpdfimgheight1 = img1.Width;

                                    var fltpdfimgwidth1 = (Convert.ToSingle(img1.Width) * 2) * 300;

                                    var fltpdfimgheight1 = (Convert.ToSingle(img1.Width) * 2) * 300;


                                    var createPath1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                    if (!Directory.Exists(createPath1))
                                        Directory.CreateDirectory(createPath1);

                                    string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");
                                    if (!string.IsNullOrWhiteSpace(Filepath))
                                    {

                                        //image with full size
                                        var pdfToImage = new PdfToImageConverter();

                                        var thumbImg = pdfToImage.GenerateImage(Filepath, 1);
                                        //pixel to inches and resize image
                                        var thumbImgH600 = ResizeImage(thumbImg, Convert.ToInt32(Math.Ceiling(fltpdfimgwidth1)), Convert.ToInt32(Math.Ceiling(fltpdfimgheight1)));

                                        // System.Threading.Thread.Sleep(3000);
                                        thumbImgH600.Save(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".Tiff"), System.Drawing.Imaging.ImageFormat.Tiff);
                                        thumbImg.Dispose();
                                        thumbImgH600.Dispose();
                                        var dirpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF");
                                        if (Directory.Exists(dirpath))
                                        {
                                            Directory.Delete(dirpath, true);
                                        }
                                    }

                                }

                            }
                            catch (Exception ex)
                            {

                            }


                        } //qrcode end
                          //DataMatrix start:Date 11-Mar-2019
                          //if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType #1
                          //{
                          //    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                          //    bc.Options = (BarcodeDatamatrix.DM_AUTO);

                        //    for (int i = 0; i < objdatasource.Count; i++)
                        //    {
                        //        datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                        //        if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                        //        {
                        //            if (datasourcevalue == "salesprice")
                        //            {
                        //                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                        //                if (isNum)
                        //                {
                        //                    try
                        //                    {
                        //                        returnResult = bc.Generate(Convert.ToDouble(DetailItem.testdata).ToString("N2"));
                        //                    }
                        //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                        //                    {
                        //                        returnResult = 1;
                        //                    }
                        //                }
                        //                else
                        //                {
                        //                    try
                        //                    {
                        //                        returnResult = bc.Generate(DetailItem.testdata);
                        //                    }
                        //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                        //                    {
                        //                        returnResult = 1;
                        //                    }

                        //                }
                        //            }
                        //            else
                        //            {
                        //                try
                        //                {
                        //                    returnResult = bc.Generate(DetailItem.testdata);
                        //                }
                        //                catch (System.IndexOutOfRangeException exp)  // CS0168
                        //                {
                        //                    returnResult = 1;
                        //                }
                        //           }


                        //        }

                        //    }

                        //    try
                        //    {

                        //        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                        //        {
                        //            iTextSharp.text.Image img = null;
                        //             img = bc.CreateImage();

                        //            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                        //            //img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                        //            img.SetAbsolutePosition(divX, divY);

                        //            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                        //            cb.AddImage(img);

                        //        }


                        //    }
                        //    catch (Exception ex)
                        //    {

                        //    }

                        //}

                        //DataMatrix end
                        //upc-a
                        else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                        {

                            DetailItem.testdata += GetUPCDigit(DetailItem.testdata, openWith);
                            //Get checksum for 11 digit and append to existing digit
                            //int lntchecksumdigit;
                            ////Get UPC A code length
                            //if (DetailItem.testdata.ToString().Trim().Length == 11)
                            //{
                            //    if (GetChecksumDigit(DetailItem.testdata.Trim(), out lntchecksumdigit))
                            //    {

                            //        DetailItem.testdata += lntchecksumdigit.ToString();
                            //    }
                            //}

                            // if(ValidateChecksumDigit(DetailItem.testdata.Trim()))
                            // {

                            //Generate UPC-A barcode
                            BarcodeEAN bc = new BarcodeEAN();
                            //bc.Size = 10f;
                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                            // cb.SetFontAndSize(bf, fontSize);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                                if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                                {


                                    if (datasourcevalue == "salesprice")
                                    {
                                        if (DetailItem.testdata.ToString().Trim().Length == 12)
                                        {
                                            bc.Code = null;
                                        }
                                        else
                                        {

                                            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(DetailItem.testdata).ToString("N2");
                                            }
                                            else
                                            {
                                                bc.Code = DetailItem.testdata;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = DetailItem.testdata;
                                    }

                                }
                            }
                            bc.StartStopText = false;

                            bc.CodeType = Barcode.UPCA;
                            bc.Extended = true;
                            if (bc.Code != null && bc.Code != string.Empty)
                            {
                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                bc.Size = fontSize;
                                if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                {
                                    bc.Font = null;
                                }
                                else
                                {
                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                    {
                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                    }
                                    else
                                    {
                                        bc.Baseline = Convert.ToSingle(fontSize);
                                    }
                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                    {
                                        case 0:
                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                            break;
                                        case 1:
                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                            break;
                                        case 2:
                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                            break;
                                        default:
                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                            break;
                                    }
                                }
                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                img.ScaleAbsolute((float)img.Width, (float)ImageHeight);
                                img.SetAbsolutePosition(divX, divY);
                                // img.RotationDegrees = 360;
                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(img);
                                var createPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                if (!Directory.Exists(createPath))
                                    Directory.CreateDirectory(createPath);



                                var path1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");

                                if (File.Exists(path1))
                                {
                                    System.GC.Collect();
                                    System.GC.WaitForPendingFinalizers();
                                    File.Delete(path1);
                                }
                                float x = img.Width;
                                float y = img.Height;

                                var doc1 = new Document(new iTextSharp.text.Rectangle((float)img.Width, (float)ImageHeight), 0f, 0f, 0f, 0f);

                                // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                                //doc.SetMargins(0,0,0,0);
                                doc1.SetMargins(0f, 0f, 0f, 0f);
                                PdfWriter writer1 = PdfWriter.GetInstance(doc1, new FileStream(path1, FileMode.Create));

                                doc1.Open();

                                PdfContentByte cb1 = writer1.DirectContent;
                                iTextSharp.text.Image img1 = bc.CreateImageWithBarcode(cb1,
                             iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);
                                img1.ScaleAbsolute((float)img1.Width, (float)ImageHeight);
                                img1.SetAbsolutePosition(0, 0.9f);
                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                cb1.AddImage(img1);
                                if (doc1.PageNumber == 0)
                                {
                                    cb1.BeginText();
                                    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    cb1.SetFontAndSize(bf, 9);
                                    cb1.ShowText(".");
                                    cb1.EndText();
                                }
                                doc1.Close();
                                writer1.Close();


                                var fltpdfimgwidth1 = (Convert.ToSingle(x) * 2) * 300;

                                var fltpdfimgheight1 = (Convert.ToSingle(y) * 2) * 300;


                                var createPath1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                if (!Directory.Exists(createPath1))
                                    Directory.CreateDirectory(createPath1);

                                string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");
                                if (!string.IsNullOrWhiteSpace(Filepath))
                                {

                                    //image with full size
                                    var pdfToImage = new PdfToImageConverter();

                                    var thumbImg = pdfToImage.GenerateImage(Filepath, 1);
                                    //pixel to inches and resize image
                                    var thumbImgH600 = ResizeImage(thumbImg, Convert.ToInt32(Math.Ceiling(fltpdfimgwidth1)), Convert.ToInt32(Math.Ceiling(fltpdfimgheight1)));

                                    // System.Threading.Thread.Sleep(3000);
                                    thumbImgH600.Save(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".Tiff"), System.Drawing.Imaging.ImageFormat.Tiff);
                                    thumbImg.Dispose();
                                    thumbImgH600.Dispose();
                                    var dirpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF");
                                    if (Directory.Exists(dirpath))
                                    {
                                        Directory.Delete(dirpath, true);
                                    }
                                }
                            }

                            //}
                            //else
                            //{
                            //    lstrupcamsg = "Invalid Test Data for UPC A code";
                            //}
                        }//end upc-a
                        else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                        {
                            Barcode39 bc = new Barcode39();
                            // bc.Size = fontSize;
                            // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            //bc.X =(float)0.01;
                            // bc.N = (float)ImageWidth;

                            //cb.SetFontAndSize(bf, fontSize);
                            //Command by Tamil Rk for implementing Multi Select - 10-29-2020
                            ////for (int i = 0; i < objdatasource.Count; i++)
                            ////{
                            ////    datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                            ////    if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                            ////    {
                            ////        if (datasourcevalue == "salesprice")
                            ////        {
                            ////            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                            ////            if (isNum)
                            ////            {
                            ////                bc.Code = Convert.ToDouble(DetailItem.testdata).ToString("N2");
                            ////            }
                            ////            else
                            ////            {
                            ////                bc.Code = DetailItem.testdata;
                            ////            }
                            ////        }
                            ////        else
                            ////        {
                            ////            bc.Code = DetailItem.testdata;
                            ////            labelfontsize = DetailItem.fontsize;
                            ////        }

                            ////    }

                            ////}
                            bc.Code = DetailItem.testdata;
                            labelfontsize = DetailItem.fontsize;
                            bc.StartStopText = false;

                            //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                            bc.Extended = true;
                            try
                            {
                                if (bc.Code != null && bc.Code != string.Empty)
                                {
                                    // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    // bc.Size = fontSize;
                                    // bc.Baseline = fontSize;
                                    //22-APR-2019
                                    if (fieldTypeName.ToLower() == "barcode" && labelfontsize == "" || Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                    {
                                        bc.Font = null;
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                        {
                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(labelfontsize) / 4));
                                        }
                                        else
                                        {
                                            bc.Baseline = Convert.ToSingle(labelfontsize);
                                        }
                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                        {
                                            case 0:
                                                bc.TextAlignment = Element.ALIGN_LEFT;
                                                break;
                                            case 1:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                            case 2:
                                                bc.TextAlignment = Element.ALIGN_RIGHT;
                                                break;
                                            default:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                        }
                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        bc.Size = Convert.ToSingle(labelfontsize);
                                    }
                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                    img.ScaleAbsolute((float)img.Width, (float)ImageHeight);
                                    img.SetAbsolutePosition(divX, divY);
                                    // img.RotationDegrees = 360;
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                    var createPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                    if (!Directory.Exists(createPath))
                                        Directory.CreateDirectory(createPath);



                                    var path1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");

                                    if (File.Exists(path1))
                                    {
                                        System.GC.Collect();
                                        System.GC.WaitForPendingFinalizers();
                                        File.Delete(path1);
                                    }

                                    float x = img.Width;
                                    float y = img.Height;

                                    var doc1 = new Document(new iTextSharp.text.Rectangle((float)img.Width, (float)ImageHeight), 0f, 0f, 0f, 0f);

                                    // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                                    //doc.SetMargins(0,0,0,0);
                                    doc1.SetMargins(0f, 0f, 0f, 0f);
                                    PdfWriter writer1 = PdfWriter.GetInstance(doc1, new FileStream(path1, FileMode.Create));

                                    doc1.Open();

                                    PdfContentByte cb1 = writer1.DirectContent;
                                    iTextSharp.text.Image img1 = bc.CreateImageWithBarcode(cb1,
                                 iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);
                                    img1.ScaleAbsolute((float)img.Width, (float)ImageHeight);
                                    img1.SetAbsolutePosition(0, 0.9f);
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                    cb1.AddImage(img1);
                                    if (doc1.PageNumber == 0)
                                    {
                                        cb1.BeginText();
                                        BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        cb1.SetFontAndSize(bf, 9);
                                        cb1.ShowText(".");
                                        cb1.EndText();
                                    }
                                    doc1.Close();
                                    writer1.Close();


                                    var fltpdfimgwidth1 = (Convert.ToSingle(x) * 2) * 300;

                                    var fltpdfimgheight1 = (Convert.ToSingle(y) * 2) * 300;


                                    var createPath1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype);
                                    if (!Directory.Exists(createPath1))
                                        Directory.CreateDirectory(createPath1);

                                    string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".pdf");
                                    if (!string.IsNullOrWhiteSpace(Filepath))
                                    {

                                        //image with full size
                                        var pdfToImage = new PdfToImageConverter();

                                        var thumbImg = pdfToImage.GenerateImage(Filepath, 1);
                                        //pixel to inches and resize image
                                        var thumbImgH600 = ResizeImage(thumbImg, Convert.ToInt32(Math.Ceiling(fltpdfimgwidth1)), Convert.ToInt32(Math.Ceiling(fltpdfimgheight1)));

                                        // System.Threading.Thread.Sleep(3000);
                                        thumbImgH600.Save(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + Templatename + "\\" + "BarCode" + "\\" + DetailItem.barcodetype + "\\" + DetailItem.fieldname + ".Tiff"), System.Drawing.Imaging.ImageFormat.Tiff);
                                        thumbImg.Dispose();
                                        thumbImgH600.Dispose();
                                        var dirpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPDF");
                                        if (Directory.Exists(dirpath))
                                        {
                                            Directory.Delete(dirpath, true);
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {

                            }


                        }

                    }

                    else //Field Type is Text Field
                    {

                        cb.BeginText();

                        if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                        {
                            if (Convert.ToBoolean(DetailItem.fontbold) == true)
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                            }

                        }
                        else
                        {
                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                        }


                        cb.SetTextMatrix(divX, divY);


                        //if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                        //{
                        //    isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                        //    if (isNum)
                        //    {
                        //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(DetailItem.testdata).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                        //    }
                        //    else
                        //    {
                        //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), DetailItem.testdata, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                        //    }
                        //}
                        if (Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) //if (datasourcevalue == "purchase information" || datasourcevalue == "item description")
                        {
                            // var serials = wraptext.Replace("\n", "").Split('\r').ToList<string>();
                            wraptext = WordWrapDG(DetailItem.testdata, Convert.ToInt32(DetailItem.wordwrap), fontSize);
                            string[] stringSeparators = new string[] { "\r\n" };
                            string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                            if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                foreach (string splitline in lines)
                                {
                                    //s.Replace("\n", "");

                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 05;
                                    yminus += 08;

                                }
                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 08;
                                    yminus += 06;

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                            {
                                xplus = 18;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valH;
                                        divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = 0;
                                    }
                                }

                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY + yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                    yminus += 00;

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                            {
                                xplus = -2;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valW;
                                        divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = 0;

                                    }
                                }
                                Array.Reverse(lines);
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 00;
                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                            {
                                xplus = 18;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        xplus = 18;
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valH;
                                        divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = 5;

                                    }
                                }
                                //Array.Reverse(lines);
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                    }
                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                    yminus += 00;

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 07;
                                    yminus += 07;

                                }
                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valW;
                                        divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = -3;

                                    }
                                }
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                    }
                                    xplus += 00;
                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                }
                            }

                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), "hello khsual", divX, divY, 0);
                            //for 45 deg. +07, -07(x,y)   y reg line space
                            //for 90 deg. +09, -00(x,y)   x reg word space
                            //for 30 deg.  +05, -08(x,y)
                            //for 60 deg.  +07, -05(x,y)
                            //for 180 deg.  +00, -09(x,y)
                            //for 270 deg.   +10, -00(x,y)

                            //Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                            //ColumnText ct = new ColumnText(cb);
                            //ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                            //ct.Go();

                        }
                        //for line break description by ;,
                        else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0)
                        {


                            wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(DetailItem.testdata), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                            string[] stringSeparators = new string[] { "\r\n" };
                            string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                            if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                foreach (string splitline in lines)
                                {
                                    //s.Replace("\n", "");

                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 05;
                                    yminus += 08;

                                }
                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 08;
                                    yminus += 06;

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                            {
                                xplus = 18;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valH;
                                        divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = 0;
                                    }
                                }
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY + yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                    yminus += 00;

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                            {
                                xplus = -2;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valW;
                                        divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = 0;

                                    }
                                }
                                Array.Reverse(lines);
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 00;
                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                            {
                                xplus = 18;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        xplus = 18;
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valH;
                                        divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = 5;

                                    }
                                }
                                //Array.Reverse(lines);
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                    }
                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                    yminus += 00;

                                }

                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    xplus += 07;
                                    yminus += 07;

                                }
                            }
                            else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                            {
                                xplus = 0;
                                yminus = 0;
                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                {
                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                    {
                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                        lobjLabelConnectorSettings.Show();
                                        lobjLabelConnectorSettings.Hide();
                                        string textHeight = lobjLabelConnectorSettings.valW;
                                        divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                        lobjLabelConnectorSettings.Close();
                                        yminus = -3;

                                    }
                                }
                                foreach (string splitline in lines)
                                {
                                    if (!string.IsNullOrWhiteSpace(splitline))
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                    }
                                    xplus += 00;
                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                }
                            }



                        }
                        else
                        {
                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), DetailItem.testdata, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                        }


                        cb.EndText();

                    }//end text type
                }
            }

            if (objtemplatedetailslist.Count == 0)
            {
                //fltImgWidth = Convert.ToSingle(templateheaderwidth) * 96;

                //fltImgHeight = Convert.ToSingle(templateheaderheight) * 96;
                cb.BeginText();
                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                cb.SetFontAndSize(bf, 9);
                cb.ShowText(".");
                cb.EndText();

            }
            if (doc.PageNumber == 0)
            {
                cb.BeginText();
                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                cb.SetFontAndSize(bf, 9);
                cb.ShowText(".");
                cb.EndText();
            }
            doc.Close();
            writer.Close();

            if (objtemplatedetailslist.Count == 0)
            {

                fltpdfimgwidth = (Convert.ToSingle(templateheaderwidth) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                fltpdfimgheight = (Convert.ToSingle(templateheaderheight) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                ConvertPdfToImage(Templatename, fltpdfimgwidth, fltpdfimgheight); //create image for blank pdf

            }

            //convert pdf to image
            if (objtemplatedetailslist.Count > 0)
            {
                // fltImgWidth = Convert.ToSingle(templateheaderwidth) * 72;
                fltImgWidth = (Convert.ToSingle(templateheaderwidth) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                fltImgHeight = (Convert.ToSingle(templateheaderheight) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                ConvertPdfToImage(Templatename, fltImgWidth, fltImgHeight);


            }
            // errormsg = lstrupcamsg;
            return strfilename;


        }

        //Insert Image to PDF:Date 30-Mar-2019
        public string InsertImageToPDF(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, string resizeImagePath, float imgaddwidth, float imgaddheight, float imgxpos, float imgypos, List<clsTemplateLabelXmlwork> objtemplatedetailslist, List<QuickBooksField> objdatasource)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float fltpdfimgwidth = '0';
            float fltpdfimgheight = '0';
            float constval = (float)0.010416;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            float? ImageNewWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            double pintwidth = 0;
            double? QrImaageWidth;
            float fltlinewidth = '0';
            int QrWidth = 0;


            // string lstrupcamsg = string.Empty;
            double Num;
            string datasourcevalue = string.Empty;

            bool isNum;
            float xplus = '0';
            float yminus = '0';

            //Delete pdf image file if exist

            pdfImageDelete(Templatename);

            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\" + Templatename + ".pdf");


            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat")))
                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat"));

            fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

            fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


            var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);

            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

            doc.Open();

            PdfContentByte cb = writer.DirectContent;
            int returnResult = 0;

            //****Start **** code for Barcode

            //Loop through Template Field Names
            if (objtemplatedetailslist.Count > 0)
            {
                foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                {

                    divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                    divY = (Convert.ToSingle(DetailItem.yposition) / constval);

                    fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                    ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                    ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                    ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                    if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                    {
                        //insert image to pdf at x,y location
                        var divXimg = (Convert.ToSingle(DetailItem.xposition) / constval);
                        var divYimg = (Convert.ToSingle(DetailItem.yposition) / constval); //b4 popup
                                                                                           // var divXimg = (Convert.ToSingle(DetailItem.xposition));
                                                                                           //var divYimg = (Convert.ToSingle(DetailItem.yposition));

                        //insert image to pdf at x,y location
                        if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                        {
                            Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                            //Resize image depend upon your need

                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                            imageinsert.SetAbsolutePosition(divXimg, divYimg);
                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            cb.AddImage(imageinsert);
                        }
                        else
                        {
                            //show default image
                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                            //Resize image depend upon your need

                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                            imageinsert.SetAbsolutePosition(divXimg, divYimg);

                            cb.AddImage(imageinsert);
                        }
                    }
                    else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                    {

                        if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                        {
                            iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                            bc.TextAlignment = Element.ALIGN_CENTER;


                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                                if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                                {
                                    if (datasourcevalue == "salesprice")
                                    {
                                        isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(DetailItem.testdata).ToString("N2");
                                        }
                                        else
                                        {
                                            bc.Code = DetailItem.testdata;
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = DetailItem.testdata;
                                    }
                                    //else if (datasourcevalue == "purchase information" || datasourcevalue == "item description")
                                    //{
                                    //    wraptext = WordWrap(DetailItem.testdata, Convert.ToInt32(DetailItem.wordwrap));

                                    //    Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                                    //    ColumnText ct = new ColumnText(cb);
                                    //    ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                                    //    ct.Go();

                                    //}

                                }

                            }
                            bc.StartStopText = false;

                            try
                            {
                                if (bc.Code != null && bc.Code != string.Empty)
                                {
                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.Extended = true;
                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    bc.Size = fontSize;
                                    bc.Baseline = fontSize;
                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                    img.SetAbsolutePosition(divX, divY);
                                    // img.RotationDegrees = 360;
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                }

                            }
                            catch (Exception ex)
                            {

                            }

                        } //code 128 end
                          //DataMatrix start:Date 11-Mar-2019
                        else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode")
                        {

                            string lstrqrcodetext = string.Empty;

                            lstrqrcodetext = DetailItem.testdata;
                            try
                            {
                                if (!string.IsNullOrWhiteSpace(lstrqrcodetext))
                                {
                                    foreach (var itemdimension in objtemplatedetailslist)
                                    {
                                        if (itemdimension.barcodetype != null)
                                        {
                                            if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                            {
                                                // QrHeight = Convert.ToInt32(itemdimension.imgheight);//QrImaageWidth
                                                // QrWidth = Convert.ToInt32(itemdimension.imgwidth);
                                                pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;
                                                // QrImaageWidth = itemdimension.imgwidth !="" ? ((Convert.ToDouble(itemdimension.imgwidth)/ constval)) : 0;
                                                QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel
                                                break;
                                            }
                                        }

                                    }
                                    IDictionary<iTextSharp.text.pdf.qrcode.EncodeHintType, Object> hints = new Dictionary<iTextSharp.text.pdf.qrcode.EncodeHintType, object>();
                                    hints[iTextSharp.text.pdf.qrcode.EncodeHintType.CHARACTER_SET] = "UTF-8";
                                    iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrqrcodetext, QrWidth, QrWidth, hints);


                                    iTextSharp.text.Image img = qrcode.GetImage();
                                    img.SetAbsolutePosition(divX, divY);

                                    cb.AddImage(img);

                                }

                            }
                            catch (Exception ex)
                            {

                            }


                        }
                        if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                        {
                            iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                            bc.Options = (BarcodeDatamatrix.DM_AUTO);
                            // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                            //bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;


                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                                if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                                {
                                    if (datasourcevalue == "salesprice")
                                    {
                                        isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        if (isNum)
                                        {
                                            try
                                            {
                                                returnResult = bc.Generate(Convert.ToDouble(DetailItem.testdata).ToString("N2"));
                                            }
                                            catch (System.IndexOutOfRangeException exp)  // CS0168
                                            {
                                                returnResult = 1;
                                            }
                                        }
                                        else
                                        {
                                            try
                                            {
                                                returnResult = bc.Generate(DetailItem.testdata);
                                            }
                                            catch (System.IndexOutOfRangeException exp)  // CS0168
                                            {
                                                returnResult = 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            returnResult = bc.Generate(DetailItem.testdata);
                                        }
                                        catch (System.IndexOutOfRangeException exp)  // CS0168
                                        {
                                            returnResult = 1;
                                        }
                                    }


                                }

                            }

                            try
                            {

                                if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                {
                                    iTextSharp.text.Image img = null;
                                    img = bc.CreateImage();

                                    //img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                    img.SetAbsolutePosition(divX, divY);

                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);

                                }


                            }
                            catch (Exception ex)
                            {

                            }

                        }

                        //DataMatrix end
                        //upc-a
                        else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                        {
                            DetailItem.testdata += GetUPCDigit(DetailItem.testdata, openWith);
                            //Get checksum for 11 digit and append to existing digit
                            //int lntchecksumdigit;
                            ////Get UPC A code length
                            //if (DetailItem.testdata.ToString().Trim().Length == 11)
                            //{
                            //    if (GetChecksumDigit(DetailItem.testdata.Trim(), out lntchecksumdigit))
                            //    {

                            //        DetailItem.testdata += lntchecksumdigit.ToString();
                            //    }
                            //}
                            // if(ValidateChecksumDigit(DetailItem.testdata.Trim()))
                            // {

                            //Generate UPC-A barcode
                            BarcodeEAN bc = new BarcodeEAN();

                            //bc.Size = 10f;
                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                            // cb.SetFontAndSize(bf, fontSize);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                                if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                                {


                                    if (datasourcevalue == "salesprice")
                                    {
                                        if (DetailItem.testdata.ToString().Trim().Length == 12)
                                        {
                                            bc.Code = null;
                                        }
                                        else
                                        {

                                            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(DetailItem.testdata).ToString("N2");
                                            }
                                            else
                                            {
                                                bc.Code = DetailItem.testdata;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = DetailItem.testdata;
                                    }

                                }
                            }
                            bc.StartStopText = false;

                            bc.CodeType = Barcode.UPCA;
                            bc.Extended = true;
                            if (bc.Code != null && bc.Code != string.Empty)
                            {
                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                bc.Size = fontSize;
                                if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                {
                                    bc.Font = null;
                                }
                                else
                                {
                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                    {
                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                    }
                                    else
                                    {
                                        bc.Baseline = Convert.ToSingle(fontSize);
                                    }
                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                    {
                                        case 0:
                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                            break;
                                        case 1:
                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                            break;
                                        case 2:
                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                            break;
                                        default:
                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                            break;
                                    }
                                }
                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                img.SetAbsolutePosition(divX, divY);
                                // img.RotationDegrees = 360;
                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(img);
                            }

                            //}
                            //else
                            //{
                            //    lstrupcamsg = "Invalid Test Data for UPC A code";
                            //}
                        }//end upc-a
                        else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                        {
                            Barcode39 bc = new Barcode39();

                            // bc.Size = fontSize;
                            // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                            //cb.SetFontAndSize(bf, fontSize);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                                if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                                {
                                    if (datasourcevalue == "salesprice")
                                    {
                                        isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(DetailItem.testdata).ToString("N2");
                                        }
                                        else
                                        {
                                            bc.Code = DetailItem.testdata;
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = DetailItem.testdata;
                                    }

                                }

                            }
                            bc.StartStopText = false;

                            //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                            bc.Extended = true;
                            try
                            {
                                if (bc.Code != null && bc.Code != string.Empty)
                                {
                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    bc.Size = fontSize;
                                    if ((Convert.ToBoolean(DetailItem.barcharvisible)) == false)
                                    {
                                        bc.Font = null;
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                        {
                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                        }
                                        else
                                        {
                                            bc.Baseline = Convert.ToSingle(fontSize);
                                        }
                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                        {
                                            case 0:
                                                bc.TextAlignment = Element.ALIGN_LEFT;
                                                break;
                                            case 1:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                            case 2:
                                                bc.TextAlignment = Element.ALIGN_RIGHT;
                                                break;
                                            default:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                        }
                                    }
                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                    img.SetAbsolutePosition(divX, divY);
                                    // img.RotationDegrees = 360;
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                }
                            }
                            catch (Exception ex)
                            {

                            }


                        }

                    }
                    else //Field Type is Text Field
                    {

                        cb.BeginText();
                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                        //cb.SetFontAndSize(bf, fontSize);
                        if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                        {
                            if (Convert.ToBoolean(DetailItem.fontbold) == true)
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                            }

                        }
                        else
                        {
                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                        }

                        cb.SetTextMatrix(divX, divY);
                        for (int i = 0; i < objdatasource.Count; i++)
                        {
                            datasourcevalue = objdatasource[i].ItemFieldName.ToLower().Trim();


                            if (DetailItem.datasourcetext.ToLower().Trim() == datasourcevalue)
                            {
                                if (datasourcevalue == "salesprice")
                                {
                                    isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                    if (isNum)
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(DetailItem.testdata).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), DetailItem.testdata, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                }
                                else if (Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) //if (datasourcevalue == "purchase information" || datasourcevalue == "item description")
                                {
                                    // var serials = wraptext.Replace("\n", "").Split('\r').ToList<string>();
                                    wraptext = WordWrap(DetailItem.testdata, Convert.ToInt32(DetailItem.wordwrap), fontSize);
                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }

                                    // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), "hello khsual", divX, divY, 0);
                                    //for 45 deg. +07, -07(x,y)   y reg line space
                                    //for 90 deg. +09, -00(x,y)   x reg word space
                                    //for 30 deg.  +05, -08(x,y)
                                    //for 60 deg.  +07, -05(x,y)
                                    //for 180 deg.  +00, -09(x,y)
                                    //for 270 deg.   +10, -00(x,y)

                                    //Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                                    //ColumnText ct = new ColumnText(cb);
                                    //ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                                    //ct.Go();

                                }

                                else
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), DetailItem.testdata, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                }
                            }
                        }

                        cb.EndText();

                    }//end text type
                }
                ////insert image to pdf at x,y location
                //iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(resizeImagePath);
                ////Resize image depend upon your need
                //imageinsert.ScaleToFit(50f, 120f);
                //imageinsert.SetAbsolutePosition(0.8f,1.3f);
                //cb.AddImage(imageinsert);
            }

            if (objtemplatedetailslist.Count == 0)
            {
                //fltImgWidth = Convert.ToSingle(templateheaderwidth) * 96;

                //fltImgHeight = Convert.ToSingle(templateheaderheight) * 96;
                cb.BeginText();
                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                cb.SetFontAndSize(bf, 9);
                cb.ShowText(".");
                cb.EndText();

            }

            if (doc.PageNumber == 0)
            {
                cb.BeginText();
                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                cb.SetFontAndSize(bf, 9);
                cb.ShowText(".");
                cb.EndText();
            }

            doc.Close();
            writer.Close();
            if (objtemplatedetailslist.Count == 0)
            {

                fltpdfimgwidth = (Convert.ToSingle(templateheaderwidth) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                fltpdfimgheight = (Convert.ToSingle(templateheaderheight) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                ConvertPdfToImage(Templatename, fltpdfimgwidth, fltpdfimgheight); //create image for blank pdf

            }

            //convert pdf to image
            if (objtemplatedetailslist.Count > 0)
            {
                // fltImgWidth = Convert.ToSingle(templateheaderwidth) * 72;
                fltImgWidth = (Convert.ToSingle(templateheaderwidth) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                fltImgHeight = (Convert.ToSingle(templateheaderheight) * 2) * pointmultiplier; //(Convert.ToSingle(templateheaderwidth) * 2) * 96;

                ConvertPdfToImage(Templatename, fltImgWidth, fltImgHeight);


            }
            // errormsg = lstrupcamsg;
            return strfilename;


        }


        public void CreateTestTemplate(string pstrTemplatename)
        {
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            string TestFilepath = string.Empty;
            DirectoryInfo di = new DirectoryInfo(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TestPrint"));

            // Create the directory only if it does not already exist.
            if (di.Exists == false)
                di.Create();
            string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\" + pstrTemplatename + ".pdf");
            if (!string.IsNullOrWhiteSpace(Filepath))
            {

                //var pdfToImagetest = new PdfToImageConverter();

                //var thumbImgtest = pdfToImagetest.GenerateImage(Filepath, 1);              

                //thumbImgtest.Save(System.Windows.Forms.Application.StartupPath + @"\" + "TestPrint" +  "\\" + pstrTemplatename + ".Tiff", System.Drawing.Imaging.ImageFormat.Tiff);
                //thumbImgtest.Dispose();

                var pdtestfFile = Filepath;
                var pdftestToImg = new NReco.PdfRenderer.PdfToImageConverter();
                System.Windows.Forms.PrintDialog printDlg = new System.Windows.Forms.PrintDialog();
                printDlg.PrinterSettings.PrinterName = Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("TestPrinter"));
                if (printDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    pdftestToImg.EnableVectorAntiAliasing = true;
                    pdftestToImg.EnableAntiAliasing = true;
                    pdftestToImg.Dpi = printDlg.PrinterSettings.DefaultPageSettings.PrinterResolution.X;
                    pdftestToImg.GenerateImage(pdtestfFile, 1,
                NReco.PdfRenderer.ImageFormat.Tiff, Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TestPrint" + "\\" + pstrTemplatename + ".Tiff"));

                    //send test file to print
                    TestFilepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TestPrint" + "\\" + pstrTemplatename + ".Tiff");

                    TestPrintDesigner(TestFilepath, printDlg);
                }

            }

        }

        public void DeleteResizeImage(string pstrresizeimage, string pstrtemplatename)
        {

            //string resizeimgpath = System.Windows.Forms.Application.StartupPath + @"\" + "ResizeImages" + "\\" + pstrtemplatename;
            // string originalimgpath = System.Windows.Forms.Application.StartupPath + @"\" + "OriginalImages" + "\\" + pstrtemplatename;
            string delimage = string.Empty;
            string delresizeimage = string.Empty;
            //if (File.Exists(resizeimgpath))
            //{
            //    System.GC.Collect();
            //    System.GC.WaitForPendingFinalizers();
            //    File.Delete(resizeimgpath);
            //}

            //if (File.Exists(originalimgpath))
            //{
            //    System.GC.Collect();
            //    System.GC.WaitForPendingFinalizers();
            //    File.Delete(originalimgpath);
            //}

            DirectoryInfo diroriginalimages = new DirectoryInfo(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "OriginalImages" + "\\" + pstrtemplatename));
            // Create the directory only if it does not already exist.
            if (diroriginalimages.Exists == false)
                diroriginalimages.Create();

            delimage = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "OriginalImages" + "\\" + pstrtemplatename);

            string[] files = System.IO.Directory.GetFiles(delimage, "" + pstrresizeimage + ".*");

            if (files.Length > 0)
            {
                foreach (string f in files)
                {

                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    System.IO.File.Delete(f);
                }
            }

            DirectoryInfo dirresizedimages = new DirectoryInfo(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ResizeImages" + "\\" + pstrtemplatename));
            // Create the directory only if it does not already exist.
            if (dirresizedimages.Exists == false)
                dirresizedimages.Create();
            delresizeimage = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ResizeImages" + "\\" + pstrtemplatename);

            string[] resizefiles = System.IO.Directory.GetFiles(delresizeimage, "" + pstrresizeimage + ".*");

            if (resizefiles.Length > 0)
            {
                foreach (string delfiles in resizefiles)
                {

                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    System.IO.File.Delete(delfiles);
                }
            }


        }

        //generate test print
        public void TestPrint(string FileName)
        {
            StringBuilder logMessage = new StringBuilder();
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            string saveprintername = string.Empty;
            try
            {
                if (string.IsNullOrWhiteSpace(FileName)) return; // Prevents execution of below statements if filename is not selected.

                PrintDocument pd = new PrintDocument();
                pd.PrintPage += (sndr, args) =>
                {
                    System.Drawing.Image i = System.Drawing.Image.FromFile(FileName);

                    //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                    System.Drawing.Rectangle m = args.MarginBounds;

                    //Logic below maintains Aspect Ratio.
                    if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                    {
                        m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                    }
                    else
                    {
                        m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                    }
                    //Calculating optimal orientation.
                    pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                    //Putting image in center of page.
                    // m.Y = (int)((((System.Drawing.Printing.PrintDocument)(sndr)).DefaultPageSettings.PaperSize.Height - m.Height) / 2);
                    // m.X = (int)((((System.Drawing.Printing.PrintDocument)(sndr)).DefaultPageSettings.PaperSize.Width - m.Width) / 2);
                    args.Graphics.DrawImage(i, m);
                };
                System.Windows.Forms.PrintDialog printDlg = new System.Windows.Forms.PrintDialog();
                //Disable the printing document pop-up dialog shown during printing.
                PrintController printController = new StandardPrintController();
                pd.PrintController = printController;
                // pd.DocumentName = FileName;
                printDlg.Document = pd;
                pd.PrinterSettings.PrinterName = Convert.ToString(lobjQBConfiguration.GetLabelConfigSettings("TestPrinter"));
                //pd.PrinterSettings.Copies =1;
                pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                //Call ShowDialog  
                if (printDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    saveprintername = pd.PrinterSettings.PrinterName;
                    //save printer name in config file:Date 26-Mar-2019
                    lobjQBConfiguration.SaveLabelFilePathSettings(saveprintername, "TestPrinter");

                    pd.Print();
                }
            }
            catch (Exception ex)
            {

                QBHelper.WriteLog("ErrorCatch : {0}" + ex.ToString());
            }
            finally
            {
                logMessage.AppendLine(string.Format(System.Globalization.CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

                QBHelper.WriteLog("ErrorFinally : {0}" + logMessage.ToString());
            }
        }
        public void TestPrintDesigner(string FileName, System.Windows.Forms.PrintDialog printer)
        {
            StringBuilder logMessage = new StringBuilder();
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            string saveprintername = string.Empty;
            try
            {
                if (string.IsNullOrWhiteSpace(FileName)) return; // Prevents execution of below statements if filename is not selected.

                PrintDocument pd = new PrintDocument();
                pd.PrintPage += (sndr, args) =>
                {
                    System.Drawing.Image i = System.Drawing.Image.FromFile(FileName);

                    //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                    System.Drawing.Rectangle m = args.MarginBounds;

                    //Logic below maintains Aspect Ratio.
                    if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                    {
                        m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                    }
                    else
                    {
                        m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                    }
                    //Calculating optimal orientation.
                    pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                    //Putting image in center of page.
                    // m.Y = (int)((((System.Drawing.Printing.PrintDocument)(sndr)).DefaultPageSettings.PaperSize.Height - m.Height) / 2);
                    // m.X = (int)((((System.Drawing.Printing.PrintDocument)(sndr)).DefaultPageSettings.PaperSize.Width - m.Width) / 2);
                    args.Graphics.DrawImage(i, m);
                };
                System.Windows.Forms.PrintDialog printDlg = new System.Windows.Forms.PrintDialog();
                //Disable the printing document pop-up dialog shown during printing.
                PrintController printController = new StandardPrintController();
                pd.PrintController = printController;
                // pd.DocumentName = FileName;
                printDlg.Document = pd;
                pd.PrinterSettings.PrinterName = printer.PrinterSettings.PrinterName;
                pd.PrinterSettings.Copies = printer.PrinterSettings.Copies;
                pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                //Call ShowDialog                 
                saveprintername = pd.PrinterSettings.PrinterName;
                //save printer name in config file:Date 26-Mar-2019
                lobjQBConfiguration.SaveLabelFilePathSettings(saveprintername, "TestPrinter");

                pd.Print();

            }
            catch (Exception ex)
            {

                QBHelper.WriteLog("ErrorCatch : {0}" + ex.ToString());
            }
            finally
            {
                logMessage.AppendLine(string.Format(System.Globalization.CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

                QBHelper.WriteLog("ErrorFinally : {0}" + logMessage.ToString());
            }
        }

        private void ConvertPdfToImage(string pstrTemplatename, float pfltImgWidth, float pfltImgHeight)
        {
            //convert pdf to image

            // Create a reference to a directory.
            DirectoryInfo di = new DirectoryInfo(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfImagesList"));

            // Create the directory only if it does not already exist.
            if (di.Exists == false)
                di.Create();

            // Create a subdirectory in the directory just created.
            DirectoryInfo dis = di.CreateSubdirectory(pstrTemplatename);


            string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\" + pstrTemplatename + ".pdf");
            if (!string.IsNullOrWhiteSpace(Filepath))
            {

                //image with full size
                var pdfToImage = new PdfToImageConverter();

                var thumbImg = pdfToImage.GenerateImage(Filepath, 1);
                //pixel to inches and resize image
                var thumbImgH600 = ResizeImage(thumbImg, Convert.ToInt32(Math.Ceiling(pfltImgWidth)), Convert.ToInt32(Math.Ceiling(pfltImgHeight)));

                // System.Threading.Thread.Sleep(3000);
                thumbImgH600.Save(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfImagesList" + "\\" + pstrTemplatename + "\\" + pstrTemplatename + ".Tiff"), System.Drawing.Imaging.ImageFormat.Tiff);
                thumbImg.Dispose();
                thumbImgH600.Dispose();

            }

        }


        //pdf with data fro printing
        private void ConvertPdfToPrintImage(string pstrTemplatename, float pfltimgwidth, float pfltimgheight, string printName, string po = "")
        {
            System.GC.Collect();
            System.GC.WaitForPendingFinalizers();
            //Delete Image Dir if exist
            string dirdelete = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\");

            if (Directory.Exists(dirdelete))
            {
                Directory.Delete(dirdelete, true);
            }

            //convert pdf to image

            // Create a reference to a directory.
            DirectoryInfo di = new DirectoryInfo(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList"));

            // Create the directory only if it does not already exist.
            if (di.Exists == false)
                di.Create();

            // Create a subdirectory in the directory just created.
            DirectoryInfo dis = di.CreateSubdirectory(pstrTemplatename);


            string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + pstrTemplatename + ".pdf");


            if (!string.IsNullOrWhiteSpace(Filepath))
            {

                ////image with full size
                //var pdfInfo = new PdfInfo();
                //var testPdfInfo = pdfInfo.GetPdfInfo(Filepath);
                //int pagecount;
                //int pageno = 0;
                //pagecount = testPdfInfo.Pages;
                //while (pagecount > 0)
                //{
                //    var pdfToImage = new PdfToImageConverter();

                //    var thumbImg = pdfToImage.GenerateImage(Filepath, pageno++);
                //    //pixel to inches and resize image
                //    var thumbImgH600 = ResizeImage(thumbImg, Convert.ToInt32(Math.Ceiling(pfltimgwidth)), Convert.ToInt32(Math.Ceiling(pfltimgheight)));

                //    // System.Threading.Thread.Sleep(3000);
                //    thumbImgH600.Save(System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\" + pstrTemplatename + ".Jpeg", System.Drawing.Imaging.ImageFormat.Jpeg);
                //    thumbImg.Dispose();
                //    thumbImgH600.Dispose();
                //    pagecount--;
                //}



                //Get no of page of pdf & print multiple pages in pdf running // 19-Feb-2019
                //        var pdfInfo = new PdfInfo();
                //        var testPdfInfo = pdfInfo.GetPdfInfo(Filepath);
                //        int pagecount;
                //        pagecount = testPdfInfo.Pages;
                //        var pdfToImage = new PdfToImageConverter();
                //        //if (pfltimgwidth > 0 && pfltimgheight > 0)
                //        //{
                //        //    pdfToImage.Dpi = pintdpi;
                //        //    pdfToImage.ScaleTo = pfltimgwidth * pfltimgheight;
                //        //}

                //        var fileNames = pdfToImage.GenerateImages(Filepath, 1, pagecount,  // render from pages 1-n
                //NReco.PdfRenderer.ImageFormat.Png, System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\");

                //print single image: option 1-current
                var pdfFile = Filepath;
                var pdfToImg = new NReco.PdfRenderer.PdfToImageConverter();
                if (!string.IsNullOrWhiteSpace(printName))
                {
                    PrintDocument pd = new PrintDocument();

                    //Disable the printing document pop-up dialog shown during printing.
                    PrintController printController = new StandardPrintController();
                    pd.PrintController = printController;

                    pd.PrinterSettings.PrinterName = printName;
                    pdfToImg.EnableVectorAntiAliasing = true;
                    pdfToImg.Dpi = pd.PrinterSettings.DefaultPageSettings.PrinterResolution.X;
                }


                //pdfToImg.ScaleTo = 230 * 360 ; // fit 200x200 box
                //pdfToImg.Dpi = 200;
                pdfToImg.GenerateImage(pdfFile, 1,
                NReco.PdfRenderer.ImageFormat.Tiff, Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\" + pstrTemplatename + ".Tiff"));

                //Option - Srinivas -- Start

                //using (Bitmap bitmap = (Bitmap)System.Drawing.Image.FromFile(System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\" + pstrTemplatename + ".Tiff"))
                //{
                //    using (Bitmap newBitmap = new Bitmap(bitmap))
                //    {
                //        newBitmap.SetResolution(20, 20);
                //        newBitmap.Save(System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\" + "Srinivas1" + ".Tiff", System.Drawing.Imaging.ImageFormat.Tiff);
                //    }
                //}
                //Option - Srinivas -- End

                //option2:
                //image with full size
                //var pdfToImage1 = new PdfToImageConverter();
                //var thumbImg1 = pdfToImage1.GenerateImage(Filepath, 1);

                ////pixel to inches and resize image
                //var thumbImgH6001 = ResizeImageFromPdf(thumbImg1, 4 * 200, 3 * 200);

                //// System.Threading.Thread.Sleep(3000);
                //thumbImgH6001.Save(System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\" + pstrTemplatename + ".Tiff");
                //thumbImg1.Dispose();
                //thumbImgH6001.Dispose();



            }

        }
        //pdf with multiple copies of images :Date 10-APR-2019
        private void ConvertPdfToPrintMultipleImageCopies(string pstrTemplatename, float pfltimgwidth, float pfltimgheight, string PrinterName, string po = "")
        {
            System.GC.Collect();
            System.GC.WaitForPendingFinalizers();
            //Delete Image Dir if exist
            string dirdelete = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\");

            if (Directory.Exists(dirdelete))
            {
                Directory.Delete(dirdelete, true);
            }

            //convert pdf to image

            // Create a reference to a directory.
            DirectoryInfo di = new DirectoryInfo(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList"));

            // Create the directory only if it does not already exist.
            if (di.Exists == false)
                di.Create();

            // Create a subdirectory in the directory just created.
            DirectoryInfo dis = di.CreateSubdirectory(pstrTemplatename);


            string Filepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + pstrTemplatename + ".pdf");


            if (!string.IsNullOrWhiteSpace(Filepath))
            {

                //Get no of page of pdf & print multiple pages in pdf running // 19-Feb-2019
                var pdfInfo = new PdfInfo();
                var testPdfInfo = pdfInfo.GetPdfInfo(Filepath);
                int pagecount;
                pagecount = testPdfInfo.Pages;
                var pdfToImage = new PdfToImageConverter();
                //if (pfltimgwidth > 0 && pfltimgheight > 0)
                //{
                //    pdfToImage.Dpi = pintdpi;
                //    pdfToImage.ScaleTo = pfltimgwidth * pfltimgheight;
                //}
                if (!string.IsNullOrWhiteSpace(PrinterName))
                {
                    PrintDocument pd = new PrintDocument();

                    //Disable the printing document pop-up dialog shown during printing.
                    PrintController printController = new StandardPrintController();
                    pd.PrintController = printController;

                    pd.PrinterSettings.PrinterName = PrinterName;
                    pdfToImage.EnableVectorAntiAliasing = true;
                    pdfToImage.Dpi = pd.PrinterSettings.DefaultPageSettings.PrinterResolution.X;
                }

                if (pagecount > 1)
                {
                    var fileNames = pdfToImage.GenerateImages(Filepath, 1, pagecount,  // render from pages 1-n
            NReco.PdfRenderer.ImageFormat.Tiff, Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\"));
                }
                else
                {

                    var fileNames = pdfToImage.GenerateImages(Filepath,   // render from pages 1-n
                NReco.PdfRenderer.ImageFormat.Tiff, Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + pstrTemplatename + "\\"));
                }

            }

        }


        //print template for item
        public string PrintTemplateForItems(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, string pstrlotno, string pstrqtyonlable, int IdenticalCopyofLabel, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string PrinterName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float fltpdfimgwidth = '0';
            float fltpdfimgheight = '0';
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            float? ImageNewWidth;
            double? QrImaageWidth;
            double pintwidth = 0;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int dpi;
            int scaleX;
            int returnResult = 0;
            int scaleY;
            // string lstrupcamsg = string.Empty;
            double Num;
            string datasourcevalue = string.Empty;
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;
            int QrWidth = 0;
            //clsItemDetails objclsItemDetails = new clsItemDetails();
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            QBConfiguration lobjQBConfiguration = new QBConfiguration();

            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);

            //objClsType = objclsItemDetails.GetType();

            if (File.Exists(strpdfpath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfpath);

            }
            if (File.Exists(strpdfImgStartupPath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
            }

            clsItemDetails objclsItemDetails = null;
            Type objClsType;
            object strPropertyValue = null;

            objclsItemDetails = new clsItemDetails();

            objClsType = objclsItemDetails.GetType();

            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

            fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

            fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


            var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);
            // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);


            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

            doc.Open();

            PdfContentByte cb = writer.DirectContent;


            //****Start **** code for border
            var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

            pageBorderRect.Left += doc.LeftMargin;
            pageBorderRect.Right -= doc.RightMargin;
            pageBorderRect.Top -= doc.TopMargin;
            pageBorderRect.Bottom += doc.BottomMargin;


            //****Start **** code for Barcode
            // int printquantity = 0;
            //Loop through Template Field Names
            if (objtemplatedetailslist.Count > 0)
            {
                //  while (printquantity < IdenticalCopyofLabel)
                // {
                foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                {

                    divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                    divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup
                                                                                // divX = Convert.ToSingle(DetailItem.xposition);
                                                                                //divY = Convert.ToSingle(DetailItem.yposition);
                    fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                    //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                    //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                    ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                    ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                    ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                    if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                    {
                        if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                        {
                            //insert image to pdf at x,y location
                            if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                        {
                            Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                            //Resize image depend upon your need
                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                            imageinsert.SetAbsolutePosition(divX, divY);
                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            cb.AddImage(imageinsert);
                        }
                        else
                        {
                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                            //Resize image depend upon your need
                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                            imageinsert.SetAbsolutePosition(divX, divY);
                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            cb.AddImage(imageinsert);
                        }
                        }
                        else
                        {
                            try
                            {
                                strPropertyValue = string.Empty;
                                try
                                {
                                    string lstrPropertyValExt = string.Empty;

                                    foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                    {

                                        if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                        {
                                            customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                        {
                                            customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                }
                                catch (Exception exExt)
                                {
                                    strPropertyValue = string.Empty;
                                }
                                finally
                                {

                                }
                            }
                            catch (Exception ex)
                            {
                                strPropertyValue = string.Empty;
                            }
                            string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                            string Imagepath = ImagepathName + "\\" + strPropertyValue;

                            if (File.Exists(Imagepath))
                            {

                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                cb.AddImage(imageinsert);
                            }
                         

                        }

                    }

                    else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                    {

                        if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                        {
                            iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                            //bc.Size = fontSize;
                            // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                            // cb.SetFontAndSize(bf, fontSize);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        if (objPropertyInfo == null)
                                        {
                                            objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        }
                                        try
                                        {
                                            if (dsitem.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                            {
                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                int loopStatic = 0;
                                                foreach (var fieldVal in ddatasourceStatic)
                                                {
                                                    var Itemstatic = fieldVal.Split('∬');
                                                    if (Itemstatic.Length > 1)
                                                    {
                                                        if (loopStatic == staticVal)
                                                        {
                                                            strPropertyValue = Itemstatic[1];
                                                            staticVal = staticVal + 1;
                                                            break;
                                                        }
                                                        loopStatic = loopStatic + 1;
                                                    }

                                                }

                                            }
                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }

                                            else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                            {
                                                strPropertyValue = pstrlotno;

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                            {
                                                strPropertyValue = pstrqtyonlable;

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                                {

                                                    if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                        {
                                            checkQuickBooksvalue.Append(strPropertyValue);
                                            checkQuickBooksvalue.Append(chart);
                                        }
                                    }
                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                }
                                else
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    if (objPropertyInfo == null)
                                    {
                                        objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    }
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }

                                        else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                        {
                                            strPropertyValue = pstrlotno;

                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                        {
                                            strPropertyValue = pstrqtyonlable;

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                }



                                if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                {
                                    isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                    if (isNum)
                                    {
                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    else
                                    {
                                        // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }
                                }

                                else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                {

                                    bc.Code = pstrlotno != "" ? pstrlotno : string.Empty;
                                }
                                else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                {

                                    bc.Code = pstrqtyonlable != "" ? pstrqtyonlable : string.Empty;
                                }
                                else
                                {
                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                }


                            }
                            bc.StartStopText = false;

                            bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                            bc.ChecksumText = true;
                            bc.GenerateChecksum = true;
                            bc.Extended = true;
                            try
                            {
                                if (bc.Code != null && bc.Code != string.Empty)
                                {

                                    if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //25-APR-2019
                                    {
                                        bc.Font = null;
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                        {
                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                        }
                                        else
                                        {
                                            bc.Baseline = Convert.ToSingle(fontSize);
                                        }
                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                        {
                                            case 0:
                                                bc.TextAlignment = Element.ALIGN_LEFT;
                                                break;
                                            case 1:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                            case 2:
                                                bc.TextAlignment = Element.ALIGN_RIGHT;
                                                break;
                                            default:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                        }
                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        bc.Size = fontSize;
                                    }
                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                    img.SetAbsolutePosition(divX, divY);
                                    // img.RotationDegrees = 360;
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                }
                            }
                            catch (Exception ex)
                            {

                            }

                        } //code 128 end
                          //QR code print
                        else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                        {
                            string lstrqrcodetext = string.Empty;
                            string lstrsubstringvalue = string.Empty;
                            StringBuilder checkQuickBooksvalue = new StringBuilder();
                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                if (!string.IsNullOrWhiteSpace(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr1.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        if (objPropertyInfo == null)
                                        {
                                            objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        }
                                        try
                                        {
                                            if (dsitem.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                            {
                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                int loopStatic = 0;
                                                foreach (var fieldVal in ddatasourceStatic)
                                                {
                                                    var Itemstatic = fieldVal.Split('∬');
                                                    if (Itemstatic.Length > 1)
                                                    {
                                                        if (loopStatic == staticVal)
                                                        {
                                                            strPropertyValue = Itemstatic[1];
                                                            staticVal = staticVal + 1;
                                                            break;
                                                        }
                                                        loopStatic = loopStatic + 1;
                                                    }

                                                }

                                            }
                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            }
                                            //concatinate string to print
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            //custom field print
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                                {
                                                    if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                        //concatinate string to print
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                }
                                                //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                //{
                                                //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                //    strPropertyValue = lstrPropertyValExt;
                                                //}


                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }

                                        }
                                    }
                                    lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                }
                                else
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    if (objPropertyInfo == null)
                                    {
                                        objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    }
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }

                                        else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                        {
                                            strPropertyValue = pstrlotno;

                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                        {
                                            strPropertyValue = pstrqtyonlable;

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                    lstrsubstringvalue = strPropertyValue.ToString();
                                }
                            }


                            //for (int i = 0; i < objdatasource.Count; i++)
                            //{

                            //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                            //    try
                            //    {
                            //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                            //        {
                            //            strPropertyValue = DetailItem.testdata.ToString();
                            //        }
                            //        else
                            //        {
                            //            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                            //        }
                            //    }
                            //    catch (Exception ex)
                            //    {
                            //        //strPropertyValue = string.Empty;
                            //        try
                            //        {
                            //            string lstrPropertyValExt = string.Empty;
                            //            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                            //            {

                            //                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                            //                {
                            //                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                            //                    strPropertyValue = lstrPropertyValExt;
                            //                }
                            //                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                            //                {
                            //                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                            //                    strPropertyValue = lstrPropertyValExt;
                            //                }
                            //                else
                            //                {
                            //                    strPropertyValue = string.Empty;
                            //                }
                            //            }


                            //        }
                            //        catch (Exception exExt)
                            //        {
                            //            strPropertyValue = string.Empty;
                            //        }
                            //        finally
                            //        {

                            //        }


                            //    }

                            //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                            //    {
                            //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                            //        if (isNum)
                            //        {
                            //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                            //        }
                            //        else

                            //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                            //    }

                            //    else
                            //    {
                            //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                            //    }


                            //}

                            try
                            {
                                if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                {
                                    foreach (var itemdimension in objtemplatedetailslist)
                                    {
                                        if (itemdimension.barcodetype != null)
                                        {
                                            if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                            {
                                                pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                break;
                                            }
                                        }

                                    }

                                    iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                    iTextSharp.text.Image img = qrcode.GetImage();

                                    img.SetAbsolutePosition(divX, divY);

                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                }
                            }
                            catch (Exception ex)
                            {

                            }


                        } //code qr end

                        //data matrix end
                        //upc-a
                        else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                        {

                            DetailItem.testdata += GetUPCDigit(Convert.ToString(DetailItem.testdata.Trim()), openWith);
                            if (ValidateChecksumDigit(DetailItem.testdata.Trim()) || openWith["Digit"])
                            {

                                //Generate UPC-A barcode
                                BarcodeEAN bc = new BarcodeEAN();

                                // bc.Size = 10f;
                                // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                // cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    if (objPropertyInfo == null)
                                    {
                                        objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    }
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }

                                        else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                        {
                                            strPropertyValue = pstrlotno;

                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                        {
                                            strPropertyValue = pstrqtyonlable;

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        else
                                        {
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = strPropertyValue.ToString();
                                        }
                                    }
                                    //else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                    //{
                                    //    bc.Code = pstrlotno.Trim();
                                    //}
                                    //else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                    //{
                                    //    bc.Code = pstrqtyonlable.Trim();
                                    //}
                                    else
                                    {
                                        bc.Code = strPropertyValue.ToString();
                                    }


                                }

                                bc.StartStopText = false;

                                bc.CodeType = Barcode.UPCA;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {

                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false || Convert.ToBoolean(DetailItem.barcharvisible) == false) //25-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            }
                            //else
                            //{
                            //    lstrupcamsg = "Invalid Test Data for UPC A code";
                            //}
                        }//end upc-a
                        else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                        {
                            Barcode39 bc = new Barcode39();

                            // bc.Size = fontSize;
                            // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                            // cb.SetFontAndSize(bf, fontSize);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        if (objPropertyInfo == null)
                                        {
                                            objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        }
                                        try
                                        {

                                            if (dsitem.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                            {
                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                int loopStatic = 0;
                                                foreach (var fieldVal in ddatasourceStatic)
                                                {
                                                    var Itemstatic = fieldVal.Split('∬');
                                                    if (Itemstatic.Length > 1)
                                                    {
                                                        if (loopStatic == staticVal)
                                                        {
                                                            strPropertyValue = Itemstatic[1];
                                                            staticVal = staticVal + 1;
                                                            break;
                                                        }
                                                        loopStatic = loopStatic + 1;
                                                    }

                                                }

                                            }
                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                                {

                                                    if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                        {
                                            checkQuickBooksvalue.Append(strPropertyValue);
                                            checkQuickBooksvalue.Append(chart);
                                        }
                                    }
                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                }
                                else
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    if (objPropertyInfo == null)
                                    {
                                        objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    }
                                    try
                                    {

                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }

                                        else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                        {
                                            strPropertyValue = pstrlotno;

                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                        {
                                            strPropertyValue = pstrqtyonlable;

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                }



                                if (DetailItem.datasourcetext.ToLower() == "salesprice" & strPropertyValue != null)
                                {
                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                    if (isNum)
                                    {
                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                    }
                                    else
                                    {
                                        // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }
                                }

                                // else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                // {
                                // // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), pstrlotno, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                // bc.Code = pstrlotno.Trim();

                                //}
                                // else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                // {
                                // //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), pstrqtyonlable, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                // bc.Code = pstrqtyonlable.Trim();
                                // }
                                else
                                {
                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                }

                            }

                            bc.StartStopText = false;

                            //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                            bc.Extended = true;
                            // bc.ChecksumText = true;
                            // bc.GenerateChecksum = true;
                            try
                            {
                                if (bc.Code != null && bc.Code != string.Empty)
                                {

                                    if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //25-APR-2019
                                    {
                                        bc.Font = null;
                                    }
                                    else
                                    {
                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                        {
                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                        }
                                        else
                                        {
                                            bc.Baseline = Convert.ToSingle(fontSize);
                                        }
                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                        {
                                            case 0:
                                                bc.TextAlignment = Element.ALIGN_LEFT;
                                                break;
                                            case 1:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                            case 2:
                                                bc.TextAlignment = Element.ALIGN_RIGHT;
                                                break;
                                            default:
                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                break;
                                        }
                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        bc.Size = fontSize;
                                    }
                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                    img.SetAbsolutePosition(divX, divY);
                                    // img.RotationDegrees = 360;
                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(img);
                                }
                            }
                            catch (Exception ex)
                            {

                            }


                        }

                    }
                    else //Field Type is Text Field
                    {
                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                        // cb.SetFontAndSize(bf, fontSize);
                        cb.BeginText();
                        if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                        {
                            if (Convert.ToBoolean(DetailItem.fontbold) == true)
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                            }

                        }
                        else
                        {
                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                        }
                        cb.SetTextMatrix(divX, divY);

                        for (int i = 0; i < objdatasource.Count; i++)
                        {
                            string lstrsubstringvalue = string.Empty;
                            StringBuilder checkQuickBooksvalue = new StringBuilder();

                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                            {
                                dsdatasource = new List<string>();
                                int staticVal = 0;
                                string chart = DetailItem.delimiter;
                                string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                dsdatasource = charArr.Split('~').ToList();
                                foreach (var dsitem in dsdatasource)
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    if (objPropertyInfo == null)
                                    {
                                        objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    }
                                    try
                                    {
                                        if (dsitem.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                        {
                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                            int loopStatic = 0;
                                            foreach (var fieldVal in ddatasourceStatic)
                                            {
                                                var Itemstatic = fieldVal.Split('∬');
                                                if (Itemstatic.Length > 1)
                                                {
                                                    if (loopStatic == staticVal)
                                                    {
                                                        strPropertyValue = Itemstatic[1];
                                                        staticVal = staticVal + 1;
                                                        break;
                                                    }
                                                    loopStatic = loopStatic + 1;
                                                }

                                            }

                                        }
                                        else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                    {
                                        checkQuickBooksvalue.Append(strPropertyValue);
                                        checkQuickBooksvalue.Append(chart);
                                    }
                                }
                                strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                            }
                            else
                            {
                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                if (objPropertyInfo == null)
                                {
                                    objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                }
                                try
                                {
                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    {
                                        strPropertyValue = DetailItem.testdata.ToString();
                                    }
                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                    {
                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                    }
                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                    {
                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                    }
                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                    {

                                        strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                        }
                                        else
                                        {
                                            strPropertyValue = strPropertyValue.ToString();

                                        }

                                    }

                                    else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                    {
                                        strPropertyValue = pstrlotno;

                                    }
                                    else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                    {
                                        strPropertyValue = pstrqtyonlable;

                                    }
                                    else
                                    {
                                        strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    strPropertyValue = string.Empty;
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                        {

                                            if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                            {
                                                customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                    }
                                    catch (Exception exExt)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    finally
                                    {

                                    }


                                }

                            }


                            //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                            //{
                            //    if (strPropertyValue != null)
                            //    {
                            //        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                            //        if (isNum)
                            //        {
                            //            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX - 18, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                            //        }
                            //        else
                            //        {
                            //            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                            //        }
                            //    }
                            //}
                            //else if (DetailItem.datasourcetext.ToLower() == "lotno")
                            //{
                            //    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), pstrlotno, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree

                            //}
                            //else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                            //{
                            //    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), pstrqtyonlable, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                            //}

                            if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                            {
                                wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                string[] stringSeparators = new string[] { "\r\n" };
                                string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    foreach (string splitline in lines)
                                    {
                                        //s.Replace("\n", "");

                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 05;
                                        yminus += 08;

                                    }
                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 08;
                                        yminus += 06;

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                {
                                    xplus = 18;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valH;
                                            divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = 0;
                                        }
                                    }
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                        yminus += 00;

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                {
                                    xplus = -2;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valW;
                                            divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = 0;

                                        }
                                    }
                                    Array.Reverse(lines);
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 00;
                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                {
                                    xplus = 18;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            xplus = 18;
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valH;
                                            divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = 5;

                                        }
                                    }

                                    //Array.Reverse(lines);
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                        yminus += 00;

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 07;
                                        yminus += 07;

                                    }
                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valW;
                                            divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = -3;

                                        }
                                    }
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 00;
                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                    }
                                }


                            }
                            //for line break description by ;,
                            else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                            {

                                wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                string[] stringSeparators = new string[] { "\r\n" };
                                string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    foreach (string splitline in lines)
                                    {
                                        //s.Replace("\n", "");

                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 05;
                                        yminus += 08;

                                    }
                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 08;
                                        yminus += 06;

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                {
                                    xplus = 18;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valH;
                                            divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = 0;
                                        }
                                    }
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                        yminus += 00;

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                {
                                    xplus = -2;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valW;
                                            divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = 0;

                                        }
                                    }
                                    Array.Reverse(lines);
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 00;
                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                {
                                    xplus = 18;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            xplus = 18;
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valH;
                                            divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = 5;

                                        }
                                    }
                                    //Array.Reverse(lines);
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                        }
                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                        yminus += 00;

                                    }

                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        xplus += 07;
                                        yminus += 07;

                                    }
                                }
                                else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                {
                                    xplus = 0;
                                    yminus = 0;
                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                    {
                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                        {
                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                            lobjLabelConnectorSettings.Show();
                                            lobjLabelConnectorSettings.Hide();
                                            string textHeight = lobjLabelConnectorSettings.valW;
                                            divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                            lobjLabelConnectorSettings.Close();
                                            yminus = -3;

                                        }
                                    }
                                    foreach (string splitline in lines)
                                    {
                                        if (!string.IsNullOrWhiteSpace(splitline))
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                        }
                                        xplus += 00;
                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                    }
                                }



                            }

                            else
                            {
                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                            }
                        }

                        cb.EndText();

                    }//end text type


                } //end of foreach
                  // printquantity++;
                  //new page
                  // doc.NewPage();


                //  }// end of while

            }

            //if (objtemplatedetailslist.Count == 0)
            //{
            //    fltImgWidth = Convert.ToSingle(templateheaderwidth) * 72;

            //    fltImgHeight = Convert.ToSingle(templateheaderheight) * 72;

            //    cb.BeginText();
            //    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            //    cb.SetFontAndSize(bf, 9);
            //    cb.ShowText(".");
            //    cb.EndText();
            //   // ConvertPdfToImage(Templatename, fltImgWidth, fltImgHeight);
            //}

            doc.Close();
            writer.Close();
            //if (objtemplatedetailslist.Count == 0)
            //{

            //    fltpdfimgwidth = Convert.ToSingle(templateheaderwidth) * 72;

            //    fltpdfimgheight = Convert.ToSingle(templateheaderheight) * 72;

            //    ConvertPdfToImage(Templatename, fltpdfimgwidth, fltpdfimgheight); //create image for blank pdf
            //}


            //convert pdf to image
            if (objtemplatedetailslist.Count > 0)
            {
                //convert inches to pixel
                //fltImgWidth = Convert.ToSingle(templateheaderwidth) * 96;
                fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                // dpi = Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("dpi")) ;
                // scaleX = lobjQBConfiguration.GetLabelConfigSettings("scaleX") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleX")) : 0 ;
                //scaleY = lobjQBConfiguration.GetLabelConfigSettings("scaleY") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleY")) : 0;

                ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName); //test#

                ////Resize Images
                //string udfimgdir = System.Windows.Forms.Application.StartupPath + @"\" + "UdfImages" + "\\" + Templatename + "\\";

                //if (Directory.Exists(udfimgdir))
                //{
                //    System.GC.Collect();
                //    System.GC.WaitForPendingFinalizers();
                //    Directory.Delete(udfimgdir, true);
                //}

                //ResizeTemplateImages(Templatename, fltImgWidth, fltImgHeight);

            }

            return strfilename;

        }
        //print template for item increment counter:Date 11-APR-2019
        public string PrintTemplateForItemIncrementCounter(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, string pstrlotno, string pstrqtyonlable, int itemquantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string printerName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float fltpdfimgwidth = '0';
            float fltpdfimgheight = '0';
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            float? ImageNewWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int dpi;
            int scaleX;
            int returnResult = 0;
            int scaleY;
            // string lstrupcamsg = string.Empty;
            double Num;
            string datasourcevalue = string.Empty;
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            //clsItemDetails objclsItemDetails = new clsItemDetails();
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);

            //objClsType = objclsItemDetails.GetType();

            if (File.Exists(strpdfpath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfpath);

            }
            if (File.Exists(strpdfImgStartupPath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
            }

            clsItemDetails objclsItemDetails = null;
            Type objClsType;
            object strPropertyValue = null;

            objclsItemDetails = new clsItemDetails();

            objClsType = objclsItemDetails.GetType();

            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

            fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

            fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


            var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);
            // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);


            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

            doc.Open();

            PdfContentByte cb = writer.DirectContent;


            //****Start **** code for border
            var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

            pageBorderRect.Left += doc.LeftMargin;
            pageBorderRect.Right -= doc.RightMargin;
            pageBorderRect.Top -= doc.TopMargin;
            pageBorderRect.Bottom += doc.BottomMargin;


            //****Start **** code for Barcode
            int printquantity = 1;
            //Loop through Template Field Names
            if (objtemplatedetailslist.Count > 0)
            {
                while (printquantity <= itemquantity)
                {
                    foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                    {

                        // divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                        //divY = (Convert.ToSingle(DetailItem.yposition) / constval);
                        divX = Convert.ToSingle(DetailItem.xposition);
                        divY = Convert.ToSingle(DetailItem.yposition);
                        fontSize = Convert.ToSingle(DetailItem.fontsize);
                        //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                        //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                        ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                        ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                        ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                        if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                        {
                            //insert image to pdf at x,y location
                            if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                            {
                                Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            else
                            {
                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                        }

                        else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                        {

                            if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                            {
                                iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                bc.TextAlignment = Element.ALIGN_CENTER;
                                //bc.Size = fontSize;
                                // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                        {
                                            //print item 1 of N, 2 of N
                                            strPropertyValue = printquantity.ToString();

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        else
                                        {
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }


                                }
                                bc.StartStopText = false;

                                bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.ChecksumText = true;
                                bc.GenerateChecksum = true;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            } //code 128 end

                            //data matrix start
                            else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                            {
                                iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();

                                bc.Options = (BarcodeDatamatrix.DM_AUTO);
                                //bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                        if (isNum)
                                        {
                                            try
                                            {
                                                returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                            }
                                            catch (System.IndexOutOfRangeException exp)  // CS0168
                                            {
                                                returnResult = 1;
                                            }

                                        }
                                        else
                                        {
                                            try
                                            {
                                                returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                            }
                                            catch (System.IndexOutOfRangeException exp)  // CS0168
                                            {
                                                returnResult = 1;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                        }
                                        catch (System.IndexOutOfRangeException exp)  // CS0168
                                        {
                                            returnResult = 1;
                                        }
                                    }


                                }

                                try
                                {

                                    if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                    {
                                        iTextSharp.text.Image img = null;
                                        img = bc.CreateImage();
                                        //img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                        img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);

                                    }

                                }
                                catch (Exception ex)
                                {

                                }

                            }

                            //data matrix end
                            //upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                            {

                                DetailItem.testdata += GetUPCDigit(Convert.ToString(DetailItem.testdata.Trim()), openWith);
                                if (ValidateChecksumDigit(DetailItem.testdata.Trim()) || openWith["Digit"])
                                {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    // bc.Size = 10f;
                                    // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            else
                                            {
                                                // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue.ToString();
                                            }
                                        }
                                        //else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                        //{
                                        //    bc.Code = pstrlotno.Trim();
                                        //}
                                        //else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                        //{
                                        //    bc.Code = pstrqtyonlable.Trim();
                                        //}
                                        else
                                        {
                                            bc.Code = strPropertyValue.ToString();
                                        }


                                    }

                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }
                                //else
                                //{
                                //    lstrupcamsg = "Invalid Test Data for UPC A code";
                                //}
                            }//end upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                            {
                                Barcode39 bc = new Barcode39();

                                bc.TextAlignment = Element.ALIGN_CENTER;
                                // bc.Size = fontSize;
                                // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    try
                                    {

                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                        {
                                            //print item 1 of N, 2 of N
                                            strPropertyValue = printquantity.ToString();

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    if (DetailItem.datasourcetext.ToLower() == "salesprice" & strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        }
                                        else
                                        {
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }

                                    // else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                    // {
                                    // // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), pstrlotno, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    // bc.Code = pstrlotno.Trim();

                                    //}
                                    // else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                    // {
                                    // //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), pstrqtyonlable, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    // bc.Code = pstrqtyonlable.Trim();
                                    // }
                                    else
                                    {
                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                }

                                bc.StartStopText = false;

                                //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.Extended = true;
                                // bc.ChecksumText = true;
                                // bc.GenerateChecksum = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            }

                        }
                        else //Field Type is Text Field
                        {
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // cb.SetFontAndSize(bf, fontSize);
                            cb.BeginText();
                            if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                            {
                                if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                }

                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }

                            cb.SetTextMatrix(divX, divY);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {

                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                try
                                {
                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    {
                                        strPropertyValue = DetailItem.testdata.ToString();
                                    }
                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                    {
                                        //print item 1 of N, 2 of N
                                        strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                    }
                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                    {
                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                    }
                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                    {
                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                    }
                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "quantityonhand")
                                    {
                                        strPropertyValue = Convert.ToInt32(itemquantity);
                                    }
                                    else
                                    {
                                        strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                    }
                                }
                                catch (Exception ex)
                                {
                                    strPropertyValue = string.Empty;
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                        {

                                            if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                            {
                                                customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                    }
                                    catch (Exception exExt)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    finally
                                    {

                                    }


                                }

                                if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                {
                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                    if (isNum)
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    }
                                }
                                else if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                {
                                    wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }


                                    //Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                                    //ColumnText ct = new ColumnText(cb);
                                    //ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                                    //ct.Go();

                                }
                                //for line break description by ;,
                                else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                {

                                    wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += 09;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }



                                }
                                else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), pstrlotno, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree

                                }
                                else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), pstrqtyonlable, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                }
                                else
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                }

                            }

                            cb.EndText();

                        }//end text type


                    } //end of foreach
                    printquantity++;
                    //new page
                    doc.NewPage();


                }// end of while

            }

            //if (objtemplatedetailslist.Count == 0)
            //{
            //    fltImgWidth = Convert.ToSingle(templateheaderwidth) * 72;

            //    fltImgHeight = Convert.ToSingle(templateheaderheight) * 72;

            //    cb.BeginText();
            //    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
            //    cb.SetFontAndSize(bf, 9);
            //    cb.ShowText(".");
            //    cb.EndText();
            //   // ConvertPdfToImage(Templatename, fltImgWidth, fltImgHeight);
            //}

            doc.Close();
            writer.Close();
            //if (objtemplatedetailslist.Count == 0)
            //{

            //    fltpdfimgwidth = Convert.ToSingle(templateheaderwidth) * 72;

            //    fltpdfimgheight = Convert.ToSingle(templateheaderheight) * 72;

            //    ConvertPdfToImage(Templatename, fltpdfimgwidth, fltpdfimgheight); //create image for blank pdf
            //}


            //convert pdf to image
            if (objtemplatedetailslist.Count > 0)
            {
                //convert inches to pixel
                //fltImgWidth = Convert.ToSingle(templateheaderwidth) * 96;
                fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                // dpi = Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("dpi")) ;
                // scaleX = lobjQBConfiguration.GetLabelConfigSettings("scaleX") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleX")) : 0 ;
                //scaleY = lobjQBConfiguration.GetLabelConfigSettings("scaleY") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleY")) : 0;

                // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight); //test#
                ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                ////Resize Images
                //string udfimgdir = System.Windows.Forms.Application.StartupPath + @"\" + "UdfImages" + "\\" + Templatename + "\\";

                //if (Directory.Exists(udfimgdir))
                //{
                //    System.GC.Collect();
                //    System.GC.WaitForPendingFinalizers();
                //    Directory.Delete(udfimgdir, true);
                //}

                //ResizeTemplateImages(Templatename, fltImgWidth, fltImgHeight);

            }

            return strfilename;

        }


        //print template for multiple item search (for UDf Label)
        public string PrintTemplateForMultipleItems(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int IdenticalCopyofLabel, string lstrlotno, string lotnocolumnname, string lstrqtyonlable, string lstrcutsomcolumnvalue, string lstrconfigcustomfieldcoltext, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string PrinterName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int QrWidth = 0;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            double? QrImaageWidth;
            //clsItemDetails objclsItemDetails = new clsItemDetails();
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            int returnResult = 0;
            List<string> dsdatasource = null;

            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();

            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }
                //clsItemDetails objclsItemDetails = null;

                //Type objClsType;
                //object strPropertyValue = null;

                //objclsItemDetails = new clsItemDetails();

                //objClsType = objclsItemDetails.GetType();

                clsItemDetails objclsItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsItemDetails = new clsItemDetails();

                objClsType = objclsItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);
                // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                // int printquantity = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    //while (printquantity < IdenticalCopyofLabel) // #1
                    // {
                    foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                    {

                        divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                        divY = (Convert.ToSingle(DetailItem.yposition) / constval);
                        // divX = Convert.ToSingle(DetailItem.xposition);
                        // divY = Convert.ToSingle(DetailItem.yposition);
                        fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                        //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                        //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                        ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                        ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                        ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                        if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                        {
                            if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                            {
                                //insert image to pdf at x,y location

                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                            {
                                Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);


                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            else
                            {
                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                                }
                                else
                                {
                                    try
                                    {
                                    strPropertyValue = string.Empty;
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                        {

                                            if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                            {
                                                customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                    }
                                    catch (Exception exExt)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    finally
                                    {

                                    }
                                }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                    string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                    if (File.Exists(Imagepath))
                                    {

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                        cb.AddImage(imageinsert);
                                    }
                                   

                                }

                            }
                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                        {

                            if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                            {
                                iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                //bc.Size = fontSize;
                                //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                // cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            if (objPropertyInfo == null)
                                            {
                                                objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                            }
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToLower() == lstrconfigcustomfieldcoltext)
                                                {
                                                    strPropertyValue = lstrcutsomcolumnvalue;
                                                }
                                                else if (dsitem.ToLower() == lotnocolumnname) //LotNo column map
                                                {
                                                    strPropertyValue = lstrlotno;
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    foreach (clsItemDetails customfield in objdatasource)
                                                    {

                                                        if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }
                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }

                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);


                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        if (objPropertyInfo == null)
                                        {
                                            objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        }
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == lstrconfigcustomfieldcoltext)
                                            {
                                                strPropertyValue = lstrcutsomcolumnvalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == lotnocolumnname) //LotNo column map
                                            {
                                                strPropertyValue = lstrlotno;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                            {
                                                strPropertyValue = lstrqtyonlable;

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }

                                        }
                                    }



                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                        }
                                        else
                                        {
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;

                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }


                                }
                                bc.StartStopText = false;
                                bc.ChecksumText = true;
                                bc.GenerateChecksum = true;

                                bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {

                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //25-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            } //code 128 end
                            //QR code print
                            else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                            {
                                string lstrqrcodetext = string.Empty;
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();
                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr1.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            if (objPropertyInfo == null)
                                            {
                                                objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                            }
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                                {
                                                    strPropertyValue = lstrqtyonlable;

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                                }
                                                //concatinate string to print
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                //custom field print
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;
                                                    foreach (clsItemDetails customfield in objdatasource)
                                                    {

                                                        if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }
                                                    }
                                                    //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    //{
                                                    //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    //    strPropertyValue = lstrPropertyValExt;
                                                    //}


                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }

                                            }
                                        }
                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        if (objPropertyInfo == null)
                                        {
                                            objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        }
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == lstrconfigcustomfieldcoltext)
                                            {
                                                strPropertyValue = lstrcutsomcolumnvalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == lotnocolumnname) //LotNo column map
                                            {
                                                strPropertyValue = lstrlotno;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                            {
                                                strPropertyValue = lstrqtyonlable;

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }

                                        }
                                        lstrsubstringvalue = strPropertyValue.ToString();
                                    }
                                }


                                //for (int i = 0; i < objdatasource.Count; i++)
                                //{

                                //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //    try
                                //    {
                                //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //        {
                                //            strPropertyValue = DetailItem.testdata.ToString();
                                //        }
                                //        else
                                //        {
                                //            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {
                                //        //strPropertyValue = string.Empty;
                                //        try
                                //        {
                                //            string lstrPropertyValExt = string.Empty;
                                //            foreach (clsItemDetails customfield in objdatasource) //Read item custom field value
                                //            {

                                //                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                //                {
                                //                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                //                    strPropertyValue = lstrPropertyValExt;
                                //                }
                                //                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //                {
                                //                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                    strPropertyValue = lstrPropertyValExt;
                                //                }
                                //                else
                                //                {
                                //                    strPropertyValue = string.Empty;
                                //                }
                                //            }


                                //        }
                                //        catch (Exception exExt)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //        }
                                //        finally
                                //        {

                                //        }


                                //    }

                                //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                //    {
                                //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                //        if (isNum)
                                //        {
                                //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                //        }
                                //        else

                                //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }

                                //    else
                                //    {
                                //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }


                                //}

                                try
                                {
                                    if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                    {
                                        foreach (var itemdimension in objtemplatedetailslist)
                                        {
                                            if (itemdimension.barcodetype != null)
                                            {
                                                if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                {
                                                    pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                    QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                    QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                    //QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                    //QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                    break;
                                                }
                                            }

                                        }

                                        iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                        iTextSharp.text.Image img = qrcode.GetImage();

                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            } //code qr end
                              //datamatrix start
                              //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                              // {
                              //     iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                              //     bc.Options = (BarcodeDatamatrix.DM_AUTO);
                              //    // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                              //    // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                            //     for (int i = 0; i < objdatasource.Count; i++)
                            //     {

                            //         PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                            //         try
                            //         {
                            //             if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                            //             {
                            //                 strPropertyValue = DetailItem.testdata.ToString();
                            //             }
                            //             else if (DetailItem.datasourcetext.ToLower() == lstrconfigcustomfieldcoltext)
                            //             {
                            //                 strPropertyValue = lstrcutsomcolumnvalue;
                            //             }
                            //             else
                            //             {
                            //                 strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                            //             }
                            //         }
                            //         catch (Exception ex)
                            //         {
                            //             strPropertyValue = string.Empty;
                            //             try
                            //             {
                            //                 string lstrPropertyValExt = string.Empty;

                            //                 foreach (clsItemDetails customfield in objdatasource)
                            //                 {

                            //                     if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                            //                     {
                            //                         customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                            //                         strPropertyValue = lstrPropertyValExt;
                            //                     }
                            //                     else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                            //                     {
                            //                         customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                            //                         strPropertyValue = lstrPropertyValExt;
                            //                     }
                            //                     else
                            //                     {
                            //                         strPropertyValue = string.Empty;
                            //                     }
                            //                 }
                            //             }
                            //             catch (Exception exExt)
                            //             {
                            //                 strPropertyValue = string.Empty;
                            //             }
                            //             finally
                            //             {

                            //             }


                            //         }
                            //         if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                            //         {
                            //             isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                            //             if (isNum)
                            //             {
                            //                 try
                            //                 {
                            //                     returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                            //                 }
                            //                 catch (System.IndexOutOfRangeException exp)  // CS0168
                            //                 {
                            //                     returnResult = 1;
                            //                 }

                            //             }
                            //             else
                            //             {
                            //                 try
                            //                 {
                            //                     returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                            //                 }
                            //                 catch (System.IndexOutOfRangeException exp)  // CS0168
                            //                 {
                            //                     returnResult = 1;
                            //                 }

                            //             }
                            //         }
                            //         else
                            //         {
                            //             try
                            //             {
                            //                 returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                            //             }
                            //             catch (System.IndexOutOfRangeException exp)  // CS0168
                            //             {
                            //                 returnResult = 1;
                            //             }
                            //         }


                            //     }

                            //     try
                            //     {

                            //         if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                            //         {
                            //             iTextSharp.text.Image img = null;
                            //             img = bc.CreateImage();
                            //             // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                            //             img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                            //             img.SetAbsolutePosition(divX, divY);

                            //             img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            //             cb.AddImage(img);

                            //         }

                            //     }
                            //     catch (Exception ex)
                            //     {

                            //     }

                            // }

                            //datamatrix end
                            //upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                            {

                                // if(ValidateChecksumDigit(DetailItem.testdata.Trim()))
                                // {

                                //Generate UPC-A barcode
                                BarcodeEAN bc = new BarcodeEAN();

                                // bc.Size = fontSize;
                                //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                // cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    if (objPropertyInfo == null)
                                    {
                                        objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    }
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == lstrconfigcustomfieldcoltext)
                                        {
                                            strPropertyValue = lstrcutsomcolumnvalue;
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                        {
                                            strPropertyValue = lstrqtyonlable;

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource)
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    //int lntchecksumdigit;
                                    ////Get UPC A code length
                                    //if (strPropertyValue.ToString().Trim().Length == 11)
                                    //{
                                    //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                    //    {

                                    //        strPropertyValue += lntchecksumdigit.ToString();
                                    //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                    //        {
                                    //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                    //            if (isNum)
                                    //            {
                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                    //            }
                                    //            else
                                    //            {

                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //            }
                                    //        }
                                    //        else
                                    //        {
                                    //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //        }


                                    //    }
                                    //}
                                    strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                    if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                    {

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        {
                                            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            else
                                            {
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                // bc.Code = DetailItem.testdata;
                                                // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }


                                }
                                bc.StartStopText = false;
                                bc.CodeType = Barcode.UPCA;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {

                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //25-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                                //}
                                //else
                                //{
                                //    lstrupcamsg = "Invalid Test Data for UPC A code";
                                //}
                            }//end upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                            {
                                Barcode39 bc = new Barcode39();

                                // bc.Size = fontSize;
                                //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                // cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            if (objPropertyInfo == null)
                                            {
                                                objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                            }
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToLower() == lstrconfigcustomfieldcoltext)
                                                {
                                                    strPropertyValue = lstrcutsomcolumnvalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    foreach (clsItemDetails customfield in objdatasource)
                                                    {

                                                        if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        if (objPropertyInfo == null)
                                        {
                                            objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        }
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == lstrconfigcustomfieldcoltext)
                                            {
                                                strPropertyValue = lstrcutsomcolumnvalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                            {
                                                strPropertyValue = lstrqtyonlable;

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (customfield.CustomItem.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }



                                    if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        else
                                        {
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                } //for end

                                bc.StartStopText = false;
                                // bc.ChecksumText = true;
                                // bc.GenerateChecksum = true;
                                //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {

                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //25-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            }

                        }
                        else //Field Type is Text Field
                        {
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // cb.SetFontAndSize(bf, fontSize);
                            cb.BeginText();
                            if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                            {
                                if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                }

                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            cb.SetTextMatrix(divX, divY);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        if (objPropertyInfo == null)
                                        {
                                            objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        }
                                        try
                                        {
                                            if (dsitem.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                            {
                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                int loopStatic = 0;
                                                foreach (var fieldVal in ddatasourceStatic)
                                                {
                                                    var Itemstatic = fieldVal.Split('∬');
                                                    if (Itemstatic.Length > 1)
                                                    {
                                                        if (loopStatic == staticVal)
                                                        {
                                                            strPropertyValue = Itemstatic[1];
                                                            staticVal = staticVal + 1;
                                                            break;
                                                        }
                                                        loopStatic = loopStatic + 1;
                                                    }

                                                }

                                            }
                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (dsitem.ToLower() == lstrconfigcustomfieldcoltext)
                                            {
                                                strPropertyValue = lstrcutsomcolumnvalue;
                                            }
                                            else if (dsitem.ToLower() == lotnocolumnname) //LotNo column map
                                            {
                                                strPropertyValue = lstrlotno;
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }


                                                // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                                // {

                                                //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                                //{
                                                //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                //    strPropertyValue = lstrPropertyValExt;
                                                //}
                                                //else
                                                //{
                                                //    strPropertyValue = string.Empty;
                                                //}
                                                // }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                        {
                                            checkQuickBooksvalue.Append(strPropertyValue);
                                            checkQuickBooksvalue.Append(chart);
                                        }
                                    }
                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                }
                                else
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    if (objPropertyInfo == null)
                                    {
                                        objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    }
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == lstrconfigcustomfieldcoltext)
                                        {
                                            strPropertyValue = lstrcutsomcolumnvalue;
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == lotnocolumnname) //LotNo column map
                                        {
                                            strPropertyValue = lstrlotno;
                                        }

                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                        {
                                            strPropertyValue = lstrqtyonlable;

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource)
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }


                                            // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                            // {

                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                            //{
                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            //    strPropertyValue = lstrPropertyValExt;
                                            //}
                                            //else
                                            //{
                                            //    strPropertyValue = string.Empty;
                                            //}
                                            // }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                }


                                //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                //{
                                //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //    if (isNum)
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //    else
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //}
                                if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                {
                                    wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }


                                    //Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                                    //ColumnText ct = new ColumnText(cb);
                                    //ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                                    //ct.Go();

                                }

                                //for line break description by ;,
                                else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                {

                                    wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }



                                }

                                //else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                //{
                                //    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), lstrqtyonlable, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree

                                //}
                                else
                                {
                                    //if (DetailItem.datasourcetext.ToLower() != "salesprice")
                                    //{
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                                                                                                                                                                                                                                                                                                                                     // }
                                }

                            }

                            cb.EndText();

                        }//end text type
                    } //end of foreach
                      // printquantity++; //#2
                      //new page
                      // doc.NewPage(); //#3


                    // }// end of while //#4

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    //dpi = lobjQBConfiguration.GetLabelConfigSettings("dpi") !="" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("dpi")) : 0;
                    //scaleX = lobjQBConfiguration.GetLabelConfigSettings("scaleX") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleX")) : 0;
                    // scaleY = lobjQBConfiguration.GetLabelConfigSettings("scaleY") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleY")) : 0;


                    ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName); //for test

                    //Resize Images
                    //string udfimgdir = System.Windows.Forms.Application.StartupPath + @"\" + "UdfImages" + "\\" + Templatename + "\\";

                    //if (Directory.Exists(udfimgdir))
                    //{
                    //    System.GC.Collect();
                    //    System.GC.WaitForPendingFinalizers();
                    //    Directory.Delete(udfimgdir, true);
                    //}

                    //ResizeTemplateImages(Templatename, fltImgWidth, fltImgHeight);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }

        //print template for multiple item search increment counter:Date 11-APR-2019
        public string PrintTemplateForMultipleItemsIncrementCounter(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int itemquantity, string lstrlotno, string lstrqtyonlable, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string printerName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';

            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            float? ImageNewWidth;
            double Num;
            string datasourcevalue = string.Empty;
            //clsItemDetails objclsItemDetails = new clsItemDetails();
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            int returnResult = 0;


            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();

            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }
                //clsItemDetails objclsItemDetails = null;

                //Type objClsType;
                //object strPropertyValue = null;

                //objclsItemDetails = new clsItemDetails();

                //objClsType = objclsItemDetails.GetType();

                clsItemDetails objclsItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsItemDetails = new clsItemDetails();

                objClsType = objclsItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);
                // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 1;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    while (printquantity <= itemquantity) // #1
                    {
                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                        {

                            //divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            // divY = (Convert.ToSingle(DetailItem.yposition) / constval);
                            divX = Convert.ToSingle(DetailItem.xposition);
                            divY = Convert.ToSingle(DetailItem.yposition);
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                //insert image to pdf at x,y location
                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                            }
                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                    //bc.Size = fontSize;
                                    //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                            }
                                            else
                                            {
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;

                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                        }
                                        else
                                        {
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        }


                                    }
                                    bc.StartStopText = false;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  //datamatrix start
                                else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                                    bc.Options = (BarcodeDatamatrix.DM_AUTO);
                                    //bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                    // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;
                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                try
                                                {
                                                    returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                                }
                                                catch (System.IndexOutOfRangeException exp)  // CS0168
                                                {
                                                    returnResult = 1;
                                                }

                                            }
                                            else
                                            {
                                                try
                                                {
                                                    returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                                }
                                                catch (System.IndexOutOfRangeException exp)  // CS0168
                                                {
                                                    returnResult = 1;
                                                }

                                            }
                                        }
                                        else
                                        {
                                            try
                                            {
                                                returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                            }
                                            catch (System.IndexOutOfRangeException exp)  // CS0168
                                            {
                                                returnResult = 1;
                                            }
                                        }


                                    }

                                    try
                                    {

                                        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                        {
                                            iTextSharp.text.Image img = null;
                                            img = bc.CreateImage();
                                            // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);

                                        }

                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }

                                //datamatrix end
                                //upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {
                                    // if(ValidateChecksumDigit(DetailItem.testdata.Trim()))
                                    // {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    // bc.Size = fontSize;
                                    //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                        //int lntchecksumdigit;
                                        ////Get UPC A code length
                                        //if (strPropertyValue.ToString().Trim().Length == 11)
                                        //{
                                        //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                        //    {

                                        //        strPropertyValue += lntchecksumdigit.ToString();
                                        //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        //        {
                                        //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        //            if (isNum)
                                        //            {
                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        //            }
                                        //            else
                                        //            {

                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //        }


                                        //    }
                                        //}
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            {
                                                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                                if (isNum)
                                                {
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                else
                                                {
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    // bc.Code = DetailItem.testdata;
                                                    // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }


                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                    //}
                                    //else
                                    //{
                                    //    lstrupcamsg = "Invalid Test Data for UPC A code";
                                    //}
                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();

                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                    // bc.Size = fontSize;
                                    //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((LabelConnector.clsItemDetails)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                foreach (clsItemDetails customfield in objdatasource)
                                                {

                                                    if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                    {
                                                        customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            else
                                            {
                                                // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;
                                    // bc.ChecksumText = true;
                                    // bc.GenerateChecksum = true;
                                    //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(bf, fontSize);
                                cb.BeginText();
                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }

                                cb.SetTextMatrix(divX, divY);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim().ToLower());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                        {
                                            //print item 1 of N, 2 of N
                                            strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "quantityonhand")
                                        {
                                            strPropertyValue = Convert.ToInt32(itemquantity);
                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((clsItemDetails)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            foreach (clsItemDetails customfield in objdatasource)
                                            {

                                                if (customfield.CustomItem.ContainsKey(DetailItem.datasourcetext.ToString().Trim().ToUpper()))
                                                {
                                                    customfield.CustomItem.TryGetValue(DetailItem.datasourcetext.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }


                                            // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                            // {

                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                            //{
                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            //    strPropertyValue = lstrPropertyValExt;
                                            //}
                                            //else
                                            //{
                                            //    strPropertyValue = string.Empty;
                                            //}
                                            // }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        else
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                    }
                                    else if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                    {
                                        wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                        //Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                                        //ColumnText ct = new ColumnText(cb);
                                        //ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                                        //ct.Go();

                                    }
                                    //for line break description by ;,
                                    else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                    {

                                        wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }



                                    }
                                    else if (DetailItem.datasourcetext.ToLower() == "lotno")
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), lstrlotno, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree

                                    }
                                    else if (DetailItem.datasourcetext.ToLower() == "qtyonlabel")
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), lstrqtyonlable, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree

                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }

                                }

                                cb.EndText();

                            }//end text type
                        } //end of foreach
                        printquantity++; //#2
                                         //new page
                        doc.NewPage(); //#3


                    }// end of while //#4

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    //dpi = lobjQBConfiguration.GetLabelConfigSettings("dpi") !="" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("dpi")) : 0;
                    //scaleX = lobjQBConfiguration.GetLabelConfigSettings("scaleX") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleX")) : 0;
                    // scaleY = lobjQBConfiguration.GetLabelConfigSettings("scaleY") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleY")) : 0;


                    //ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight); //for test
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                    //Resize Images
                    //string udfimgdir = System.Windows.Forms.Application.StartupPath + @"\" + "UdfImages" + "\\" + Templatename + "\\";

                    //if (Directory.Exists(udfimgdir))
                    //{
                    //    System.GC.Collect();
                    //    System.GC.WaitForPendingFinalizers();
                    //    Directory.Delete(udfimgdir, true);
                    //}

                    //ResizeTemplateImages(Templatename, fltImgWidth, fltImgHeight);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }


        //print template for po multilpe(for UDF Label)
        public string PrintTemplateForPOMultiple(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int IdenticalCopyofLabel, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, Dictionary<string, string> lobjDataExtension, string EditDesc, string PrinterName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float fltpdfimgwidth = '0';
            float fltpdfimgheight = '0';
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            float? ImageNewWidth;
            int returnResult = 0;
            int QrWidth = 0;
            double pintwidth = 0;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            // string lstrupcamsg = string.Empty;
            double Num;
            string datasourcevalue = string.Empty;
            double? QrImaageWidth;
            //clsItemDetails objclsItemDetails = new clsItemDetails();
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            int dpi;
            int scaleX;
            int scaleY;
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);

            //objClsType = objclsItemDetails.GetType();
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }
                QBLC.clsPurchaseOrderLine objclsPoItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsPoItemDetails = new QBLC.clsPurchaseOrderLine();

                objClsType = objclsPoItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);
                // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                //var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                //pageBorderRect.Left += doc.LeftMargin;
                //pageBorderRect.Right -= doc.RightMargin;
                //pageBorderRect.Top -= doc.TopMargin;
                //pageBorderRect.Bottom += doc.BottomMargin;

                //cb.SetLineWidth(5f);
                //cb.SetColorStroke(BaseColor.BLACK);
                //cb.Rectangle(pageBorderRect.Left, pageBorderRect.Bottom, pageBorderRect.Width, pageBorderRect.Height);
                //cb.Stroke();

                //****Start **** code for Barcode
                // int printquantity = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    //while (printquantity < IdenticalCopyofLabel) // #1
                    // {
                    foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                    {

                        divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                        divY = (Convert.ToSingle(DetailItem.yposition) / constval);
                        // divX = Convert.ToSingle(DetailItem.xposition);
                        //divY = Convert.ToSingle(DetailItem.yposition);
                        //fontSize = Convert.ToSingle(DetailItem.fontsize);
                        fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                        //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                        //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                        ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                        ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                        ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                        if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                        {
                            if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                            {
                                //insert image to pdf at x,y location
                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                            {
                                Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            else
                            {
                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            }
                            else
                            {
                                try
                                {
                                    string lstrPropertyValExt = string.Empty;

                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    strPropertyValue = string.Empty;
                                }
                                string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                if ( File.Exists(Imagepath))
                                {

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                    cb.AddImage(imageinsert);
                                }
                              

                            }

                        }
                        else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                        {

                            if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                            {
                                iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                //bc.Size = fontSize;
                                //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }

                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                        }
                                        else
                                        {
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;

                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }


                                }
                                bc.StartStopText = false;
                                bc.ChecksumText = true;
                                bc.GenerateChecksum = true;

                                bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        //bc.Size = fontSize;
                                        //bc.Baseline = fontSize;
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //25-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            } //code 128 end
                              //QR code print
                            else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                            {
                                string lstrqrcodetext = string.Empty;
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();
                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr1.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                }
                                                //concatinate string to print
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                //custom field print
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                        //concatinate string to print
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                    //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    //{
                                                    //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    //    strPropertyValue = lstrPropertyValExt;
                                                    //}


                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }

                                            }
                                        }
                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        lstrsubstringvalue = strPropertyValue.ToString();
                                    }
                                }

                                //for (int i = 0; i < objdatasource.Count; i++)
                                //{

                                //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //    try
                                //    {
                                //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //        {
                                //            strPropertyValue = DetailItem.testdata.ToString();
                                //        }
                                //        else
                                //        {
                                //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {
                                //        //strPropertyValue = string.Empty;
                                //        try
                                //        {
                                //            string lstrPropertyValExt = string.Empty;


                                //            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                //            {
                                //                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                //                strPropertyValue = lstrPropertyValExt;
                                //            }
                                //            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //            {
                                //                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                strPropertyValue = lstrPropertyValExt;
                                //            }


                                //        }
                                //        catch (Exception exExt)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //        }
                                //        finally
                                //        {

                                //        }


                                //    }

                                //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                //    {
                                //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                //        if (isNum)
                                //        {
                                //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                //        }
                                //        else

                                //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }

                                //    else
                                //    {
                                //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }


                                //}

                                try
                                {
                                    if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                    {
                                        foreach (var itemdimension in objtemplatedetailslist)
                                        {
                                            if (itemdimension.barcodetype != null)
                                            {
                                                if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                {

                                                    pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                    QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                    QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel
                                                    //QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                    //QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                    break;
                                                }
                                            }

                                        }

                                        iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                        iTextSharp.text.Image img = qrcode.GetImage();

                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            } //code qr end
                              //data matrix start
                              //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                              // {
                              //     iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();

                            //     bc.Options = (BarcodeDatamatrix.DM_AUTO);

                            //    // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                            //    // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                            //     for (int i = 0; i < objdatasource.Count; i++)
                            //     {

                            //         PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                            //         try
                            //         {
                            //             if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                            //             {
                            //                 strPropertyValue = DetailItem.testdata.ToString();
                            //             }
                            //             else
                            //             {
                            //                 strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                            //             }
                            //         }
                            //         catch (Exception ex)
                            //         {
                            //             strPropertyValue = string.Empty;
                            //             try
                            //             {
                            //                 string lstrPropertyValExt = string.Empty;

                            //                 //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                            //                 //{


                            //                 //}
                            //                 if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                            //                 {
                            //                     lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                            //                     strPropertyValue = lstrPropertyValExt;
                            //                 }
                            //                 else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                            //                 {
                            //                     lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                            //                     strPropertyValue = lstrPropertyValExt;
                            //                 }
                            //                 else
                            //                 {
                            //                     strPropertyValue = string.Empty;
                            //                 }
                            //             }
                            //             catch (Exception exExt)
                            //             {
                            //                 strPropertyValue = string.Empty;
                            //             }
                            //             finally
                            //             {

                            //             }


                            //         }
                            //         if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                            //         {
                            //             isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                            //             if (isNum)
                            //             {
                            //                 try
                            //                 {
                            //                     returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                            //                 }
                            //                 catch (System.IndexOutOfRangeException exp)  // CS0168
                            //                 {
                            //                     returnResult = 1;
                            //                 }

                            //             }
                            //             else
                            //             {
                            //                 try
                            //                 {
                            //                     returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                            //                 }
                            //                 catch (System.IndexOutOfRangeException exp)  // CS0168
                            //                 {
                            //                     returnResult = 1;
                            //                 }
                            //             }
                            //         }
                            //         else
                            //         {
                            //             try
                            //             {
                            //                 returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                            //             }
                            //             catch (System.IndexOutOfRangeException exp)  // CS0168
                            //             {
                            //                 returnResult = 1;
                            //             }
                            //         }


                            //     }

                            //     try
                            //     {
                            //         if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                            //         {
                            //             iTextSharp.text.Image img = null;
                            //             img = bc.CreateImage();
                            //             //img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                            //             img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                            //             img.SetAbsolutePosition(divX, divY);

                            //             img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            //             cb.AddImage(img);

                            //         }
                            //     }
                            //     catch (Exception ex)
                            //     {

                            //     }

                            // }
                            //data matrix end

                            //upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                            {
                                // if(ValidateChecksumDigit(DetailItem.testdata.Trim()))
                                // {

                                //Generate UPC-A barcode
                                BarcodeEAN bc = new BarcodeEAN();

                                // bc.Size = fontSize;
                                //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                // cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                            //{


                                            //}
                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                    //int lntchecksumdigit;
                                    ////Get UPC A code length
                                    //if (strPropertyValue.ToString().Trim().Length == 11)
                                    //{
                                    //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                    //    {

                                    //        strPropertyValue += lntchecksumdigit.ToString();
                                    //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                    //        {
                                    //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                    //            if (isNum)
                                    //            {
                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                    //            }
                                    //            else
                                    //            {

                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //            }
                                    //        }
                                    //        else
                                    //        {
                                    //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //        }


                                    //    }
                                    //}
                                    strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                    if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                    {

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        {
                                            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            else
                                            {
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                // bc.Code = DetailItem.testdata;
                                                // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }


                                }
                                bc.StartStopText = false;

                                bc.CodeType = Barcode.UPCA;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        bc.Size = fontSize;
                                        if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                                //}
                                //else
                                //{
                                //    lstrupcamsg = "Invalid Test Data for UPC A code";
                                //}
                            }//end upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                            {
                                Barcode39 bc = new Barcode39();

                                // bc.Size = fontSize;
                                //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }


                                    if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        else
                                        {
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                } //for end

                                bc.StartStopText = false;
                                // bc.ChecksumText = true;
                                // bc.GenerateChecksum = true;
                                //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        //bc.Size = fontSize;
                                        //bc.Baseline = fontSize;
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            }

                        }
                        else //Field Type is Text Field
                        {
                            cb.BeginText();
                            //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);ToString() == "PurchaseOrderLineDesc"
                            // cb.SetFontAndSize(bf, fontSize);
                            if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                            {
                                if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                }

                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            cb.SetTextMatrix(divX, divY);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (dsitem.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                            {
                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                int loopStatic = 0;
                                                foreach (var fieldVal in ddatasourceStatic)
                                                {
                                                    var Itemstatic = fieldVal.Split('∬');
                                                    if (Itemstatic.Length > 1)
                                                    {
                                                        if (loopStatic == staticVal)
                                                        {
                                                            strPropertyValue = Itemstatic[1];
                                                            staticVal = staticVal + 1;
                                                            break;
                                                        }
                                                        loopStatic = loopStatic + 1;
                                                    }

                                                }

                                            }
                                            else if (dsitem.ToString() == "PurchaseOrderLineDesc" && EditDesc != null) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                strPropertyValue = EditDesc.ToString();
                                            }
                                            else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToInt32(IdenticalCopyofLabel);
                                            }
                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                        {
                                            checkQuickBooksvalue.Append(strPropertyValue);
                                            checkQuickBooksvalue.Append(chart);
                                        }
                                    }
                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                }
                                else
                                {


                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString() == "PurchaseOrderLineDesc" && EditDesc != null) //new condition to read custom field with special chars 22-APR-2019
                                        {
                                            strPropertyValue = EditDesc.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                        {
                                            strPropertyValue = Convert.ToInt32(IdenticalCopyofLabel);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();
                                            }

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }


                                            // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                            // {

                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                            //{
                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            //    strPropertyValue = lstrPropertyValExt;
                                            //}
                                            //else
                                            //{
                                            //    strPropertyValue = string.Empty;
                                            //}
                                            // }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }

                                    }
                                }

                                //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                //{
                                //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //    if (isNum)
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //    else
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //}
                                if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                {
                                    wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY + yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt16(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        // Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt16(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }


                                    //Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                                    //ColumnText ct = new ColumnText(cb);
                                    //ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                                    //ct.Go();

                                }
                                //for line break description by ;,
                                //else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                //{

                                //    wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                //    string[] stringSeparators = new string[] { "\r\n" };
                                //    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                //    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            //s.Replace("\n", "");

                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 05;
                                //            yminus += 08;

                                //        }
                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 08;
                                //            yminus += 06;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 09;
                                //            yminus += 00;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        Array.Reverse(lines);
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 00;
                                //            yminus += 09;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        //Array.Reverse(lines);
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                //            }
                                //            xplus += 10;
                                //            yminus += 00;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 07;
                                //            yminus += 07;

                                //        }
                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                //            }
                                //            xplus += 00;
                                //            yminus += 12;

                                //        }
                                //    }



                                //}
                                else
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                }

                            }

                            cb.EndText();

                        }//end text type
                    } //end of foreach
                      // printquantity++; //#2
                      //new page
                      // doc.NewPage(); //#3


                    // }// end of while //#4

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    //dpi = lobjQBConfiguration.GetLabelConfigSettings("dpi") !="" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("dpi")) : 0;
                    //scaleX = lobjQBConfiguration.GetLabelConfigSettings("scaleX") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleX")) : 0;
                    // scaleY = lobjQBConfiguration.GetLabelConfigSettings("scaleY") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleY")) : 0;


                    ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName, "PO"); //for test

                    //Resize Images
                    //string udfimgdir = System.Windows.Forms.Application.StartupPath + @"\" + "UdfImages" + "\\" + Templatename + "\\";

                    //if (Directory.Exists(udfimgdir))
                    //{
                    //    System.GC.Collect();
                    //    System.GC.WaitForPendingFinalizers();
                    //    Directory.Delete(udfimgdir, true);
                    //}

                    //ResizeTemplateImages(Templatename, fltImgWidth, fltImgHeight);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }
        //print template purchase order IncrementCounter:Date 11-APR-2019
        public string PrintTemplateForPOIncrementCounter(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int poqty, int purchaseorderquantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, Dictionary<string, string> lobjDataExtension, string editDesc, string PrinterName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float fltpdfimgwidth = '0';
            float fltpdfimgheight = '0';
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;

            float? ImageHeight;
            float? ImageWidth;
            float? ImageNewWidth;
            int returnResult = 0;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            // string lstrupcamsg = string.Empty;
            double Num;
            int QrWidth = 0;
            string datasourcevalue = string.Empty;
            double? QrImaageWidth;
            double pintwidth = 0;
            //clsItemDetails objclsItemDetails = new clsItemDetails();
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            int dpi;
            int scaleX;
            int scaleY;
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);

            //objClsType = objclsItemDetails.GetType();
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }
                QBLC.clsPurchaseOrderLine objclsPoItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsPoItemDetails = new QBLC.clsPurchaseOrderLine();

                objClsType = objclsPoItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);
                // var doc = new Document(PageSize.A4, 0f, 0f, 0f, 0f);

                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                //var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                //pageBorderRect.Left += doc.LeftMargin;
                //pageBorderRect.Right -= doc.RightMargin;
                //pageBorderRect.Top -= doc.TopMargin;
                //pageBorderRect.Bottom += doc.BottomMargin;

                //cb.SetLineWidth(5f);
                //cb.SetColorStroke(BaseColor.BLACK);
                //cb.Rectangle(pageBorderRect.Left, pageBorderRect.Bottom, pageBorderRect.Width, pageBorderRect.Height);
                //cb.Stroke();

                //****Start **** code for Barcode
                int printquantity = 1;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    while (printquantity <= poqty) // #1
                    {
                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                        {

                            divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            divY = (Convert.ToSingle(DetailItem.yposition) / constval);
                            //divX = Convert.ToSingle(DetailItem.xposition);
                            //divY = Convert.ToSingle(DetailItem.yposition);
                            // fontSize = Convert.ToSingle(DetailItem.fontsize);
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                {
                                    //insert image to pdf at x,y location
                                    if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                }
                                else
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                    string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                    if ( File.Exists(Imagepath))
                                    {

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                        cb.AddImage(imageinsert);
                                    }
                                  

                                }
                            }
                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                    //bc.Size = fontSize;
                                    //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }

                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }
                                            }
                                        }

                                    }
                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                        }
                                        else
                                        {
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;

                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                    }
                                    else
                                    {
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }



                                    bc.StartStopText = false;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;

                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  // QR code print
                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                {
                                    string lstrqrcodetext = string.Empty;
                                    string lstrsubstringvalue = string.Empty;

                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        if (!string.IsNullOrWhiteSpace(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr1.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                    }
                                                    //concatinate string to print
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //custom field print
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }
                                                        //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        //{
                                                        //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        //    strPropertyValue = lstrPropertyValExt;
                                                        //}


                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                            }
                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }
                                            }
                                            lstrsubstringvalue = strPropertyValue.ToString();
                                        }
                                    }

                                    //for (int i = 0; i < objdatasource.Count; i++)
                                    //{

                                    //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    //    try
                                    //    {
                                    //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    //        {
                                    //            strPropertyValue = DetailItem.testdata.ToString();
                                    //        }
                                    //        else
                                    //        {
                                    //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                    //        }
                                    //    }
                                    //    catch (Exception ex)
                                    //    {
                                    //        //strPropertyValue = string.Empty;
                                    //        try
                                    //        {
                                    //            string lstrPropertyValExt = string.Empty;


                                    //            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }
                                    //            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }


                                    //        }
                                    //        catch (Exception exExt)
                                    //        {
                                    //            strPropertyValue = string.Empty;
                                    //        }
                                    //        finally
                                    //        {

                                    //        }


                                    //    }

                                    //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                    //    {
                                    //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                    //        if (isNum)
                                    //        {
                                    //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                    //        }
                                    //        else

                                    //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }

                                    //    else
                                    //    {
                                    //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }


                                    //}

                                    try
                                    {
                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                        {
                                            foreach (var itemdimension in objtemplatedetailslist)
                                            {
                                                if (itemdimension.barcodetype != null)
                                                {
                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                    {
                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                        // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                        // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                        break;
                                                    }
                                                }

                                            }

                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                            iTextSharp.text.Image img = qrcode.GetImage();

                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                } //code qr end

                                //data matrix start
                                //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                                //{
                                //    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();

                                //    bc.Options = (BarcodeDatamatrix.DM_AUTO);

                                //    //bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                //   // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                                //    for (int i = 0; i < objdatasource.Count; i++)
                                //    {

                                //        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //        try
                                //        {
                                //            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //            {
                                //                strPropertyValue = DetailItem.testdata.ToString();
                                //            }
                                //            else
                                //            {
                                //                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                //            }
                                //        }
                                //        catch (Exception ex)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //            try
                                //            {
                                //                string lstrPropertyValExt = string.Empty;

                                //                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                //                //{


                                //                //}
                                //                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                //                {
                                //                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                //                    strPropertyValue = lstrPropertyValExt;
                                //                }
                                //                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //                {
                                //                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                    strPropertyValue = lstrPropertyValExt;
                                //                }
                                //                else
                                //                {
                                //                    strPropertyValue = string.Empty;
                                //                }
                                //            }
                                //            catch (Exception exExt)
                                //            {
                                //                strPropertyValue = string.Empty;
                                //            }
                                //            finally
                                //            {

                                //            }


                                //        }
                                //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                //        {
                                //            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //            if (isNum)
                                //            {
                                //                try
                                //                {
                                //                    returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                //                }
                                //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                {
                                //                    returnResult = 1;
                                //                }

                                //            }
                                //            else
                                //            {
                                //                try
                                //                {
                                //                    returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                }
                                //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                {
                                //                    returnResult = 1;
                                //                }
                                //            }
                                //        }
                                //        else
                                //        {
                                //            try
                                //            {
                                //                returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //            }
                                //            catch (System.IndexOutOfRangeException exp)  // CS0168
                                //            {
                                //                returnResult = 1;
                                //            }
                                //        }


                                //    }

                                //    try
                                //    {
                                //        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                //        {
                                //            iTextSharp.text.Image img = null;
                                //            img = bc.CreateImage();
                                //            // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                //            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                //            img.SetAbsolutePosition(divX, divY);

                                //            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                //            cb.AddImage(img);

                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {

                                //    }

                                //}
                                //data matrix end
                                //upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {
                                    // if(ValidateChecksumDigit(DetailItem.testdata.Trim()))
                                    // {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    // bc.Size = fontSize;
                                    //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    // cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        //int lntchecksumdigit;
                                        ////Get UPC A code length
                                        //if (strPropertyValue.ToString().Trim().Length == 11)
                                        //{
                                        //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                        //    {

                                        //        strPropertyValue += lntchecksumdigit.ToString();
                                        //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        //        {
                                        //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        //            if (isNum)
                                        //            {
                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        //            }
                                        //            else
                                        //            {

                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //        }


                                        //    }
                                        //}
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            {
                                                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                                if (isNum)
                                                {
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                else
                                                {
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    // bc.Code = DetailItem.testdata;
                                                    // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }


                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                    //}
                                    //else
                                    //{
                                    //    lstrupcamsg = "Invalid Test Data for UPC A code";
                                    //}
                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();

                                    // bc.Size = fontSize;
                                    //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }



                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            else
                                            {
                                                // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            // cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;
                                    // bc.ChecksumText = true;
                                    // bc.GenerateChecksum = true;
                                    //bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {
                                cb.BeginText();
                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(bf, fontSize);
                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                cb.SetTextMatrix(divX, divY);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                                }
                                                else if (dsitem.ToString() == "PurchaseOrderLineDesc" && editDesc != null)
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = editDesc; //Convert.ToInt32(SalesOrderQuantity);

                                                }
                                                else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(poqty);
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }


                                                    // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                                    // {

                                                    //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                                    //{
                                                    //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                    //    strPropertyValue = lstrPropertyValExt;
                                                    //}
                                                    //else
                                                    //{
                                                    //    strPropertyValue = string.Empty;
                                                    //}
                                                    // }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }
                                            }

                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                            }
                                            else if (DetailItem.datasourcetext.ToString() == "PurchaseOrderLineDesc" && editDesc != null)
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = editDesc; //Convert.ToInt32(SalesOrderQuantity);

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToInt32(poqty);
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsPurchaseOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }


                                                // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                                // {

                                                //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                                //{
                                                //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                //    strPropertyValue = lstrPropertyValExt;
                                                //}
                                                //else
                                                //{
                                                //    strPropertyValue = string.Empty;
                                                //}
                                                // }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                    }



                                    //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                    //{
                                    //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                    //    if (isNum)
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //    else
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //}
                                    if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                    {
                                        wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                        //Phrase p = new Phrase(wraptext, FontFactory.GetFont(BaseFont.HELVETICA, BaseFont.CP1252, true, fontSize));
                                        //ColumnText ct = new ColumnText(cb);
                                        //ct.SetSimpleColumn(p, divX, divY, fltWidth, Convert.ToSingle(templateheaderwidth), 10, string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign));
                                        //ct.Go();

                                    }
                                    //for line break description by ;,
                                    //else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                    //{

                                    //    wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                    //    string[] stringSeparators = new string[] { "\r\n" };
                                    //    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                    //    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    //    {
                                    //        xplus = 0;
                                    //        yminus = 0;
                                    //        foreach (string splitline in lines)
                                    //        {
                                    //            //s.Replace("\n", "");

                                    //            if (!string.IsNullOrWhiteSpace(splitline))
                                    //            {
                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //            }
                                    //            xplus += 05;
                                    //            yminus += 08;

                                    //        }
                                    //    }
                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    //    {
                                    //        xplus = 0;
                                    //        yminus = 0;
                                    //        foreach (string splitline in lines)
                                    //        {
                                    //            if (!string.IsNullOrWhiteSpace(splitline))
                                    //            {
                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //            }
                                    //            xplus += 08;
                                    //            yminus += 06;

                                    //        }

                                    //    }
                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    //    {
                                    //        xplus = 0;
                                    //        yminus = 0;
                                    //        foreach (string splitline in lines)
                                    //        {
                                    //            if (!string.IsNullOrWhiteSpace(splitline))
                                    //            {
                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //            }
                                    //            xplus += 09;
                                    //            yminus += 00;

                                    //        }

                                    //    }
                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    //    {
                                    //        xplus = 0;
                                    //        yminus = 0;
                                    //        Array.Reverse(lines);
                                    //        foreach (string splitline in lines)
                                    //        {
                                    //            if (!string.IsNullOrWhiteSpace(splitline))
                                    //            {
                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //            }
                                    //            xplus += 00;
                                    //            yminus += 09;

                                    //        }

                                    //    }
                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    //    {
                                    //        xplus = 0;
                                    //        yminus = 0;
                                    //        //Array.Reverse(lines);
                                    //        foreach (string splitline in lines)
                                    //        {
                                    //            if (!string.IsNullOrWhiteSpace(splitline))
                                    //            {
                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                    //            }
                                    //            xplus += 10;
                                    //            yminus += 00;

                                    //        }

                                    //    }
                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    //    {
                                    //        xplus = 0;
                                    //        yminus = 0;
                                    //        foreach (string splitline in lines)
                                    //        {
                                    //            if (!string.IsNullOrWhiteSpace(splitline))
                                    //            {
                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //            }
                                    //            xplus += 07;
                                    //            yminus += 07;

                                    //        }
                                    //    }
                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    //    {
                                    //        xplus = 0;
                                    //        yminus = 0;
                                    //        foreach (string splitline in lines)
                                    //        {
                                    //            if (!string.IsNullOrWhiteSpace(splitline))
                                    //            {
                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                    //            }
                                    //            xplus += 00;
                                    //            yminus += 12;

                                    //        }
                                    //    }



                                    //}
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }

                                }

                                cb.EndText();

                            }//end text type
                        } //end of foreach
                        printquantity++; //#2
                                         //new page
                        if (poqty > 1)
                        {
                            doc.NewPage(); //#3
                        }


                    }// end of while //#4

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    //dpi = lobjQBConfiguration.GetLabelConfigSettings("dpi") !="" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("dpi")) : 0;
                    //scaleX = lobjQBConfiguration.GetLabelConfigSettings("scaleX") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleX")) : 0;
                    // scaleY = lobjQBConfiguration.GetLabelConfigSettings("scaleY") != "" ? Convert.ToInt32(lobjQBConfiguration.GetLabelConfigSettings("scaleY")) : 0;


                    // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight); //for test
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, PrinterName, "PO");

                    //Resize Images
                    //string udfimgdir = System.Windows.Forms.Application.StartupPath + @"\" + "UdfImages" + "\\" + Templatename + "\\";

                    //if (Directory.Exists(udfimgdir))
                    //{
                    //    System.GC.Collect();
                    //    System.GC.WaitForPendingFinalizers();
                    //    Directory.Delete(udfimgdir, true);
                    //}

                    //ResizeTemplateImages(Templatename, fltImgWidth, fltImgHeight);

                }

            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }



        //Print template for Invoice multipe(for UDF Label)
        public string PrintTemplateForInvoiceMultiple(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int IdenticalCopyofLabel, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, Dictionary<string, string> lobjDataExtension, string editDesc, string PrinterName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            int QrWidth = 0;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;

            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                QBLC.clsInvoiceLine objclsInvoiceItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsInvoiceItemDetails = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    QBHelper.WriteLog("P10" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Before pdf creation loop start" + objtemplatedetailslist.Count);
                    // while (printquantity < IdenticalCopyofLabel)
                    // {
                    foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                    {

                        divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                        divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup
                                                                                    // divX = Convert.ToSingle(DetailItem.xposition);
                                                                                    //divY = Convert.ToSingle(DetailItem.yposition);

                        fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                        //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                        //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                        ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                        ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                        ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                        if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                        {
                            if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                            {
                                //insert image to pdf at x,y location
                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                            {
                                Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            else
                            {
                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            }
                            else
                            {
                                try
                                {
                                    string lstrPropertyValExt = string.Empty;

                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    strPropertyValue = string.Empty;
                                }
                                string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                if ( File.Exists(Imagepath))
                                {

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                    cb.AddImage(imageinsert);
                                }
                              

                            }
                        }


                        else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                        {

                            if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                            {
                                iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;
                                                    //Commented on 22-APR-2019
                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;
                                                //Commented on 22-APR-2019
                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }

                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                    }


                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null) // if (datasourcevalue == "sales price")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {


                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                        }
                                        else
                                        {

                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {


                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                }
                                bc.StartStopText = false;

                                bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.ChecksumText = true;
                                bc.GenerateChecksum = true;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            } //code 128 end

                            else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                            {
                                string lstrqrcodetext = string.Empty;
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();



                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }

                                                //if(dsitem.ToString().ToLower().Trim()== "salesprice" && strPropertyValue != null)
                                                //{
                                                //    isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                                //    if (isNum)
                                                //    {
                                                //        lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                //    }
                                                //    else
                                                //    {

                                                //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                //    }
                                                //    strPropertyValue = lstrqrcodetext;

                                                //}

                                                //concatinate string to print
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }


                                            }
                                            catch (Exception ex)
                                            {
                                                //custom field print
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                        //concatinate string to print
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                    //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    //{
                                                    //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    //    strPropertyValue = lstrPropertyValExt;
                                                    //}


                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }

                                            }
                                        }
                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;
                                                //Commented on 22-APR-2019
                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }

                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        lstrsubstringvalue = strPropertyValue.ToString();
                                    }
                                }


                                //for (int i = 0; i < objdatasource.Count; i++)
                                //{


                                //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //    try
                                //    {
                                //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //        {
                                //            strPropertyValue = DetailItem.testdata.ToString();
                                //        }
                                //        else
                                //        {
                                //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {
                                //        //strPropertyValue = string.Empty;
                                //        try
                                //        {
                                //            string lstrPropertyValExt = string.Empty;


                                //            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                //            {
                                //                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                //                strPropertyValue = lstrPropertyValExt;
                                //            }
                                //            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //            {
                                //                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                strPropertyValue = lstrPropertyValExt;
                                //            }


                                //        }
                                //        catch (Exception exExt)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //        }
                                //        finally
                                //        {

                                //        }


                                //    }

                                //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                //    {
                                //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                //        if (isNum)
                                //        {
                                //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                //        }
                                //        else

                                //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }

                                //    else
                                //    {
                                //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }


                                //}

                                try
                                {
                                    if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                    {
                                        foreach (var itemdimension in objtemplatedetailslist)
                                        {
                                            if (itemdimension.barcodetype != null)
                                            {
                                                if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                {
                                                    pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                    QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                    QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                    // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                    // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                    break;
                                                }
                                            }

                                        }

                                        iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                        iTextSharp.text.Image img = qrcode.GetImage();

                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            } //code qr end

                            else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                            {

                                //Generate UPC-A barcode
                                BarcodeEAN bc = new BarcodeEAN();

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }
                                        else
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                            //{


                                            //}
                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }


                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    //Get checksum for 11 digit and append to existing digit
                                    //int lntchecksumdigit;
                                    ////Get UPC A code length
                                    //if (strPropertyValue.ToString().Trim().Length == 11)
                                    //{
                                    //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                    //    {

                                    //        strPropertyValue += lntchecksumdigit.ToString();
                                    //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                    //        {
                                    //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                    //            if (isNum)
                                    //            {
                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                    //            }
                                    //            else
                                    //            {

                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //            }
                                    //        }
                                    //        else
                                    //        {
                                    //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //        }


                                    //    }
                                    //}
                                    strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                    if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                    {

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        {
                                            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            if (isNum)
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {

                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }

                                }
                                bc.StartStopText = false;

                                bc.CodeType = Barcode.UPCA;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        bc.Size = fontSize;
                                        if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            }//end upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                            {
                                Barcode39 bc = new Barcode39();

                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }


                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }


                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }


                                    if (DetailItem.datasourcetext.ToLower() == "salesprice" & strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                } //for end

                                bc.StartStopText = false;


                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            }

                        }
                        else //Field Type is Text Field
                        {

                            cb.BeginText();
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            // cb.SetFontAndSize(bf, fontSize);

                            if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                            {
                                if (Convert.ToBoolean(DetailItem.fontbold))
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                }

                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            cb.SetTextMatrix(divX, divY);
                            string lstrsubstringvalue = string.Empty;
                            StringBuilder checkQuickBooksvalue = new StringBuilder();
                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (dsitem.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                            {
                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                int loopStatic = 0;
                                                foreach (var fieldVal in ddatasourceStatic)
                                                {
                                                    var Itemstatic = fieldVal.Split('∬');
                                                    if (Itemstatic.Length > 1)
                                                    {
                                                        if (loopStatic == staticVal)
                                                        {
                                                            strPropertyValue = Itemstatic[1];
                                                            staticVal = staticVal + 1;
                                                            break;
                                                        }
                                                        loopStatic = loopStatic + 1;
                                                    }

                                                }

                                            }
                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (dsitem.ToString() == "InvoiceLineDesc" && editDesc != null)
                                            {

                                                strPropertyValue = editDesc.ToString();

                                            }
                                            else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToString(IdenticalCopyofLabel);

                                            }
                                            else
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                QBHelper.WriteLog("Maping" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Property Field" + DetailItem.datasourcetext.ToString() + "==" + "Property Value" + strPropertyValue.ToString());
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                    QBHelper.WriteLog("Custom field datasourcetext" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Custom Field datasourcetext" + strPropertyValue.ToString());
                                                }
                                                else if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                    QBHelper.WriteLog("Custom field datasource" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Custom Field datasource" + strPropertyValue.ToString());
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }


                                                // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                                // {

                                                //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                                //{
                                                //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                //    strPropertyValue = lstrPropertyValExt;
                                                //}
                                                //else
                                                //{
                                                //    strPropertyValue = string.Empty;
                                                //}
                                                // }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }
                                        }

                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                        {
                                            checkQuickBooksvalue.Append(strPropertyValue);
                                            checkQuickBooksvalue.Append(chart);
                                        }
                                    }
                                    lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);
                                }
                                else
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToString() == "InvoiceLineDesc" && editDesc != null)
                                        {

                                            strPropertyValue = editDesc.ToString();

                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                        {
                                            strPropertyValue = Convert.ToInt32(IdenticalCopyofLabel);

                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }
                                        else
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            QBHelper.WriteLog("Maping" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Property Field" + DetailItem.datasourcetext.ToString() + "==" + "Property Value" + strPropertyValue.ToString());
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                                QBHelper.WriteLog("Custom field datasourcetext" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Custom Field datasourcetext" + strPropertyValue.ToString());
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                                QBHelper.WriteLog("Custom field datasource" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Custom Field datasource" + strPropertyValue.ToString());
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }


                                            // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                            // {

                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                            //{
                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            //    strPropertyValue = lstrPropertyValExt;
                                            //}
                                            //else
                                            //{
                                            //    strPropertyValue = string.Empty;
                                            //}
                                            // }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }
                                    }
                                    lstrsubstringvalue = strPropertyValue.ToString();
                                }

                                //if (lstrsubstringvalue.ToString().ToLower() == "salesprice")
                                //{
                                //    QBHelper.WriteLog("SP" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Before sales price get");
                                //    isNum = double.TryParse(lstrsubstringvalue.ToString(), out Num);
                                //    QBHelper.WriteLog("SP" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "After sales price get" + isNum);
                                //    if (isNum)
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(lstrsubstringvalue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //    else
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), lstrsubstringvalue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //}
                                if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && checkQuickBooksvalue != null)
                                {
                                    wraptext = WordWrap(lstrsubstringvalue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }


                                }

                                //for line break description by ;,% etc characters
                                //else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                //{

                                //    wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                //    string[] stringSeparators = new string[] { "\r\n" };
                                //    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                //    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            //s.Replace("\n", "");

                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 05;
                                //            yminus += 08;

                                //        }
                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 08;
                                //            yminus += 06;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 09;
                                //            yminus += 00;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        Array.Reverse(lines);
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 00;
                                //            yminus += 09;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        //Array.Reverse(lines);
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                //            }
                                //            xplus += 10;
                                //            yminus += 00;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 07;
                                //            yminus += 07;

                                //        }
                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                //            }
                                //            xplus += 00;
                                //            yminus += 12;

                                //        }
                                //    }



                                //}

                                else
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), lstrsubstringvalue != null ? lstrsubstringvalue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                }

                            }

                            cb.EndText();

                        }//end text type
                    } //end of foreach
                      // printquantity++;
                      //new page
                      // doc.NewPage();


                    //  }// end of while

                }
                QBHelper.WriteLog("WRE" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "PDF Writing Done");
                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    QBHelper.WriteLog("IMS" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Convert PDF to Image start");
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName);
                    QBHelper.WriteLog("IME" + "<==>" + "LabelConnector:Time:-" + DateTime.Now.ToString() + "Convert PDF to Image End");
                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }

        //Print template for Sales Order(for UDF Label)
        public string PrintTemplateForSalesOrderMultiple(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int SalesOrderQuantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrQtyContainerCheck, string pstrdecnumber, string qtypercontianerField, string pstrbarcodevalue, string pstrcarrier, Dictionary<string, string> lobjDataExtension, string editDesc, string PrinterName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';

            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            float? ImageNewWidth;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            string qtypercontainervalue = string.Empty;
            int returnResult = 0;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            int QrWidth = 0;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                QBLC.clsSalesOrderLine objclsSalesOrderItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsSalesOrderItemDetails = new QBLC.clsSalesOrderLine();

                objClsType = objclsSalesOrderItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    // while (printquantity < IdenticalCopyofLabel)
                    // {
                    foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                    {

                        divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                        divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 Popup

                        // divX = Convert.ToSingle(DetailItem.xposition);
                        //divY = Convert.ToSingle(DetailItem.yposition);
                        //fontSize = Convert.ToSingle(DetailItem.fontsize);
                        fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                        ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                        ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                        ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                        if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                        {
                            if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                            {
                                //insert image to pdf at x,y location
                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                            }
                            else
                            {
                                try
                                {
                                    string lstrPropertyValExt = string.Empty;

                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    strPropertyValue = string.Empty;
                                }
                                string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                if ( File.Exists(Imagepath))
                                {

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                    cb.AddImage(imageinsert);
                                }
                              
                            }

                        }


                        else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                        {

                            if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                            {
                                iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                bc.TextAlignment = Element.ALIGN_CENTER;

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString().ToLower() == "barcodevalue") //19-May-2020
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsSalesOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsSalesOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }

                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {


                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                        }
                                        else
                                        {

                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {


                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                }
                                bc.StartStopText = false;

                                bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.ChecksumText = true;
                                bc.GenerateChecksum = true;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        // cb.SetFontAndSize(bf, fontSize);
                                        if (fontSize == 0) //22-APR-2019
                                        {
                                            bc.Code = string.Empty;

                                        }
                                        else
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            bc.Baseline = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            } //code 128 end
                              //QR Code print
                            else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                            {
                                string lstrqrcodetext = string.Empty;
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();
                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr1.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                                //concatinate string to print
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                //custom field print
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                        //concatinate string to print
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                    //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    //{
                                                    //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    //    strPropertyValue = lstrPropertyValExt;
                                                    //}


                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }

                                            }
                                        }
                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsSalesOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        lstrsubstringvalue = strPropertyValue.ToString();
                                    }
                                }

                                //for (int i = 0; i < objdatasource.Count; i++)
                                //{

                                //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //    try
                                //    {
                                //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //        {
                                //            strPropertyValue = DetailItem.testdata.ToString();
                                //        }
                                //        else
                                //        {
                                //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {
                                //        //strPropertyValue = string.Empty;
                                //        try
                                //        {
                                //            string lstrPropertyValExt = string.Empty;


                                //            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                //            {
                                //                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                //                strPropertyValue = lstrPropertyValExt;
                                //            }
                                //            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //            {
                                //                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                strPropertyValue = lstrPropertyValExt;
                                //            }


                                //        }
                                //        catch (Exception exExt)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //        }
                                //        finally
                                //        {

                                //        }


                                //    }

                                //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                //    {
                                //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                //        if (isNum)
                                //        {
                                //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                //        }
                                //        else

                                //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }

                                //    else
                                //    {
                                //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                //    }


                                //}

                                try
                                {
                                    if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                    {
                                        foreach (var itemdimension in objtemplatedetailslist)
                                        {
                                            if (itemdimension.barcodetype != null)
                                            {
                                                if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                {

                                                    pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                    QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                    QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                    // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                    // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                    break;
                                                }
                                            }

                                        }

                                        iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                        iTextSharp.text.Image img = qrcode.GetImage();

                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            } //code qr end
                              //data matrix start
                              //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") 
                              // {
                              //     iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                              //     bc.Options = (BarcodeDatamatrix.DM_AUTO);

                            //    // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                            //    // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                            //     for (int i = 0; i < objdatasource.Count; i++)
                            //     {

                            //         PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                            //         try
                            //         {
                            //             if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                            //             {
                            //                 strPropertyValue = DetailItem.testdata.ToString();
                            //             }
                            //             else
                            //             {
                            //                 strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                            //             }
                            //         }
                            //         catch (Exception ex)
                            //         {
                            //             strPropertyValue = string.Empty;
                            //             try
                            //             {
                            //                 string lstrPropertyValExt = string.Empty;

                            //                 //foreach (QBLC.clsSalesOrderLine customfield in objdatasource) //Read item custom field value
                            //                 //{


                            //                 //}
                            //                 if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                            //                 {
                            //                     lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                            //                     strPropertyValue = lstrPropertyValExt;
                            //                 }
                            //                 else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                            //                 {
                            //                     lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                            //                     strPropertyValue = lstrPropertyValExt;
                            //                 }
                            //                 else
                            //                 {
                            //                     strPropertyValue = string.Empty;
                            //                 }
                            //             }
                            //             catch (Exception exExt)
                            //             {
                            //                 strPropertyValue = string.Empty;
                            //             }
                            //             finally
                            //             {

                            //             }


                            //         }
                            //         if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                            //         {
                            //             isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                            //             if (isNum)
                            //             {


                            //                 try
                            //                 {
                            //                     returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                            //                 }
                            //                 catch (System.IndexOutOfRangeException exp)  // CS0168
                            //                 {
                            //                     returnResult = 1;
                            //                 }

                            //             }
                            //             else
                            //             {

                            //                 try
                            //                 {
                            //                     returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                            //                 }
                            //                 catch (System.IndexOutOfRangeException exp)  // CS0168
                            //                 {
                            //                     returnResult = 1;
                            //                 }
                            //             }
                            //         }
                            //         else
                            //         {


                            //             try
                            //             {
                            //                 returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                            //             }
                            //             catch (System.IndexOutOfRangeException exp)  // CS0168
                            //             {
                            //                 returnResult = 1;
                            //             }
                            //         }

                            //     }

                            //     try
                            //     {
                            //         if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                            //         {
                            //             iTextSharp.text.Image img = null;
                            //             img = bc.CreateImage();
                            //             // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                            //             img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                            //             img.SetAbsolutePosition(divX, divY);

                            //             img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                            //             cb.AddImage(img);

                            //         }
                            //     }
                            //     catch (Exception ex)
                            //     {

                            //     }

                            // }

                            //data matarix end
                            //upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                            {

                                //Generate UPC-A barcode
                                BarcodeEAN bc = new BarcodeEAN();

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                        {
                                            strPropertyValue = pstrbarcodevalue;
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }
                                        else
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            //foreach (QBLC.clsSalesOrderLine customfield in objdatasource) //Read item custom field value
                                            //{


                                            //}
                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                    //int lntchecksumdigit;
                                    ////Get UPC A code length
                                    //if (strPropertyValue.ToString().Trim().Length == 11)
                                    //{
                                    //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                    //    {

                                    //        strPropertyValue += lntchecksumdigit.ToString();
                                    //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                    //        {
                                    //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                    //            if (isNum)
                                    //            {
                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                    //            }
                                    //            else
                                    //            {

                                    //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //            }
                                    //        }
                                    //        else
                                    //        {
                                    //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //        }


                                    //    }
                                    //}
                                    strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                    if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                    {

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        {
                                            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            if (isNum)
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {

                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }

                                }
                                bc.StartStopText = false;

                                bc.CodeType = Barcode.UPCA;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        //cb.SetFontAndSize(bf, fontSize);
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            }//end upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                            {
                                Barcode39 bc = new Barcode39();

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString().ToLower() == "barcodevalue") //19-May-2020
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsSalesOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsSalesOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }



                                    if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                } //for end

                                bc.StartStopText = false;


                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        //cb.SetFontAndSize(bf, fontSize);
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            }

                        }
                        else //Field Type is Text Field
                        {

                            cb.BeginText();
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            //cb.SetFontAndSize(bf, fontSize);
                            if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                            {
                                if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                }
                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            cb.SetTextMatrix(divX, divY);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            //add dcnumber and carrier field to print label
                                            if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                            {
                                                int printOutQty = 0;
                                                if (dsitem.ToString().ToLower() == "entryone")
                                                {

                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                                }
                                                else if (dsitem.ToString().ToLower() == "entrytwo")
                                                {
                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                                }
                                                //else if(DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                //{
                                                //    //print item 1 of N, 2 of N
                                                //    strPropertyValue = 1; //Convert.ToInt32(SalesOrderQuantity);

                                                //}
                                                //commented on 10-APR-2019
                                                //else if (DetailItem.datasourcetext.ToString().ToLower() == "containerqty")
                                                //{

                                                //    //provide Total print Qty to label:19-12-2016
                                                //    if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                                //    {
                                                //        lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
                                                //        //divide qty by unitpercase value and sent to print

                                                //        printOutQty = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(IdenticalCopyofLabel) / Convert.ToDouble(qtypercontainervalue)));

                                                //        strPropertyValue = Convert.ToInt32(printOutQty);


                                                //    }
                                                //}
                                                else if (dsitem.ToString().ToLower() == "barcodevalue")
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString() == "SalesOrderLineDesc" && editDesc != null)
                                                {
                                                    strPropertyValue = editDesc.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(SalesOrderQuantity);
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }


                                                // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                                // {

                                                //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                                //{
                                                //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                //    strPropertyValue = lstrPropertyValExt;
                                                //}
                                                //else
                                                //{
                                                //    strPropertyValue = string.Empty;
                                                //}
                                                // }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                        {
                                            checkQuickBooksvalue.Append(strPropertyValue);
                                            checkQuickBooksvalue.Append(chart);
                                        }
                                    }
                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                }
                                else
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        //add dcnumber and carrier field to print label
                                        if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                        {
                                            int printOutQty = 0;
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "entryone")
                                            {

                                                strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "entrytwo")
                                            {

                                                strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                            }
                                            //else if(DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            //{
                                            //    //print item 1 of N, 2 of N
                                            //    strPropertyValue = 1; //Convert.ToInt32(SalesOrderQuantity);

                                            //}
                                            //commented on 10-APR-2019
                                            //else if (DetailItem.datasourcetext.ToString().ToLower() == "containerqty")
                                            //{

                                            //    //provide Total print Qty to label:19-12-2016
                                            //    if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                            //    {
                                            //        lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
                                            //        //divide qty by unitpercase value and sent to print

                                            //        printOutQty = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(IdenticalCopyofLabel) / Convert.ToDouble(qtypercontainervalue)));

                                            //        strPropertyValue = Convert.ToInt32(printOutQty);


                                            //    }
                                            //}
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString() == "SalesOrderLineDesc" && editDesc != null)
                                            {
                                                strPropertyValue = editDesc.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToInt32(SalesOrderQuantity);
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }


                                            // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                            // {

                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                            //{
                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            //    strPropertyValue = lstrPropertyValExt;
                                            //}
                                            //else
                                            //{
                                            //    strPropertyValue = string.Empty;
                                            //}
                                            // }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                }



                                //if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                //{
                                //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //    if (isNum)
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //    else
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //}
                                if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null) //modify on 04-Apr-2019
                                {
                                    wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }


                                }
                                //for line break description by ;,
                                //else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                //{

                                //    wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                //    string[] stringSeparators = new string[] { "\r\n" };
                                //    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                //    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            //s.Replace("\n", "");

                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 05;
                                //            yminus += 08;

                                //        }
                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 08;
                                //            yminus += 06;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 09;
                                //            yminus += 00;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        Array.Reverse(lines);
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 00;
                                //            yminus += 09;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        //Array.Reverse(lines);
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                //            }
                                //            xplus += 10;
                                //            yminus += 00;

                                //        }

                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //            }
                                //            xplus += 07;
                                //            yminus += 07;

                                //        }
                                //    }
                                //    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                //    {
                                //        xplus = 0;
                                //        yminus = 0;
                                //        foreach (string splitline in lines)
                                //        {
                                //            if (!string.IsNullOrWhiteSpace(splitline))
                                //            {
                                //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                //            }
                                //            xplus += 00;
                                //            yminus += 12;

                                //        }
                                //    }



                                //}
                                else
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                }

                            }

                            cb.EndText();

                        }//end text type
                    } //end of foreach
                      // printquantity++;
                      //new page
                      // doc.NewPage();

                    //  }// end of while

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }

        //Print template for Sales Order IncrementCounter:Date 10-APR-2019
        public string PrintTemplateForSalesOrderIncrementCounter(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int SalesOrderQuantity, int SoQuantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrQtyContainerCheck, string pstrdecnumber, string qtypercontianerField, string pstrbarcodevalue, string pstrcarrier, Dictionary<string, string> lobjDataExtension, string editDesc, string printerName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int QrWidth = 0;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            string qtypercontainervalue = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();


            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                QBLC.clsSalesOrderLine objclsSalesOrderItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsSalesOrderItemDetails = new QBLC.clsSalesOrderLine();

                objClsType = objclsSalesOrderItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 1;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    while (printquantity <= SalesOrderQuantity)
                    {
                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                        {

                            divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                {
                                    //insert image to pdf at x,y location
                                    if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);


                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }

                                }
                                else
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                    string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                    if ( File.Exists(Imagepath))
                                    {

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                        cb.AddImage(imageinsert);
                                    }
                                  
                                }
                            }

                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "barcodevalue")
                                                    {
                                                        strPropertyValue = pstrbarcodevalue;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {


                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {


                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {

                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  // qrcode print
                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                {
                                    string lstrqrcodetext = string.Empty;
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr1.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "barcodevalue")
                                                    {
                                                        strPropertyValue = pstrbarcodevalue;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    }
                                                    //concatinate string to print
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //custom field print
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }



                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                            }
                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            lstrsubstringvalue = strPropertyValue.ToString();
                                        }
                                    }


                                    try
                                    {
                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                        {
                                            foreach (var itemdimension in objtemplatedetailslist)
                                            {
                                                if (itemdimension.barcodetype != null)
                                                {
                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                    {
                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel


                                                        break;
                                                    }
                                                }

                                            }

                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                            iTextSharp.text.Image img = qrcode.GetImage();

                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }
                                //data matarix end
                                //upc-a

                               

                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();


                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }

                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;


                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            {
                                                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                                if (isNum)
                                                {

                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {


                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //cb.SetFontAndSize(bf, fontSize);
                                            if (fontSize == 0 ||  Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();


                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }

                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "barcodevalue")
                                                    {
                                                        strPropertyValue = pstrbarcodevalue;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }

                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }


                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {

                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {

                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;


                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {

                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {

                                cb.BeginText();

                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                cb.SetTextMatrix(divX, divY);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                //add dcnumber and carrier field to print label
                                                if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                                {

                                                    if (dsitem.ToString().ToLower() == "entryone")
                                                    {

                                                        strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "entrytwo")
                                                    {

                                                        strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity;

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "SalesOrderLineDesc".ToLower() && editDesc != null)
                                                    {
                                                        strPropertyValue = editDesc.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                    {
                                                        strPropertyValue = Convert.ToInt32(SalesOrderQuantity);

                                                    }

                                                    else if (dsitem.ToString().ToLower() == "barcodevalue")
                                                    {
                                                        strPropertyValue = pstrbarcodevalue;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }



                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            //add dcnumber and carrier field to print label
                                            if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                            {

                                                if (DetailItem.datasourcetext.ToString().ToLower() == "entryone")
                                                {

                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "entrytwo")
                                                {

                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "SalesOrderLineDesc".ToLower() && editDesc != null)
                                                {
                                                    strPropertyValue = editDesc.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(SalesOrderQuantity);

                                                }

                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[i], null);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }


                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }

                                        }
                                    }


                                    //if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                    //{
                                    //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                    //    if (isNum)
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //    else
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //}
                                    if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null) //modify on 04-Apr-2019
                                    {
                                        wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {


                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }

                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                    }
                                    //for line break description by ;,
                                    else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                    {

                                        wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {


                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }

                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }



                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }

                                }

                                cb.EndText();

                            }//end text type
                        } //end of foreach
                        printquantity++;
                        //new page
                        if (SalesOrderQuantity > 1)
                        {
                            doc.NewPage();
                        }

                    }// end of while

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }
        public string PrintTemplateForSalesReceiptMultiple(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int SalesReceiptPrintQty, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrQtyContainerCheck, string pstrdecnumber, string qtypercontianerField, string pstrbarcodevalue, string pstrcarrier, Dictionary<string, string> lobjDataExtension, string editDesc, string PrinterName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';

            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            float? ImageNewWidth;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            string qtypercontainervalue = string.Empty;
            int returnResult = 0;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            int QrWidth = 0;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                clsSalesReceiptLineItems objclsSalesReceiptItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsSalesReceiptItemDetails = new clsSalesReceiptLineItems();

                objClsType = objclsSalesReceiptItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    // while (printquantity < IdenticalCopyofLabel)
                    // {
                    foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                    {

                        divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                        divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 Popup

                        // divX = Convert.ToSingle(DetailItem.xposition);
                        //divY = Convert.ToSingle(DetailItem.yposition);
                        //fontSize = Convert.ToSingle(DetailItem.fontsize);
                        fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                        ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                        ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                        ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                        if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                        {
                            if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                            {
                                //insert image to pdf at x,y location
                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                            {
                                Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            else
                            {
                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                //Resize image depend upon your need
                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                imageinsert.SetAbsolutePosition(divX, divY);
                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                cb.AddImage(imageinsert);
                            }
                            }
                            else
                            {
                                try
                                {
                                    string lstrPropertyValExt = string.Empty;

                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                    {
                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                        strPropertyValue = lstrPropertyValExt;
                                    }
                                    else
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                }
                                catch (Exception ex)
                                {
                                    strPropertyValue = string.Empty;
                                }
                                string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                if ( File.Exists(Imagepath))
                                {

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                    cb.AddImage(imageinsert);
                                }
                              
                            }
                        }

                        else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                        {

                            if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                            {
                                iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                bc.TextAlignment = Element.ALIGN_CENTER;

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString().ToLower() == "barcodevalue") //19-May-2020
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }

                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {


                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                        }
                                        else
                                        {

                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {


                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                }
                                bc.StartStopText = false;

                                bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                bc.ChecksumText = true;
                                bc.GenerateChecksum = true;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        // cb.SetFontAndSize(bf, fontSize);
                                        if (fontSize == 0) //22-APR-2019
                                        {
                                            bc.Code = string.Empty;

                                        }
                                        else
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            bc.Baseline = fontSize;
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            } //code 128 end
                              //QR Code print
                            else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                            {
                                string lstrqrcodetext = string.Empty;
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();
                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr1.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }

                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                                //concatinate string to print
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                //custom field print
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                        //concatinate string to print
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }


                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }

                                            }
                                        }
                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        lstrsubstringvalue = strPropertyValue.ToString();
                                    }
                                }

                                try
                                {
                                    if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                    {
                                        foreach (var itemdimension in objtemplatedetailslist)
                                        {
                                            if (itemdimension.barcodetype != null)
                                            {
                                                if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                {

                                                    pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                    QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                    QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                    // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                    // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                    break;
                                                }
                                            }

                                        }

                                        iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                        iTextSharp.text.Image img = qrcode.GetImage();

                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            }

                            //data matarix end
                            //upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                            {

                                //Generate UPC-A barcode
                                BarcodeEAN bc = new BarcodeEAN();

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }

                                        }
                                        else
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                        }

                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                    strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                    if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                    {

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        {
                                            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            if (isNum)
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {

                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }

                                }
                                bc.StartStopText = false;

                                bc.CodeType = Barcode.UPCA;
                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        //cb.SetFontAndSize(bf, fontSize);
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);
                                        // img.RotationDegrees = 360;
                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }

                            }//end upc-a
                            else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                            {
                                Barcode39 bc = new Barcode39();

                                //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                //cb.SetFontAndSize(bf, fontSize);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString().ToLower() == "barcodevalue") //19-May-2020
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;


                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue") //19-May-2020
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;


                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }


                                    if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    }

                                } //for end

                                bc.StartStopText = false;


                                bc.Extended = true;
                                try
                                {
                                    if (bc.Code != null && bc.Code != string.Empty)
                                    {
                                        //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        //cb.SetFontAndSize(bf, fontSize);
                                        if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                        {
                                            bc.Font = null;
                                        }
                                        else
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                            {
                                                bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                            }
                                            else
                                            {
                                                bc.Baseline = Convert.ToSingle(fontSize);
                                            }
                                            switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                            {
                                                case 0:
                                                    bc.TextAlignment = Element.ALIGN_LEFT;
                                                    break;
                                                case 1:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                                case 2:
                                                    bc.TextAlignment = Element.ALIGN_RIGHT;
                                                    break;
                                                default:
                                                    bc.TextAlignment = Element.ALIGN_CENTER;
                                                    break;
                                            }
                                        }
                                        bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                        iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                        img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                        img.SetAbsolutePosition(divX, divY);

                                        img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(img);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }


                            }

                        }
                        else //Field Type is Text Field
                        {

                            cb.BeginText();
                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                            //cb.SetFontAndSize(bf, fontSize);
                            if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                            {
                                if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                }

                            }
                            else
                            {
                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                            }
                            cb.SetTextMatrix(divX, divY);

                            for (int i = 0; i < objdatasource.Count; i++)
                            {
                                string lstrsubstringvalue = string.Empty;
                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                {
                                    dsdatasource = new List<string>();
                                    int staticVal = 0;
                                    string chart = DetailItem.delimiter;
                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                    dsdatasource = charArr.Split('~').ToList();
                                    foreach (var dsitem in dsdatasource)
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            //add dcnumber and carrier field to print label
                                            if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                            {
                                                int printOutQty = 0;
                                                if (dsitem.ToString().ToLower() == "entryone")
                                                {

                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                                }
                                                else if (dsitem.ToString().ToLower() == "entrytwo")
                                                {

                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                                }

                                                else if (dsitem.ToString().ToLower() == "barcodevalue")
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString() == "SalesReceiptLineDesc" && editDesc != null)
                                                {
                                                    strPropertyValue = editDesc.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(SalesReceiptPrintQty);
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }


                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }
                                        }
                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                        {
                                            checkQuickBooksvalue.Append(strPropertyValue);
                                            checkQuickBooksvalue.Append(chart);
                                        }
                                    }
                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                }
                                else
                                {
                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        //add dcnumber and carrier field to print label
                                        if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                        {
                                            int printOutQty = 0;
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "entryone")
                                            {

                                                strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "entrytwo")
                                            {

                                                strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                            }

                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                            {
                                                strPropertyValue = pstrbarcodevalue;
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString() == "SalesReceiptLineDesc" && editDesc != null)
                                            {
                                                strPropertyValue = editDesc.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToInt32(SalesReceiptPrintQty);
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }


                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }
                                }

                                //if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                //{
                                //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //    if (isNum)
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //    else
                                //    {
                                //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                //    }
                                //}
                                if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null) //modify on 04-Apr-2019
                                {
                                    wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                    string[] stringSeparators = new string[] { "\r\n" };
                                    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            //s.Replace("\n", "");

                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 05;
                                            yminus += 08;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 08;
                                            yminus += 06;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;
                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                    {
                                        xplus = -2;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 0;

                                            }
                                        }
                                        Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                    {
                                        xplus = 18;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                xplus = 18;
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valH;
                                                divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = 5;

                                            }
                                        }
                                        //Array.Reverse(lines);
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += Convert.ToInt32(DetailItem.fontsize);
                                            yminus += 00;

                                        }

                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 07;
                                            yminus += 07;

                                        }
                                    }
                                    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                    {
                                        xplus = 0;
                                        yminus = 0;
                                        if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                        {
                                            if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                            {
                                                LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                lobjLabelConnectorSettings.Show();
                                                lobjLabelConnectorSettings.Hide();
                                                string textHeight = lobjLabelConnectorSettings.valW;
                                                divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                lobjLabelConnectorSettings.Close();
                                                yminus = -3;

                                            }
                                        }
                                        foreach (string splitline in lines)
                                        {
                                            if (!string.IsNullOrWhiteSpace(splitline))
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            }
                                            xplus += 00;
                                            yminus += Convert.ToInt32(DetailItem.fontsize);

                                        }
                                    }


                                }

                                else
                                {
                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                }

                            }

                            cb.EndText();

                        }//end text type
                    } //end of foreach
                      // printquantity++;
                      //new page
                      // doc.NewPage();

                    //  }// end of while

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }
        public string PrintTemplateForSalesReceiptIncrementCounter(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int SalesReceiptQuantity, int SoQuantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrQtyContainerCheck, string pstrdecnumber, string qtypercontianerField, string pstrbarcodevalue, string pstrcarrier, Dictionary<string, string> lobjDataExtension, string editDesc, int prntlblqty, int printquantity, int QtyOnLabel, string ItemType, string printerName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int QrWidth = 0;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            string qtypercontainervalue = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                clsSalesReceiptLineItems objclsSalesReceiptItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsSalesReceiptItemDetails = new clsSalesReceiptLineItems();

                objClsType = objclsSalesReceiptItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                //int printquantity = 1;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    while (printquantity <= SalesReceiptQuantity)
                    {
                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                        {

                            divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup

                            // divX = Convert.ToSingle(DetailItem.xposition);
                            //divY = Convert.ToSingle(DetailItem.yposition);
                            //fontSize = Convert.ToSingle(DetailItem.fontsize);
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                {
                                    //insert image to pdf at x,y location
                                    if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                }
                                else
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                    string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                    if (File.Exists(Imagepath))
                                    {

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                        cb.AddImage(imageinsert);
                                    }
                                  
                                }
                            }

                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();


                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        if (ItemType != "Assembly")
                                                        {
                                                            strPropertyValue = "1";

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = printquantity.ToString();
                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                    {
                                                        strPropertyValue = Convert.ToInt32(prntlblqty);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                    {
                                                        strPropertyValue = QtyOnLabel;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            if (!string.IsNullOrWhiteSpace(checkQuickBooksvalue.ToString()))
                                            {
                                                strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);
                                            }


                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    if (ItemType != "Assembly")
                                                    {
                                                        strPropertyValue = "1";

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = printquantity.ToString();
                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(prntlblqty);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                {
                                                    strPropertyValue = QtyOnLabel;
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }


                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {


                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {


                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            // cb.SetFontAndSize(bf, fontSize);
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  // qrcode print
                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                {
                                    string lstrqrcodetext = string.Empty;
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr1.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        if (ItemType != "Assembly")
                                                        {
                                                            strPropertyValue = "1";

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = printquantity.ToString();
                                                        }

                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                    {
                                                        strPropertyValue = QtyOnLabel;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                    {
                                                        strPropertyValue = Convert.ToInt32(prntlblqty);
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    }
                                                    //concatinate string to print
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //custom field print
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }


                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                            }
                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    if (ItemType != "Assembly")
                                                    {
                                                        strPropertyValue = "1";

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = printquantity.ToString();
                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(prntlblqty);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                {
                                                    strPropertyValue = QtyOnLabel;
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            lstrsubstringvalue = strPropertyValue.ToString();
                                        }
                                    }


                                    try
                                    {
                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                        {
                                            foreach (var itemdimension in objtemplatedetailslist)
                                            {
                                                if (itemdimension.barcodetype != null)
                                                {
                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                    {
                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                        // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                        // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                        break;
                                                    }
                                                }

                                            }

                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                            iTextSharp.text.Image img = qrcode.GetImage();

                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                } //code qr end

                                //data matarix end
                                //upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }

                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                if (ItemType != "Assembly")
                                                {
                                                    strPropertyValue = "1";

                                                }
                                                else
                                                {
                                                    strPropertyValue = printquantity.ToString();
                                                }

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "QtyOnLabel".ToLower())
                                            {
                                                strPropertyValue = QtyOnLabel;
                                            }

                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToInt32(prntlblqty);
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }

                                            }
                                            else
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            {
                                                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                                if (isNum)
                                                {
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {

                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            cb.SetFontAndSize(bf, fontSize);
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                    {
                                                        strPropertyValue = QtyOnLabel;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        if (ItemType != "Assembly")
                                                        {
                                                            strPropertyValue = "1";

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = printquantity.ToString();
                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                {
                                                    strPropertyValue = QtyOnLabel;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    if (ItemType != "Assembly")
                                                    {
                                                        strPropertyValue = "1";

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = printquantity.ToString();
                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }




                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;


                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            // cb.SetFontAndSize(bf, fontSize);
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {

                                cb.BeginText();
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(bf, fontSize);
                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                cb.SetTextMatrix(divX, divY);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                //add dcnumber and carrier field to print label
                                                if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                                {
                                                    //int printOutQty = 0;
                                                    if (dsitem.ToString().ToLower() == "entryone")
                                                    {

                                                        strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "entrytwo")
                                                    {

                                                        strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        if (ItemType != "Assembly")
                                                        {
                                                            strPropertyValue = "1";

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = printquantity;
                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                    {
                                                        strPropertyValue = Convert.ToInt32(prntlblqty);
                                                        // strPropertyValue = Convert.ToInt32(SoQuantity);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "barcodevalue")
                                                    {
                                                        strPropertyValue = pstrbarcodevalue;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                    {
                                                        strPropertyValue = QtyOnLabel;
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }



                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);
                                    }
                                    else
                                    {
                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            //add dcnumber and carrier field to print label
                                            if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
                                            {
                                                //int printOutQty = 0;
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "entryone")
                                                {

                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "entrytwo")
                                                {

                                                    strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    if (ItemType != "Assembly")
                                                    {
                                                        strPropertyValue = "1";

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = printquantity;
                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(prntlblqty);
                                                    // strPropertyValue = Convert.ToInt32(SoQuantity);
                                                }
                                                //commented on 10-APR-2019
                                                //else if (DetailItem.datasourcetext.ToString().ToLower() == "containerqty")
                                                //{

                                                //    //provide Total print Qty to label:19-12-2016
                                                //    if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
                                                //    {
                                                //        lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
                                                //        //divide qty by unitpercase value and sent to print

                                                //        printOutQty = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(IdenticalCopyofLabel) / Convert.ToDouble(qtypercontainervalue)));

                                                //        strPropertyValue = Convert.ToInt32(printOutQty);


                                                //    }
                                                //}
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
                                                {
                                                    strPropertyValue = pstrbarcodevalue;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "QtyOnLabel".ToLower())
                                                {
                                                    strPropertyValue = QtyOnLabel;
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }



                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                    }


                                    //if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                    //{
                                    //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                    //    if (isNum)
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //    else
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //}
                                    if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null) //modify on 04-Apr-2019
                                    {
                                        wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                    }
                                    //for line break description by ;,
                                    else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                    {

                                        wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }



                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }

                                }

                                cb.EndText();

                            }//end text type
                        } //end of foreach
                        printquantity++;
                        //new page
                        if (SalesReceiptQuantity > 1)
                        {
                            doc.NewPage();
                        }

                    }// end of while

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight);
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return strfilename;

        }
        //public string PrintTemplateForSalesReceiptIncrementCounter(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int SalesReceiptQuantity, int SoQuantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrQtyContainerCheck, string pstrdecnumber, string qtypercontianerField, string pstrbarcodevalue, string pstrcarrier, Dictionary<string, string> lobjDataExtension, string editDesc)
        //{

        //    float fltWidth = '0';
        //    float fltHeight = '0';
        //    float fltImgWidth = '0';
        //    float fltImgHeight = '0';
        //    float? ImageNewWidth;
        //    float constval = (float)0.010416; ;//(float)0.014;
        //    float divX;
        //    float divY;
        //    float fontSize;
        //    float? ImageHeight;
        //    float? ImageWidth;
        //    string path = string.Empty;
        //    string strfilename = string.Empty;
        //    string wraptext = string.Empty;
        //    int QrWidth = 0;
        //    double Num;
        //    double pintwidth = 0;
        //    string datasourcevalue = string.Empty;
        //    string qtypercontainervalue = string.Empty;
        //    int returnResult = 0;
        //    double? QrImaageWidth;
        //    bool isNum;
        //    float xplus = '0';
        //    float yminus = '0';
        //    string strpdfImgStartupPath = string.Empty;
        //    string strpdfpath = string.Empty;
        //    List<string> dsdatasource = null;
        //    QBConfiguration lobjQBConfiguration = new QBConfiguration();
        //    //Type objClsType;
        //    //Delete pdf image file if exist

        //    // pdfImageDelete(Templatename);
        //    strpdfImgStartupPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff";
        //    strpdfpath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf";

        //    try
        //    {

        //        if (File.Exists(strpdfpath))
        //        {
        //            System.GC.Collect();
        //            System.GC.WaitForPendingFinalizers();
        //            File.Delete(strpdfpath);

        //        }
        //        if (File.Exists(strpdfImgStartupPath))
        //        {
        //            System.GC.Collect();
        //            System.GC.WaitForPendingFinalizers();
        //            File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
        //        }

        //        clsSalesReceiptLineItems objclsSalesReceiptItemDetails = null;
        //        Type objClsType;
        //        object strPropertyValue = null;

        //        objclsSalesReceiptItemDetails = new clsSalesReceiptLineItems();

        //        objClsType = objclsSalesReceiptItemDetails.GetType();

        //        path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf";


        //        if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"))
        //            Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint");

        //        fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

        //        fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


        //        var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


        //        PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

        //        doc.Open();

        //        PdfContentByte cb = writer.DirectContent;


        //        //****Start **** code for border
        //        var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

        //        pageBorderRect.Left += doc.LeftMargin;
        //        pageBorderRect.Right -= doc.RightMargin;
        //        pageBorderRect.Top -= doc.TopMargin;
        //        pageBorderRect.Bottom += doc.BottomMargin;


        //        //****Start **** code for Barcode
        //        int printquantity = 1;
        //        //Loop through Template Field Names
        //        if (objtemplatedetailslist.Count > 0)
        //        {
        //            while (printquantity <= SalesReceiptQuantity)
        //            {
        //                foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
        //                {

        //                    divX = (Convert.ToSingle(DetailItem.xposition) / constval);
        //                    divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup

        //                    // divX = Convert.ToSingle(DetailItem.xposition);
        //                    //divY = Convert.ToSingle(DetailItem.yposition);
        //                    //fontSize = Convert.ToSingle(DetailItem.fontsize);
        //                    fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
        //                    //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
        //                    //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
        //                    ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
        //                    ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
        //                    ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

        //                    if (DetailItem.fieldtype.ToLower().Trim() == "image") //image add to pdf
        //                    {
        //                        //insert image to pdf at x,y location
        //                        if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
        //                        {
        //                            Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

        //                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
        //                            //Resize image depend upon your need
        //                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

        //                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
        //                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
        //                            imageinsert.SetAbsolutePosition(divX, divY);
        //                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                            cb.AddImage(imageinsert);
        //                        }
        //                        else
        //                        {
        //                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png");
        //                            //Resize image depend upon your need
        //                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

        //                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
        //                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
        //                            imageinsert.SetAbsolutePosition(divX, divY);
        //                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                            cb.AddImage(imageinsert);
        //                        }
        //                    }

        //                    else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
        //                    {

        //                        if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
        //                        {
        //                            iTextSharp.text.pdf.Barcode128 bc = new Barcode128();


        //                            //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        //                            //cb.SetFontAndSize(bf, fontSize);

        //                            for (int i = 0; i < objdatasource.Count; i++)
        //                            {

        //                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                try
        //                                {
        //                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                    {
        //                                        strPropertyValue = DetailItem.testdata.ToString();
        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
        //                                    {
        //                                        //print item 1 of N, 2 of N
        //                                        strPropertyValue = printquantity.ToString();

        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
        //                                    {
        //                                        strPropertyValue = Convert.ToInt32(SalesReceiptQuantity);
        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
        //                                    {
        //                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
        //                                    }
        //                                    else
        //                                    {
        //                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    strPropertyValue = string.Empty;
        //                                    try
        //                                    {
        //                                        string lstrPropertyValExt = string.Empty;

        //                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
        //                                        {
        //                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
        //                                            strPropertyValue = lstrPropertyValExt;
        //                                        }
        //                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
        //                                        {
        //                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
        //                                            strPropertyValue = lstrPropertyValExt;
        //                                        }
        //                                        else
        //                                        {
        //                                            strPropertyValue = string.Empty;
        //                                        }
        //                                    }
        //                                    catch (Exception exExt)
        //                                    {
        //                                        strPropertyValue = string.Empty;
        //                                    }
        //                                    finally
        //                                    {

        //                                    }


        //                                }
        //                                if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
        //                                {
        //                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
        //                                    if (isNum)
        //                                    {


        //                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

        //                                    }
        //                                    else
        //                                    {

        //                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                    }
        //                                }
        //                                else
        //                                {


        //                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                }

        //                            }
        //                            bc.StartStopText = false;

        //                            bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
        //                            bc.ChecksumText = true;
        //                            bc.GenerateChecksum = true;
        //                            bc.Extended = true;
        //                            try
        //                            {
        //                                if (bc.Code != null && bc.Code != string.Empty)
        //                                {
        //                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                    // cb.SetFontAndSize(bf, fontSize);
        //                                    if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
        //                                    {
        //                                        bc.Font = null;
        //                                    }
        //                                    else
        //                                    {
        //                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                        bc.Size = fontSize;
        //                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
        //                                        {
        //                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
        //                                        }
        //                                        else
        //                                        {
        //                                            bc.Baseline = Convert.ToSingle(fontSize);
        //                                        }
        //                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
        //                                        {
        //                                            case 0:
        //                                                bc.TextAlignment = string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign);
        //                                                break;
        //                                            case 1:
        //                                                bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                break;
        //                                            case 2:
        //                                                bc.TextAlignment = Element.ALIGN_RIGHT;
        //                                                break;
        //                                            default:
        //                                                bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                break;
        //                                        }
        //                                    }
        //                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
        //                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
        //                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


        //                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
        //                                    img.SetAbsolutePosition(divX, divY);

        //                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                    cb.AddImage(img);
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {

        //                            }

        //                        } //code 128 end
        //                          // qrcode print
        //                        else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
        //                        {
        //                            string lstrqrcodetext = string.Empty;
        //                            string lstrsubstringvalue = string.Empty;
        //                            StringBuilder checkQuickBooksvalue = new StringBuilder();
        //                            for (int i = 0; i < objdatasource.Count; i++)
        //                            {
        //                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
        //                                {
        //                                    dsdatasource = new List<string>();
        //                                    char charArr = DetailItem.delimiter.ToCharArray()[0];
        //                                    dsdatasource = DetailItem.datasource.Split(charArr).ToList();
        //                                    foreach (var dsitem in dsdatasource)
        //                                    {
        //                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

        //                                        try
        //                                        {
        //                                            if (dsitem.ToString().ToLower() == "static")
        //                                            {
        //                                                strPropertyValue = DetailItem.testdata.ToString();
        //                                            }
        //                                            else if (dsitem.ToString().ToLower() == "timestamp")
        //                                            {
        //                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
        //                                            }
        //                                            else if (dsitem.ToString().ToLower() == "itemincrement")
        //                                            {
        //                                                //print item 1 of N, 2 of N
        //                                                strPropertyValue = printquantity.ToString();

        //                                            }
        //                                            else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
        //                                            {
        //                                                strPropertyValue = Convert.ToInt32(SalesReceiptQuantity);
        //                                            }
        //                                            else
        //                                            {
        //                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
        //                                            }
        //                                            //concatinate string to print
        //                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
        //                                            {
        //                                                checkQuickBooksvalue.Append(strPropertyValue);
        //                                                checkQuickBooksvalue.Append(charArr);
        //                                            }

        //                                        }
        //                                        catch (Exception ex)
        //                                        {
        //                                            //custom field print
        //                                            try
        //                                            {
        //                                                string lstrPropertyValExt = string.Empty;


        //                                                if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
        //                                                {
        //                                                    lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                    strPropertyValue = lstrPropertyValExt;
        //                                                    //concatinate string to print
        //                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
        //                                                    {
        //                                                        checkQuickBooksvalue.Append(strPropertyValue);
        //                                                        checkQuickBooksvalue.Append(charArr);
        //                                                    }
        //                                                }


        //                                            }
        //                                            catch (Exception exExt)
        //                                            {
        //                                                strPropertyValue = string.Empty;
        //                                            }
        //                                            finally
        //                                            {

        //                                            }

        //                                        }
        //                                    }
        //                                    lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - 1, 1);
        //                                }
        //                            }


        //                            try
        //                            {
        //                                if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
        //                                {
        //                                    foreach (var itemdimension in objtemplatedetailslist)
        //                                    {
        //                                        if (itemdimension.barcodetype != null)
        //                                        {
        //                                            if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
        //                                            {
        //                                                pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

        //                                                QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

        //                                                QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

        //                                                // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
        //                                                // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
        //                                                break;
        //                                            }
        //                                        }

        //                                    }

        //                                    iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

        //                                    iTextSharp.text.Image img = qrcode.GetImage();

        //                                    img.SetAbsolutePosition(divX, divY);

        //                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                    cb.AddImage(img);
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {

        //                            }


        //                        } //code qr end

        //                        //data matarix end
        //                        //upc-a
        //                        else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
        //                        {

        //                            //Generate UPC-A barcode
        //                            BarcodeEAN bc = new BarcodeEAN();

        //                            //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        //                            //cb.SetFontAndSize(bf, fontSize);

        //                            for (int i = 0; i < objdatasource.Count; i++)
        //                            {

        //                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                try
        //                                {
        //                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                    {
        //                                        strPropertyValue = DetailItem.testdata.ToString();
        //                                    }

        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
        //                                    {
        //                                        //print item 1 of N, 2 of N
        //                                        strPropertyValue = printquantity.ToString();

        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
        //                                    {
        //                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
        //                                    }

        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
        //                                    {
        //                                        strPropertyValue = Convert.ToInt32(SalesReceiptQuantity);
        //                                    }
        //                                    else
        //                                    {

        //                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
        //                                    }

        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    strPropertyValue = string.Empty;
        //                                    try
        //                                    {
        //                                        string lstrPropertyValExt = string.Empty;

        //                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
        //                                        {
        //                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
        //                                            strPropertyValue = lstrPropertyValExt;
        //                                        }
        //                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
        //                                        {
        //                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
        //                                            strPropertyValue = lstrPropertyValExt;
        //                                        }
        //                                        else
        //                                        {
        //                                            strPropertyValue = string.Empty;
        //                                        }
        //                                    }
        //                                    catch (Exception exExt)
        //                                    {
        //                                        strPropertyValue = string.Empty;
        //                                    }
        //                                    finally
        //                                    {

        //                                    }


        //                                }

        //                                if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)))
        //                                {

        //                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
        //                                    {
        //                                        isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
        //                                        if (isNum)
        //                                        {
        //                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
        //                                        }
        //                                        else
        //                                        {

        //                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
        //                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                    }
        //                                }

        //                            }
        //                            bc.StartStopText = false;

        //                            bc.CodeType = Barcode.UPCA;
        //                            bc.Extended = true;
        //                            try
        //                            {
        //                                if (bc.Code != null && bc.Code != string.Empty)
        //                                {
        //                                    BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                    cb.SetFontAndSize(bf, fontSize);
        //                                    if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
        //                                    {
        //                                        bc.Font = null;
        //                                    }
        //                                    else
        //                                    {
        //                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
        //                                        {
        //                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
        //                                        }
        //                                        else
        //                                        {
        //                                            bc.Baseline = Convert.ToSingle(fontSize);
        //                                        }
        //                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
        //                                        {
        //                                            case 0:
        //                                                bc.TextAlignment = Element.ALIGN_LEFT;
        //                                                break;
        //                                            case 1:
        //                                                bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                break;
        //                                            case 2:
        //                                                bc.TextAlignment = Element.ALIGN_RIGHT;
        //                                                break;
        //                                            default:
        //                                                bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                break;
        //                                        }
        //                                    }
        //                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
        //                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
        //                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


        //                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
        //                                    img.SetAbsolutePosition(divX, divY);
        //                                    // img.RotationDegrees = 360;
        //                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                    cb.AddImage(img);
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {

        //                            }

        //                        }//end upc-a
        //                        else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
        //                        {
        //                            Barcode39 bc = new Barcode39();

        //                            //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        //                            //cb.SetFontAndSize(bf, fontSize);

        //                            for (int i = 0; i < objdatasource.Count; i++)
        //                            {

        //                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                try
        //                                {
        //                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                    {
        //                                        strPropertyValue = DetailItem.testdata.ToString();
        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
        //                                    {
        //                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
        //                                    }

        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
        //                                    {
        //                                        //print item 1 of N, 2 of N
        //                                        strPropertyValue = printquantity.ToString();

        //                                    }
        //                                    else
        //                                    {
        //                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {
        //                                    strPropertyValue = string.Empty;
        //                                    try
        //                                    {
        //                                        string lstrPropertyValExt = string.Empty;

        //                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
        //                                        {
        //                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
        //                                            strPropertyValue = lstrPropertyValExt;
        //                                        }
        //                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
        //                                        {
        //                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
        //                                            strPropertyValue = lstrPropertyValExt;
        //                                        }
        //                                        else
        //                                        {
        //                                            strPropertyValue = string.Empty;
        //                                        }
        //                                    }
        //                                    catch (Exception exExt)
        //                                    {
        //                                        strPropertyValue = string.Empty;
        //                                    }
        //                                    finally
        //                                    {

        //                                    }


        //                                }

        //                                if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
        //                                {
        //                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
        //                                    if (isNum)
        //                                    {
        //                                        //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
        //                                    }
        //                                    else
        //                                    {
        //                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
        //                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                }

        //                            } //for end

        //                            bc.StartStopText = false;


        //                            bc.Extended = true;
        //                            try
        //                            {
        //                                if (bc.Code != null && bc.Code != string.Empty)
        //                                {
        //                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                    // cb.SetFontAndSize(bf, fontSize);
        //                                    if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
        //                                    {
        //                                        bc.Font = null;
        //                                    }
        //                                    else
        //                                    {
        //                                        bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                        bc.Size = fontSize;
        //                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
        //                                        {
        //                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
        //                                        }
        //                                        else
        //                                        {
        //                                            bc.Baseline = Convert.ToSingle(fontSize);
        //                                        }
        //                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
        //                                        {
        //                                            case 0:
        //                                                bc.TextAlignment = string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign);
        //                                                break;
        //                                            case 1:
        //                                                bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                break;
        //                                            case 2:
        //                                                bc.TextAlignment = Element.ALIGN_RIGHT;
        //                                                break;
        //                                            default:
        //                                                bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                break;
        //                                        }
        //                                    }
        //                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
        //                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
        //                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

        //                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
        //                                    img.SetAbsolutePosition(divX, divY);

        //                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                    cb.AddImage(img);
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {

        //                            }


        //                        }

        //                    }
        //                    else //Field Type is Text Field
        //                    {

        //                        cb.BeginText();
        //                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                        // cb.SetFontAndSize(bf, fontSize);
        //                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
        //                        cb.SetTextMatrix(divX, divY);

        //                        for (int i = 0; i < objdatasource.Count; i++)
        //                        {

        //                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                            try
        //                            {
        //                                //add dcnumber and carrier field to print label
        //                                if (pstrQtyContainerCheck == "1" || pstrQtyContainerCheck == "0")
        //                                {
        //                                    //int printOutQty = 0;
        //                                    if (DetailItem.datasourcetext.ToString().ToLower() == "entryone")
        //                                    {

        //                                        strPropertyValue = !string.IsNullOrWhiteSpace(pstrdecnumber) ? pstrdecnumber : null;
        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "entrytwo")
        //                                    {

        //                                        strPropertyValue = !string.IsNullOrWhiteSpace(pstrcarrier) ? pstrcarrier : null;
        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
        //                                    {
        //                                        //print item 1 of N, 2 of N
        //                                        strPropertyValue = printquantity; 

        //                                    }
        //                                    else if (DetailItem.ToString().ToLower() == "timestamp")
        //                                    {
        //                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
        //                                    {
        //                                        strPropertyValue = Convert.ToInt32(SalesReceiptQuantity);
        //                                        // strPropertyValue = Convert.ToInt32(SoQuantity);
        //                                    }
        //                                    //commented on 10-APR-2019
        //                                    //else if (DetailItem.datasourcetext.ToString().ToLower() == "containerqty")
        //                                    //{

        //                                    //    //provide Total print Qty to label:19-12-2016
        //                                    //    if (lobjDataExtension.ContainsKey(qtypercontianerField.Trim().ToUpper()))
        //                                    //    {
        //                                    //        lobjDataExtension.TryGetValue(qtypercontianerField.Trim().ToUpper(), out qtypercontainervalue);
        //                                    //        //divide qty by unitpercase value and sent to print

        //                                    //        printOutQty = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(IdenticalCopyofLabel) / Convert.ToDouble(qtypercontainervalue)));

        //                                    //        strPropertyValue = Convert.ToInt32(printOutQty);


        //                                    //    }
        //                                    //}
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "barcodevalue")
        //                                    {
        //                                        strPropertyValue = pstrbarcodevalue;
        //                                    }
        //                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                    {
        //                                        strPropertyValue = DetailItem.testdata.ToString();
        //                                    }else if (DetailItem.datasourcetext.ToString().ToLower() == "timestamp")
        //                                {
        //                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
        //                                }
        //                                    else
        //                                    {
        //                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[i], null);
        //                                    }
        //                                }
        //                            }
        //                            catch (Exception ex)
        //                            {
        //                                strPropertyValue = string.Empty;
        //                                try
        //                                {
        //                                    string lstrPropertyValExt = string.Empty;

        //                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
        //                                    {
        //                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
        //                                        strPropertyValue = lstrPropertyValExt;
        //                                    }
        //                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
        //                                    {
        //                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
        //                                        strPropertyValue = lstrPropertyValExt;
        //                                    }
        //                                    else
        //                                    {
        //                                        strPropertyValue = string.Empty;
        //                                    }



        //                                }
        //                                catch (Exception exExt)
        //                                {
        //                                    strPropertyValue = string.Empty;
        //                                }
        //                                finally
        //                                {

        //                                }


        //                            }

        //                            if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
        //                            {
        //                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
        //                                if (isNum)
        //                                {
        //                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                }
        //                                else
        //                                {
        //                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                }
        //                            }
        //                            else if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null) //modify on 04-Apr-2019
        //                            {
        //                                wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

        //                                string[] stringSeparators = new string[] { "\r\n" };
        //                                string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
        //                                if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        //s.Replace("\n", "");

        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 05;
        //                                        yminus += 08;

        //                                    }
        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 08;
        //                                        yminus += 06;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 09;
        //                                        yminus += 00;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 00;
        //                                        yminus += 09;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    // Array.Reverse(lines);
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 10;
        //                                        yminus += 00;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 07;
        //                                        yminus += 07;

        //                                    }
        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 00;
        //                                        yminus += 12;

        //                                    }
        //                                }


        //                            }
        //                            //for line break description by ;,
        //                            else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
        //                            {

        //                                wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

        //                                string[] stringSeparators = new string[] { "\r\n" };
        //                                string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

        //                                if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        //s.Replace("\n", "");

        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 05;
        //                                        yminus += 08;

        //                                    }
        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 08;
        //                                        yminus += 06;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 09;
        //                                        yminus += 00;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    Array.Reverse(lines);
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 00;
        //                                        yminus += 09;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    //Array.Reverse(lines);
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

        //                                        }
        //                                        xplus += 10;
        //                                        yminus += 00;

        //                                    }

        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        xplus += 07;
        //                                        yminus += 07;

        //                                    }
        //                                }
        //                                else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
        //                                {
        //                                    xplus = 0;
        //                                    yminus = 0;
        //                                    foreach (string splitline in lines)
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(splitline))
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


        //                                        }
        //                                        xplus += 00;
        //                                        yminus += 12;

        //                                    }
        //                                }



        //                            }
        //                            else
        //                            {
        //                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
        //                            }

        //                        }

        //                        cb.EndText();

        //                    }//end text type
        //                } //end of foreach
        //                printquantity++;
        //                //new page
        //                if (SalesReceiptQuantity > 1)
        //                {
        //                    doc.NewPage();
        //                }

        //            }// end of while

        //        }

        //        doc.Close();
        //        writer.Close();

        //        //convert pdf to image
        //        if (objtemplatedetailslist.Count > 0)
        //        {
        //            //convert inches to pixel
        //            fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

        //            fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

        //            // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight);
        //            ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight);

        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }

        //    return strfilename;

        //}
        //Print Packing Slip Label for Barcode Serial Numbers: 18-Jun-2020
        public string InvoiceLabelPackingSlipBarCodeSerialNumbers(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int InvoiceQuantity, int InvQuantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string[] arrserialNoPart, Dictionary<string, string> lobjDataExtension, string printerName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            int QrWidth = 0;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;

            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                QBLC.clsInvoiceLine objclsInvoiceItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsInvoiceItemDetails = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 1;
                int serialnoincrement = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    while (printquantity <= InvoiceQuantity)
                    {

                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                        {

                            divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            divY = (Convert.ToSingle(DetailItem.yposition) / constval);// B4 popup

                            // divX = Convert.ToSingle(DetailItem.xposition);
                            //divY = Convert.ToSingle(DetailItem.yposition);
                            //fontSize = Convert.ToSingle(DetailItem.fontsize);
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                //insert image to pdf at x,y location
                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                            }


                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialquantity")
                                                    {
                                                        strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialnumber1"
                                                        || dsitem.ToString().ToLower() == "serialnumber2"
                                                        || dsitem.ToString().ToLower() == "serialnumber3"
                                                        || dsitem.ToString().ToLower() == "serialnumber4"
                                                        || dsitem.ToString().ToLower() == "serialnumber5")
                                                    {
                                                        int incrcount = Convert.ToInt32(dsitem.ToString().Substring(dsitem.ToString().Length - 1));
                                                        int srnoincount = incrcount > 0 ? incrcount - 1 : 0;
                                                        if (arrserialNoPart.Length > 0)
                                                        {
                                                            if (arrserialNoPart.ElementAtOrDefault(Convert.ToInt32(srnoincount)) != null)
                                                            {
                                                                strPropertyValue = arrserialNoPart[Convert.ToInt32(srnoincount)].ToString();
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                                {
                                                    strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber1"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber2"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber3"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber4"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber5")
                                                {
                                                    int incrcount = Convert.ToInt32(DetailItem.datasourcetext.ToString().Substring(DetailItem.datasourcetext.ToString().Length - 1));
                                                    int srnoincount = incrcount > 0 ? incrcount - 1 : 0;
                                                    if (arrserialNoPart.Length > 0)
                                                    {
                                                        if (arrserialNoPart.ElementAtOrDefault(Convert.ToInt32(srnoincount)) != null)
                                                        {
                                                            strPropertyValue = arrserialNoPart[Convert.ToInt32(srnoincount)].ToString();
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }

                                        }


                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {


                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {


                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  //QR code print
                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                {
                                    string lstrqrcodetext = string.Empty;

                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr1.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                                    {
                                                        strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber1"
                                                        || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber2"
                                                        || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber3"
                                                        || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber4"
                                                        || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber5")
                                                    {
                                                        int incrcount = Convert.ToInt32(DetailItem.datasourcetext.ToString().Substring(DetailItem.datasourcetext.ToString().Length - 1));
                                                        int srnoincount = incrcount > 0 ? incrcount - 1 : 0;
                                                        if (arrserialNoPart.Length > 0)
                                                        {
                                                            if (arrserialNoPart.ElementAtOrDefault(Convert.ToInt32(srnoincount)) != null)
                                                            {
                                                                strPropertyValue = arrserialNoPart[Convert.ToInt32(srnoincount)].ToString();
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                    //concatinate string to print
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //custom field print
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }
                                                        //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        //{
                                                        //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        //    strPropertyValue = lstrPropertyValExt;
                                                        //}


                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                            }
                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                                {
                                                    strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber1"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber2"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber3"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber4"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber5")
                                                {
                                                    int incrcount = Convert.ToInt32(DetailItem.datasourcetext.ToString().Substring(DetailItem.datasourcetext.ToString().Length - 1));
                                                    int srnoincount = incrcount > 0 ? incrcount - 1 : 0;
                                                    if (arrserialNoPart.Length > 0)
                                                    {
                                                        if (arrserialNoPart.ElementAtOrDefault(Convert.ToInt32(srnoincount)) != null)
                                                        {
                                                            strPropertyValue = arrserialNoPart[Convert.ToInt32(srnoincount)].ToString();
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            lstrsubstringvalue = strPropertyValue.ToString();
                                        }
                                    }


                                    //for (int i = 0; i < objdatasource.Count; i++)
                                    //{

                                    //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    //    try
                                    //    {
                                    //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    //        {
                                    //            strPropertyValue = DetailItem.testdata.ToString();
                                    //        }
                                    //        else
                                    //        {
                                    //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                    //        }
                                    //    }
                                    //    catch (Exception ex)
                                    //    {
                                    //        //strPropertyValue = string.Empty;
                                    //        try
                                    //        {
                                    //            string lstrPropertyValExt = string.Empty;


                                    //            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }
                                    //            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }


                                    //        }
                                    //        catch (Exception exExt)
                                    //        {
                                    //            strPropertyValue = string.Empty;
                                    //        }
                                    //        finally
                                    //        {

                                    //        }


                                    //    }

                                    //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                    //    {
                                    //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                    //        if (isNum)
                                    //        {
                                    //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                    //        }
                                    //        else

                                    //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }

                                    //    else
                                    //    {
                                    //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }


                                    //}

                                    try
                                    {
                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                        {
                                            foreach (var itemdimension in objtemplatedetailslist)
                                            {
                                                if (itemdimension.barcodetype != null)
                                                {
                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                    {
                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                        // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                        // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                        break;
                                                    }
                                                }

                                            }

                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                            iTextSharp.text.Image img = qrcode.GetImage();

                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                } //code qr end
                                  //data matrix start
                                  //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix")
                                  //{
                                  //    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                                  //    bc.Options = (BarcodeDatamatrix.DM_AUTO);
                                  //   // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                  //  //  bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                                //    for (int i = 0; i < objdatasource.Count; i++)
                                //    {

                                //        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //        try
                                //        {
                                //            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //            {
                                //                strPropertyValue = DetailItem.testdata.ToString();
                                //            }
                                //            else
                                //            {
                                //                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                //            }
                                //        }
                                //        catch (Exception ex)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //            try
                                //            {
                                //                string lstrPropertyValExt = string.Empty;

                                //                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                //                    //{


                                //                    //}

                                //                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                //                    {
                                //                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                //                        strPropertyValue = lstrPropertyValExt;
                                //                    }
                                //                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //                    {
                                //                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                        strPropertyValue = lstrPropertyValExt;
                                //                    }
                                //                }
                                //            catch (Exception exExt)
                                //            {
                                //                strPropertyValue = string.Empty;
                                //            }
                                //            finally
                                //            {

                                //            }


                                //        }
                                //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null) // if (datasourcevalue == "sales price")
                                //        {
                                //            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //            if (isNum)
                                //            {

                                //                    try
                                //                    {
                                //                        returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                //                    }
                                //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                    {
                                //                        returnResult = 1;
                                //                    }

                                //                }
                                //            else
                                //            {

                                //                    try
                                //                    {
                                //                        returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                    }
                                //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                    {
                                //                        returnResult = 1;
                                //                    }
                                //                }
                                //        }
                                //        else
                                //        {


                                //                try
                                //                {
                                //                    returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                }
                                //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                {
                                //                    returnResult = 1;
                                //                }
                                //            }

                                //    }

                                //    try
                                //    {
                                //        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                //        {
                                //            iTextSharp.text.Image img = null;
                                //            img = bc.CreateImage();
                                //            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                //                // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                //            img.SetAbsolutePosition(divX, divY);

                                //            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                //            cb.AddImage(img);

                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {

                                //    }

                                //}
                                //data matrix end
                                //upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                            {
                                                strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber1"
                                                || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber2"
                                                || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber3"
                                                || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber4"
                                                || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber5")
                                            {
                                                int incrcount = Convert.ToInt32(DetailItem.datasourcetext.ToString().Substring(DetailItem.datasourcetext.ToString().Length - 1));
                                                int srnoincount = incrcount > 0 ? incrcount - 1 : 0;
                                                if (arrserialNoPart.Length > 0)
                                                {
                                                    if (arrserialNoPart.ElementAtOrDefault(Convert.ToInt32(srnoincount)) != null)
                                                    {
                                                        strPropertyValue = arrserialNoPart[Convert.ToInt32(srnoincount)].ToString();
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }

                                            }
                                            else
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        //int lntchecksumdigit;
                                        ////Get UPC A code length
                                        //if (strPropertyValue.ToString().Trim().Length == 11)
                                        //{
                                        //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                        //    {

                                        //        strPropertyValue += lntchecksumdigit.ToString();
                                        //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        //        {
                                        //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        //            if (isNum)
                                        //            {
                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        //            }
                                        //            else
                                        //            {

                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //        }


                                        //    }
                                        //}
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            {
                                                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                                if (isNum)
                                                {
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {

                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();

                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialquantity")
                                                    {
                                                        strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialnumber1"
                                                        || dsitem.ToString().ToLower() == "serialnumber2"
                                                        || dsitem.ToString().ToLower() == "serialnumber3"
                                                        || dsitem.ToString().ToLower() == "serialnumber4"
                                                        || dsitem.ToString().ToLower() == "serialnumber5")
                                                    {
                                                        int incrcount = Convert.ToInt32(dsitem.ToString().Substring(dsitem.ToString().Length - 1));
                                                        int srnoincount = incrcount > 0 ? incrcount - 1 : 0;
                                                        if (arrserialNoPart.Length > 0)
                                                        {
                                                            if (arrserialNoPart.ElementAtOrDefault(Convert.ToInt32(srnoincount)) != null)
                                                            {
                                                                strPropertyValue = arrserialNoPart[Convert.ToInt32(srnoincount)].ToString();
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                                {
                                                    strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber1"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber2"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber3"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber4"
                                                    || DetailItem.datasourcetext.ToString().ToLower() == "serialnumber5")
                                                {
                                                    int incrcount = Convert.ToInt32(DetailItem.datasourcetext.ToString().Substring(DetailItem.datasourcetext.ToString().Length - 1));
                                                    int srnoincount = incrcount > 0 ? incrcount - 1 : 0;
                                                    if (arrserialNoPart.Length > 0)
                                                    {
                                                        if (arrserialNoPart.ElementAtOrDefault(Convert.ToInt32(srnoincount)) != null)
                                                        {
                                                            strPropertyValue = arrserialNoPart[Convert.ToInt32(srnoincount)].ToString();
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }

                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }


                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" & strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;


                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {

                                cb.BeginText();
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(bf, fontSize);
                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                cb.SetTextMatrix(divX, divY);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                        {
                                            //print item 1 of N, 2 of N
                                            strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                        {
                                            strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber")
                                        {
                                            if (arrserialNoPart.Length > 0)
                                            {
                                                if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                {
                                                    strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }

                                            }

                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);

                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }

                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                    {
                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        if (isNum)
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                        else
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        }
                                    }
                                    else if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                    {
                                        wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                    }
                                    //for line break description by ;,
                                    else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                    {

                                        wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }



                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }

                                }

                                cb.EndText();

                            }//end text type
                        } //end of foreach
                          //printquantity++;
                          //serialnoincrement++;
                          //new page
                        if (printquantity < InvoiceQuantity)
                        {
                            doc.NewPage();
                        }
                        printquantity++;
                        serialnoincrement++;


                    }// end of while

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight);
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }

        //Print invoice with serial numbers:Date 16-Jun-2020
        public string PrintTemplateForInvoiceWithSerialNumbers(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int InvoiceQuantity, int InvQuantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string[] arrserialNoPart, Dictionary<string, string> lobjDataExtension, string editDesc, string printerName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            int QrWidth = 0;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;

            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                QBLC.clsInvoiceLine objclsInvoiceItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsInvoiceItemDetails = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 1;
                int serialnoincrement = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    while (printquantity <= InvoiceQuantity)
                    {

                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                        {

                            divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            divY = (Convert.ToSingle(DetailItem.yposition) / constval);// B4 popup

                            // divX = Convert.ToSingle(DetailItem.xposition);
                            //divY = Convert.ToSingle(DetailItem.yposition);
                            //fontSize = Convert.ToSingle(DetailItem.fontsize);
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                {
                                    //insert image to pdf at x,y location
                                    if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                    {
                                        Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                }
                                    else
                                    {
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                        string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                        if ( File.Exists(Imagepath))
                                        {

                                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                            imageinsert.SetAbsolutePosition(divX, divY);
                                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                            cb.AddImage(imageinsert);
                                        }
                                      

                                    }
                                }
                                else
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                    string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                    if ( File.Exists(Imagepath))
                                    {

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                        cb.AddImage(imageinsert);
                                    }
                                 

                                }
                            }


                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialquantity")
                                                    {
                                                        strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialnumber")
                                                    {
                                                        if (arrserialNoPart.Length > 0)
                                                        {
                                                            if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                            {
                                                                strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }

                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                                {
                                                    strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber")
                                                {
                                                    if (arrserialNoPart.Length > 0)
                                                    {
                                                        if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                        {
                                                            strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }


                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {


                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {


                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  //QR code print
                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                {
                                    string lstrqrcodetext = string.Empty;

                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr1.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                    //concatinate string to print
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //custom field print
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }
                                                        //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        //{
                                                        //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        //    strPropertyValue = lstrPropertyValExt;
                                                        //}


                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                            }
                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                                {
                                                    strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber")
                                                {
                                                    if (arrserialNoPart.Length > 0)
                                                    {
                                                        if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                        {
                                                            strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            lstrsubstringvalue = strPropertyValue.ToString();
                                        }
                                    }


                                    //for (int i = 0; i < objdatasource.Count; i++)
                                    //{

                                    //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    //    try
                                    //    {
                                    //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    //        {
                                    //            strPropertyValue = DetailItem.testdata.ToString();
                                    //        }
                                    //        else
                                    //        {
                                    //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                    //        }
                                    //    }
                                    //    catch (Exception ex)
                                    //    {
                                    //        //strPropertyValue = string.Empty;
                                    //        try
                                    //        {
                                    //            string lstrPropertyValExt = string.Empty;


                                    //            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }
                                    //            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }


                                    //        }
                                    //        catch (Exception exExt)
                                    //        {
                                    //            strPropertyValue = string.Empty;
                                    //        }
                                    //        finally
                                    //        {

                                    //        }


                                    //    }

                                    //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                    //    {
                                    //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                    //        if (isNum)
                                    //        {
                                    //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                    //        }
                                    //        else

                                    //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }

                                    //    else
                                    //    {
                                    //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }


                                    //}

                                    try
                                    {
                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                        {
                                            foreach (var itemdimension in objtemplatedetailslist)
                                            {
                                                if (itemdimension.barcodetype != null)
                                                {
                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                    {
                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                        // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                        // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                        break;
                                                    }
                                                }

                                            }

                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                            iTextSharp.text.Image img = qrcode.GetImage();

                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                } //code qr end
                                  //data matrix start
                                  //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix")
                                  //{
                                  //    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                                  //    bc.Options = (BarcodeDatamatrix.DM_AUTO);
                                  //   // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                  //  //  bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                                //    for (int i = 0; i < objdatasource.Count; i++)
                                //    {

                                //        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //        try
                                //        {
                                //            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //            {
                                //                strPropertyValue = DetailItem.testdata.ToString();
                                //            }
                                //            else
                                //            {
                                //                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                //            }
                                //        }
                                //        catch (Exception ex)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //            try
                                //            {
                                //                string lstrPropertyValExt = string.Empty;

                                //                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                //                    //{


                                //                    //}

                                //                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                //                    {
                                //                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                //                        strPropertyValue = lstrPropertyValExt;
                                //                    }
                                //                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //                    {
                                //                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                        strPropertyValue = lstrPropertyValExt;
                                //                    }
                                //                }
                                //            catch (Exception exExt)
                                //            {
                                //                strPropertyValue = string.Empty;
                                //            }
                                //            finally
                                //            {

                                //            }


                                //        }
                                //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null) // if (datasourcevalue == "sales price")
                                //        {
                                //            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //            if (isNum)
                                //            {

                                //                    try
                                //                    {
                                //                        returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                //                    }
                                //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                    {
                                //                        returnResult = 1;
                                //                    }

                                //                }
                                //            else
                                //            {

                                //                    try
                                //                    {
                                //                        returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                    }
                                //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                    {
                                //                        returnResult = 1;
                                //                    }
                                //                }
                                //        }
                                //        else
                                //        {


                                //                try
                                //                {
                                //                    returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                }
                                //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                {
                                //                    returnResult = 1;
                                //                }
                                //            }

                                //    }

                                //    try
                                //    {
                                //        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                //        {
                                //            iTextSharp.text.Image img = null;
                                //            img = bc.CreateImage();
                                //            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                //                // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                //            img.SetAbsolutePosition(divX, divY);

                                //            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                //            cb.AddImage(img);

                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {

                                //    }

                                //}
                                //data matrix end
                                //upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                            {
                                                strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber")
                                            {
                                                if (arrserialNoPart.Length > 0)
                                                {
                                                    if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                    {
                                                        strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }
                                            }
                                            else
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        //int lntchecksumdigit;
                                        ////Get UPC A code length
                                        //if (strPropertyValue.ToString().Trim().Length == 11)
                                        //{
                                        //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                        //    {

                                        //        strPropertyValue += lntchecksumdigit.ToString();
                                        //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        //        {
                                        //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        //            if (isNum)
                                        //            {
                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        //            }
                                        //            else
                                        //            {

                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //        }


                                        //    }
                                        //}
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            {
                                                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                                if (isNum)
                                                {
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {

                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();

                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialquantity")
                                                    {
                                                        strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "serialnumber")
                                                    {
                                                        if (arrserialNoPart.Length > 0)
                                                        {
                                                            if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                            {
                                                                strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                                {
                                                    strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber")
                                                {
                                                    if (arrserialNoPart.Length > 0)
                                                    {
                                                        if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                        {
                                                            strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }


                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" & strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;


                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {

                                cb.BeginText();
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(bf, fontSize);
                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold))
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                cb.SetTextMatrix(divX, divY);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {

                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString() == "InvoiceLineDesc" && editDesc != null)
                                                {

                                                    strPropertyValue = editDesc.ToString();

                                                }
                                                else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(InvoiceQuantity);
                                                }
                                                else if (dsitem.ToString().ToLower() == "serialquantity")
                                                {
                                                    strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                                }
                                                else if (dsitem.ToString().ToLower() == "serialnumber")
                                                {
                                                    if (arrserialNoPart.Length > 0)
                                                    {
                                                        if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                        {
                                                            strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);

                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    //  else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    // DetailItem.datasource.Trim()  ->notes by TamilRK passed the datasource insteant of datatext need to check.
                                                    else if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        // lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);


                                    }
                                    else
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString() == "InvoiceLineDesc" && editDesc != null)
                                            {

                                                strPropertyValue = editDesc.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToInt32(InvoiceQuantity);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "serialquantity")
                                            {
                                                strPropertyValue = "1";// Convert.ToInt32(InvoiceQuantity);

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "serialnumber")
                                            {
                                                if (arrserialNoPart.Length > 0)
                                                {
                                                    if (arrserialNoPart.ElementAtOrDefault(serialnoincrement) != null)
                                                    {
                                                        strPropertyValue = arrserialNoPart[serialnoincrement].ToString();
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);

                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }

                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }
                                        }
                                        lstrsubstringvalue = strPropertyValue.ToString();
                                    }

                                    //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                    //{
                                    //    isNum = double.TryParse(lstrsubstringvalue.ToString(), out Num);
                                    //    if (isNum)
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(lstrsubstringvalue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //    else
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), lstrsubstringvalue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //}
                                    if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && lstrsubstringvalue != null)
                                    {
                                        wraptext = WordWrap(lstrsubstringvalue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                    }
                                    //for line break description by ;,
                                    else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && lstrsubstringvalue != null)
                                    {

                                        wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(lstrsubstringvalue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }



                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), lstrsubstringvalue != null ? lstrsubstringvalue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }

                                }

                                cb.EndText();

                            }//end text type
                        } //end of foreach
                          //printquantity++;
                          //serialnoincrement++;
                          //new page
                        if (printquantity < InvoiceQuantity)
                        {
                            doc.NewPage();
                        }
                        printquantity++;
                        serialnoincrement++;


                    }// end of while

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight);
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }
        //print template for invoice ItemIncrementCounter:Date 11-APR-2019
        public string PrintTemplateForInvoiceIncrementCounter(string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, int InvoiceQuantity, int InvQuantity, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, Dictionary<string, string> lobjDataExtension, string editDesc, string printerName)
        {

            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; //(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            int QrWidth = 0;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;

            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            //Type objClsType;
            //Delete pdf image file if exist

            // pdfImageDelete(Templatename);
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            try
            {

                if (File.Exists(strpdfpath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfpath);

                }
                if (File.Exists(strpdfImgStartupPath))
                {
                    System.GC.Collect();
                    System.GC.WaitForPendingFinalizers();
                    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                }

                QBLC.clsInvoiceLine objclsInvoiceItemDetails = null;
                Type objClsType;
                object strPropertyValue = null;

                objclsInvoiceItemDetails = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 1;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {
                    while (printquantity <= InvoiceQuantity)
                    {
                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist)
                        {

                            divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            divY = (Convert.ToSingle(DetailItem.yposition) / constval);// B4 popup

                            // divX = Convert.ToSingle(DetailItem.xposition);
                            //divY = Convert.ToSingle(DetailItem.yposition);
                            //fontSize = Convert.ToSingle(DetailItem.fontsize);
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                {
                                    //insert image to pdf at x,y location
                                    if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                }
                                else
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                        {
                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                            strPropertyValue = lstrPropertyValExt;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                    string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                    if ( File.Exists(Imagepath))
                                    {

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                        cb.AddImage(imageinsert);
                                    }
                                   

                                }
                            }


                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {


                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {


                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  //QR code print
                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                {
                                    string lstrqrcodetext = string.Empty;

                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr1.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                    //concatinate string to print
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //custom field print
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;


                                                        if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }
                                                        //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        //{
                                                        //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        //    strPropertyValue = lstrPropertyValExt;
                                                        //}


                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                            }
                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            lstrsubstringvalue = strPropertyValue.ToString();
                                        }
                                    }


                                    //for (int i = 0; i < objdatasource.Count; i++)
                                    //{

                                    //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    //    try
                                    //    {
                                    //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    //        {
                                    //            strPropertyValue = DetailItem.testdata.ToString();
                                    //        }
                                    //        else
                                    //        {
                                    //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                    //        }
                                    //    }
                                    //    catch (Exception ex)
                                    //    {
                                    //        //strPropertyValue = string.Empty;
                                    //        try
                                    //        {
                                    //            string lstrPropertyValExt = string.Empty;


                                    //            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }
                                    //            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                    //            {
                                    //                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                    //                strPropertyValue = lstrPropertyValExt;
                                    //            }


                                    //        }
                                    //        catch (Exception exExt)
                                    //        {
                                    //            strPropertyValue = string.Empty;
                                    //        }
                                    //        finally
                                    //        {

                                    //        }


                                    //    }

                                    //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                    //    {
                                    //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                    //        if (isNum)
                                    //        {
                                    //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                    //        }
                                    //        else

                                    //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }

                                    //    else
                                    //    {
                                    //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }


                                    //}

                                    try
                                    {
                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                        {
                                            foreach (var itemdimension in objtemplatedetailslist)
                                            {
                                                if (itemdimension.barcodetype != null)
                                                {
                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                    {
                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                        // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                        // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                        break;
                                                    }
                                                }

                                            }

                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                            iTextSharp.text.Image img = qrcode.GetImage();

                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                } //code qr end
                                  //data matrix start
                                  //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix")
                                  //{
                                  //    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                                  //    bc.Options = (BarcodeDatamatrix.DM_AUTO);
                                  //   // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                  //  //  bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                                //    for (int i = 0; i < objdatasource.Count; i++)
                                //    {

                                //        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //        try
                                //        {
                                //            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //            {
                                //                strPropertyValue = DetailItem.testdata.ToString();
                                //            }
                                //            else
                                //            {
                                //                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                //            }
                                //        }
                                //        catch (Exception ex)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //            try
                                //            {
                                //                string lstrPropertyValExt = string.Empty;

                                //                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                //                    //{


                                //                    //}

                                //                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                //                    {
                                //                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                //                        strPropertyValue = lstrPropertyValExt;
                                //                    }
                                //                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                //                    {
                                //                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                //                        strPropertyValue = lstrPropertyValExt;
                                //                    }
                                //                }
                                //            catch (Exception exExt)
                                //            {
                                //                strPropertyValue = string.Empty;
                                //            }
                                //            finally
                                //            {

                                //            }


                                //        }
                                //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null) // if (datasourcevalue == "sales price")
                                //        {
                                //            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //            if (isNum)
                                //            {

                                //                    try
                                //                    {
                                //                        returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                //                    }
                                //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                    {
                                //                        returnResult = 1;
                                //                    }

                                //                }
                                //            else
                                //            {

                                //                    try
                                //                    {
                                //                        returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                    }
                                //                    catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                    {
                                //                        returnResult = 1;
                                //                    }
                                //                }
                                //        }
                                //        else
                                //        {


                                //                try
                                //                {
                                //                    returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                }
                                //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                {
                                //                    returnResult = 1;
                                //                }
                                //            }

                                //    }

                                //    try
                                //    {
                                //        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                //        {
                                //            iTextSharp.text.Image img = null;
                                //            img = bc.CreateImage();
                                //            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                //                // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                //            img.SetAbsolutePosition(divX, divY);

                                //            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                //            cb.AddImage(img);

                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {

                                //    }

                                //}
                                //data matrix end
                                //upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }
                                            }
                                            else
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                //{


                                                //}
                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        //int lntchecksumdigit;
                                        ////Get UPC A code length
                                        //if (strPropertyValue.ToString().Trim().Length == 11)
                                        //{
                                        //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                        //    {

                                        //        strPropertyValue += lntchecksumdigit.ToString();
                                        //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        //        {
                                        //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        //            if (isNum)
                                        //            {
                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        //            }
                                        //            else
                                        //            {

                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //        }


                                        //    }
                                        //}
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            {
                                                isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                                if (isNum)
                                                {
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {

                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();

                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int i = 0; i < objdatasource.Count; i++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                        //{


                                                        //}
                                                        if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    //foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read item custom field value
                                                    //{


                                                    //}
                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                        }


                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" & strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;


                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            //bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            //bc.Size = fontSize;
                                            //bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                        iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {

                                cb.BeginText();
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(bf, fontSize);
                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold))
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                cb.SetTextMatrix(divX, divY);

                                for (int i = 0; i < objdatasource.Count; i++)
                                {
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                    {
                                        dsdatasource = new List<string>();
                                        int staticVal = 0;
                                        string chart = DetailItem.delimiter;
                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                        dsdatasource = charArr.Split('~').ToList();
                                        foreach (var dsitem in dsdatasource)
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (dsitem.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                {
                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
                                                    int loopStatic = 0;
                                                    foreach (var fieldVal in ddatasourceStatic)
                                                    {
                                                        var Itemstatic = fieldVal.Split('∬');
                                                        if (Itemstatic.Length > 1)
                                                        {
                                                            if (loopStatic == staticVal)
                                                            {
                                                                strPropertyValue = Itemstatic[1];
                                                                staticVal = staticVal + 1;
                                                                break;
                                                            }
                                                            loopStatic = loopStatic + 1;
                                                        }

                                                    }

                                                }
                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (dsitem.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                                }
                                                else if (dsitem.ToString() == "InvoiceLineDesc" && editDesc != null)
                                                {

                                                    strPropertyValue = editDesc.ToString();

                                                }
                                                else if (dsitem.ToString().ToLower() == "PrintLblQty".ToLower())
                                                {
                                                    strPropertyValue = Convert.ToInt32(InvoiceQuantity);
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                            {
                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                checkQuickBooksvalue.Append(chart);
                                            }
                                        }
                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);


                                    }
                                    else
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity; //Convert.ToInt32(SalesOrderQuantity);

                                            }
                                            else if (DetailItem.datasourcetext.ToString() == "InvoiceLineDesc" && editDesc != null)
                                            {

                                                strPropertyValue = editDesc.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "PrintLblQty".ToLower())
                                            {
                                                strPropertyValue = Convert.ToInt32(InvoiceQuantity);
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[i], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }


                                                // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                                // {

                                                //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                                //{
                                                //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                //    strPropertyValue = lstrPropertyValExt;
                                                //}
                                                //else
                                                //{
                                                //    strPropertyValue = string.Empty;
                                                //}
                                                // }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }
                                        }
                                        lstrsubstringvalue = strPropertyValue.ToString();
                                    }

                                    //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                    //{
                                    //    isNum = double.TryParse(lstrsubstringvalue.ToString(), out Num);
                                    //    if (isNum)
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(lstrsubstringvalue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //    else
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), lstrsubstringvalue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //}
                                    if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && lstrsubstringvalue != null)
                                    {
                                        wraptext = WordWrap(lstrsubstringvalue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                    }
                                    //for line break description by ;,
                                    else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && lstrsubstringvalue != null)
                                    {

                                        wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(lstrsubstringvalue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }



                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), lstrsubstringvalue != null ? lstrsubstringvalue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                    }

                                }

                                cb.EndText();

                            }//end text type
                        } //end of foreach
                        printquantity++;
                        //new page
                        if (InvoiceQuantity > 1)
                        {
                            doc.NewPage();
                        }


                    }// end of while

                }

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight);
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                }
            }
            catch (Exception ex)
            {

            }

            return strfilename;

        }


        //Print Invoice Date Range (for UDF Label)
        internal string GetInvUDFFilterOrders(string Invsearchno, ArrayList arrinvoicelist, ArrayList selitemlist, string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrprintername, string pstrroutenolabel, string pstrootnumber, ArrayList arritemlisttoprint, List<QBLC.clsInvoice> lobjDataExtension, string printerName)
        {
            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            string datasourcevalue = string.Empty;
            string filePath = string.Empty;
            bool isNum;
            double pintwidth = 0;
            int QrWidth = 0;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strtiffimagepath = string.Empty;
            string strpdfpath = string.Empty;
            string searchitem = string.Empty;
            List<QBLC.clsInvoice> lobjcustomfieldtoprint = null;
            List<QBLC.clsInvoice> lobjcustDataExtPrint = null;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            List<QBLC.clsInvoiceLine> filterinv = null;
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            // strtiffimagepath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + Templatename + "\\";
            //foreach (QBLC.clsInvoiceLine inv in objdatasource)
            //{

            //    filterinv = new List<QBLC.clsInvoiceLine>();
            //    if (inv.RefNumber.Trim() == Invsearchno.Trim())
            //    {

            if (File.Exists(strpdfpath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfpath);

            }
            //if (File.Exists(strpdfImgStartupPath))
            //{
            //    System.GC.Collect();
            //    System.GC.WaitForPendingFinalizers();
            //    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
            //}


            //string[] files = Directory.GetFiles(strtiffimagepath);
            //if (files.Length > 0)
            //{
            //    System.GC.Collect();
            //    System.GC.WaitForPendingFinalizers();
            //    foreach (string file in files)
            //    {
            //        File.Delete(file);
            //    }
            //}


            QBLC.clsInvoiceLine objclsInvoiceLine = null;

            object strPropertyValue = null;
            Type objClsType;

            try
            {

                // filterinv.Add(inv);

                //printing logic start

                objclsInvoiceLine = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceLine.GetType();

                //print pdf
                //  try
                //  {
                QBHelper.WriteLog("Step7: before loop");
                QBLC.clsInvoiceLine objclsInvoiceItemDetails = null;

                objclsInvoiceItemDetails = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 0;
                //int itemquantiycount = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {

                    // foreach (var invlist in arrinvoicelist)
                    // {

                    //lobjcustDataExtPrint = new List<QBLC.clsInvoiceLine.Itemcustomfields>();

                    //var lineItem = from QBLC.clsInvoiceLine objinvitem in objdatasource
                    //               where objinvitem.RefNumber == invlist.ToString().Trim()
                    //               select objinvitem;

                    // lobjcustDataExtPrint = lobjDataExtension.Where(p => p.CustItemRefNumber == invlist.ToString().Trim()).ToList();
                    QBHelper.WriteLog("Step8: Get items for selected order");

                    //  foreach (QBLC.clsInvoice inv in objdatasource)
                    // {
                    // foreach (QBLC.clsInvoiceLine lineitem in inv.LineItemList) //arritemlisttoprint
                    foreach (QBLC.clsInvoiceLine lineitem in arritemlisttoprint)
                    {

                        filterinv = new List<QBLC.clsInvoiceLine>();

                        filterinv.Clear();

                        filterinv.Add(lineitem);
                        //filter custom field item wise
                        if (lobjDataExtension.Count > 0)
                        {
                            for (int z = 0; z < filterinv.Count; z++)
                            {
                                lobjcustomfieldtoprint = new List<QBLC.clsInvoice>();
                                lobjcustomfieldtoprint = lobjDataExtension.Where(p => p.CustItemRefFullName == filterinv[z].InvoiceItemName.ToString() && p.Itemdesc == filterinv[z].InvoiceLineDesc && p.CustItemRefNumber == filterinv[z].RefNumber.ToString()).ToList();
                            }
                        }


                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist) //btformat field
                        {
                            QBHelper.WriteLog("Step9: In for each getting dimensions start");
                            //divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                            // divY = (Convert.ToSingle(DetailItem.yposition) / constval);
                            divX = Convert.ToSingle(DetailItem.xposition);
                            divY = Convert.ToSingle(DetailItem.yposition);
                            //fontSize = Convert.ToSingle(DetailItem.fontsize);
                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;
                            QBHelper.WriteLog("Step:10 getting dimenstions end");
                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                            {
                                if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                {
                                    //insert image to pdf at x,y location
                                    if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                {
                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                else
                                {
                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                    //Resize image depend upon your need
                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                    imageinsert.SetAbsolutePosition(divX, divY);
                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    cb.AddImage(imageinsert);
                                }
                                }
                                else
                                {
                                    try
                                    {
                                        string lstrPropertyValExt = string.Empty;

                                        if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                        {
                                            var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                            strPropertyValue = custfieldvalue;
                                        }
                                        else
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                    }
                                    string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                    string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                    if ( File.Exists(Imagepath))
                                    {

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                        cb.AddImage(imageinsert);
                                    }
                                 
                                }

                            }

                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                            {

                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                {
                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                    //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    //cb.SetFontAndSize(bf, fontSize);

                                    for (int k = 0; k < filterinv.Count; k++)
                                    {
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {

                                                            var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                            strPropertyValue = custfieldvalue;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {

                                                        var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                        strPropertyValue = custfieldvalue;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }

                                        }

                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {


                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {


                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                    bc.ChecksumText = true;
                                    bc.GenerateChecksum = true;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            // bc.Size = fontSize;
                                            // bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                } //code 128 end
                                  //QR code print
                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                {
                                    string lstrqrcodetext = string.Empty;
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
                                    for (int k = 0; k < filterinv.Count; k++)
                                    {
                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr1.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "timestamp")
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                    //concatinate string to print
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    //custom field print
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == dsitem.ToString().Trim().ToUpper()))
                                                        {

                                                            var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == dsitem.ToString().Trim().ToUpper()).CustItemkeyvalue;
                                                            strPropertyValue = custfieldvalue;
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }


                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                            }
                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {
                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {

                                                        var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                        strPropertyValue = custfieldvalue;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }
                                            lstrsubstringvalue = strPropertyValue.ToString();
                                        }
                                    }



                                    //for (int k = 0; k < filterinv.Count; k++)
                                    //{

                                    //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    //    try
                                    //    {
                                    //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    //        {
                                    //            strPropertyValue = DetailItem.testdata.ToString();
                                    //        }
                                    //        else
                                    //        {
                                    //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                    //        }
                                    //    }
                                    //    catch (Exception ex)
                                    //    {
                                    //        //strPropertyValue = string.Empty;
                                    //        try
                                    //        {
                                    //            string lstrPropertyValExt = string.Empty;
                                    //            if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                    //            {

                                    //                var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                    //                strPropertyValue = custfieldvalue;
                                    //            }
                                    //            else
                                    //            {
                                    //                strPropertyValue = string.Empty;
                                    //            }


                                    //        }
                                    //        catch (Exception exExt)
                                    //        {
                                    //            strPropertyValue = string.Empty;
                                    //        }
                                    //        finally
                                    //        {

                                    //        }


                                    //    }

                                    //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                    //    {
                                    //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                    //        if (isNum)
                                    //        {
                                    //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                    //        }
                                    //        else

                                    //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }

                                    //    else
                                    //    {
                                    //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                    //    }


                                    //}

                                    try
                                    {
                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                        {
                                            foreach (var itemdimension in objtemplatedetailslist)
                                            {
                                                if (itemdimension.barcodetype != null)
                                                {
                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                    {
                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                        // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                        // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                        break;
                                                    }
                                                }

                                            }

                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                            iTextSharp.text.Image img = qrcode.GetImage();

                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                } //code qr end

                                //data matrix start
                                //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                                //{
                                //    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                                //    bc.Options = (BarcodeDatamatrix.DM_AUTO);
                                //    // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                //    // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                                //    for (int k = 0; k < filterinv.Count; k++)
                                //    {

                                //        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                //        try
                                //        {
                                //            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                //            {
                                //                strPropertyValue = DetailItem.testdata.ToString();
                                //            }
                                //            else
                                //            {
                                //                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                //            }
                                //        }
                                //        catch (Exception ex)
                                //        {
                                //            strPropertyValue = string.Empty;
                                //            try
                                //            {
                                //                string lstrPropertyValExt = string.Empty;

                                //                //foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
                                //                //{


                                //                //}

                                //                if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                //                {

                                //                    var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                //                    strPropertyValue = custfieldvalue;
                                //                }
                                //                else
                                //                {
                                //                    strPropertyValue = string.Empty;
                                //                }


                                //            }
                                //            catch (Exception exExt)
                                //            {
                                //                strPropertyValue = string.Empty;
                                //            }
                                //            finally
                                //            {

                                //            }


                                //        }
                                //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                //        {
                                //            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                //            if (isNum)
                                //            {


                                //                try
                                //                {
                                //                    returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                //                }
                                //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                {
                                //                    returnResult = 1;
                                //                }

                                //            }
                                //            else
                                //            {

                                //                try
                                //                {
                                //                    returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //                }
                                //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                //                {
                                //                    returnResult = 1;
                                //                }
                                //            }
                                //        }
                                //        else
                                //        {

                                //            try
                                //            {
                                //                returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                //            }
                                //            catch (System.IndexOutOfRangeException exp)  // CS0168
                                //            {
                                //                returnResult = 1;
                                //            }
                                //        }

                                //    }

                                //    try
                                //    {
                                //        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                //        {
                                //            iTextSharp.text.Image img = null;
                                //            img = bc.CreateImage();
                                //            // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                //            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                //            img.SetAbsolutePosition(divX, divY);

                                //            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                //            cb.AddImage(img);

                                //        }
                                //    }
                                //    catch (Exception ex)
                                //    {

                                //    }

                                //}
                                //data matrix end
                                //upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                {

                                    //Generate UPC-A barcode
                                    BarcodeEAN bc = new BarcodeEAN();

                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    // cb.SetFontAndSize(bf, fontSize);

                                    for (int k = 0; k < filterinv.Count; k++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }
                                            }
                                            else
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;
                                                if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                {

                                                    var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                    strPropertyValue = custfieldvalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }

                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }
                                        //int lntchecksumdigit;
                                        ////Get UPC A code length
                                        //if (strPropertyValue.ToString().Trim().Length == 11)
                                        //{
                                        //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                        //    {

                                        //        strPropertyValue += lntchecksumdigit.ToString();
                                        //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                        //        {
                                        //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                        //            if (isNum)
                                        //            {
                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                        //            }
                                        //            else
                                        //            {

                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //        }


                                        //    }
                                        //}
                                        strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                        {

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null)
                                            {
                                                isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                                if (isNum)
                                                {

                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {


                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {

                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }

                                    }
                                    bc.StartStopText = false;

                                    bc.CodeType = Barcode.UPCA;
                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            bc.Size = fontSize;
                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);
                                            // img.RotationDegrees = 360;
                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                }//end upc-a
                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                {
                                    Barcode39 bc = new Barcode39();

                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                    // cb.SetFontAndSize(bf, fontSize);

                                    for (int k = 0; k < filterinv.Count; k++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                {

                                                    var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                    strPropertyValue = custfieldvalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                        {
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }
                                        }
                                        else
                                        {
                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        }

                                    } //for end

                                    bc.StartStopText = false;


                                    bc.Extended = true;
                                    try
                                    {
                                        if (bc.Code != null && bc.Code != string.Empty)
                                        {
                                            // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                            // bc.Size = fontSize;
                                            // bc.Baseline = fontSize;
                                            if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                            {
                                                bc.Font = null;
                                            }
                                            else
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                {
                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                }
                                                else
                                                {
                                                    bc.Baseline = Convert.ToSingle(fontSize);
                                                }
                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                {
                                                    case 0:
                                                        bc.TextAlignment = Element.ALIGN_LEFT;
                                                        break;
                                                    case 1:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                    case 2:
                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
                                                        break;
                                                    default:
                                                        bc.TextAlignment = Element.ALIGN_CENTER;
                                                        break;
                                                }
                                            }
                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                            img.SetAbsolutePosition(divX, divY);

                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(img);
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }


                                }

                            }
                            else //Field Type is Text Field
                            {
                                QBHelper.WriteLog("Step11: Text printing start..");
                                cb.BeginText();
                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                // cb.SetFontAndSize(bf, fontSize);
                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                {
                                    if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                    }

                                }
                                else
                                {
                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                }
                                cb.SetTextMatrix(divX, divY);

                                for (int k = 0; k < filterinv.Count; k++)
                                {

                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    try
                                    {
                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        {
                                            strPropertyValue = DetailItem.testdata.ToString();
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                        }
                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                        {
                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                        }
                                        else if (DetailItem.datasourcetext.ToString().Replace(" ", string.Empty).ToLower() == pstrroutenolabel.Replace(" ", string.Empty).ToLower())
                                        {
                                            strPropertyValue = pstrootnumber;
                                        }
                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        {

                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            if (isNum)
                                            {
                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                            }
                                            else
                                            {
                                                strPropertyValue = strPropertyValue.ToString();

                                            }
                                        }
                                        else
                                        {
                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        strPropertyValue = string.Empty;
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                            {

                                                var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                strPropertyValue = custfieldvalue;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }


                                            // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                            // {

                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                            //{
                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                            //    strPropertyValue = lstrPropertyValExt;
                                            //}
                                            //else
                                            //{
                                            //    strPropertyValue = string.Empty;
                                            //}
                                            // }
                                        }
                                        catch (Exception exExt)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        finally
                                        {

                                        }


                                    }

                                    //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                    //{
                                    //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                    //    if (isNum)
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //        QBHelper.WriteLog("SalesPrice Printed");
                                    //    }
                                    //    else
                                    //    {
                                    //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                    //    }
                                    //}
                                    if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                    {
                                        wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }


                                    }
                                    //for line break description by ;,
                                    else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
                                    {

                                        wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

                                        string[] stringSeparators = new string[] { "\r\n" };
                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                //s.Replace("\n", "");

                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 05;
                                                yminus += 08;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 08;
                                                yminus += 06;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;
                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                        {
                                            xplus = -2;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 0;

                                                }
                                            }
                                            Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                        {
                                            xplus = 18;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    xplus = 18;
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valH;
                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = 5;

                                                }
                                            }
                                            //Array.Reverse(lines);
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                }
                                                xplus += Convert.ToInt32(DetailItem.fontsize);
                                                yminus += 00;

                                            }

                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                }
                                                xplus += 07;
                                                yminus += 07;

                                            }
                                        }
                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                        {
                                            xplus = 0;
                                            yminus = 0;
                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                            {
                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                {
                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                    lobjLabelConnectorSettings.Show();
                                                    lobjLabelConnectorSettings.Hide();
                                                    string textHeight = lobjLabelConnectorSettings.valW;
                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                    lobjLabelConnectorSettings.Close();
                                                    yminus = -3;

                                                }
                                            }
                                            foreach (string splitline in lines)
                                            {
                                                if (!string.IsNullOrWhiteSpace(splitline))
                                                {
                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


                                                }
                                                xplus += 00;
                                                yminus += Convert.ToInt32(DetailItem.fontsize);

                                            }
                                        }



                                    }
                                    else
                                    {
                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                        QBHelper.WriteLog("Step14: Print text value");
                                    }

                                }

                                cb.EndText();

                            }//end text type

                        } //end of foreach

                        //new page
                        doc.NewPage();
                        // itemquantiycount++;
                        // } //end of item loop count
                    } //line item loop end
                      // } //#invoice foreach loop end

                    //} //foreach end

                } //template field name count

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight);
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);
                    //print image
                    // filePath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff";

                    //  PrintDateRangeUDFLabel(filePath, Convert.ToInt32(InvoiceLineQuantity), pstrprintername);
                    //  PrintDateRangeUDFLabel(filePath, Convert.ToInt32(1), pstrprintername);



                }
                // }
                //catch (Exception ex)
                //{

                //}



            }

            catch (Exception ex)
            {

            }
            finally
            {


            }

            //  //print image
            //filePath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff";

            //PrintDateRangeUDFLabel(filePath, Convert.ToInt32(inv.InvoiceLineQuantity), pstrprintername);

            //  } //end if inv match condition


            // } //end of item loop foreach
            return strfilename;
        }
        //print Invoice Date Range(for UDF Label ItemIncrement)
        internal string GetInvUDFFilterOrdersIcrementCounter(string Invsearchno, ArrayList arrinvoicelist, ArrayList selitemlist, string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrprintername, string pstrroutenolabel, string pstrootnumber, ArrayList arritemlisttoprint, List<QBLC.clsInvoice> lobjDataExtension, string printerName)
        {
            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            string datasourcevalue = string.Empty;
            string filePath = string.Empty;
            bool isNum;
            double pintwidth = 0;
            int QrWidth = 0;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strtiffimagepath = string.Empty;
            string strpdfpath = string.Empty;
            string searchitem = string.Empty;
            List<QBLC.clsInvoice> lobjcustomfieldtoprint = null;
            List<QBLC.clsInvoice> lobjcustDataExtPrint = null;
            List<string> dsdatasource = null;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            List<QBLC.clsInvoiceLine> filterinv = null;
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            // strtiffimagepath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + Templatename + "\\";
            //foreach (QBLC.clsInvoiceLine inv in objdatasource)
            //{

            //    filterinv = new List<QBLC.clsInvoiceLine>();
            //    if (inv.RefNumber.Trim() == Invsearchno.Trim())
            //    {

            if (File.Exists(strpdfpath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfpath);

            }
            //if (File.Exists(strpdfImgStartupPath))
            //{
            //    System.GC.Collect();
            //    System.GC.WaitForPendingFinalizers();
            //    File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
            //}


            //string[] files = Directory.GetFiles(strtiffimagepath);
            //if (files.Length > 0)
            //{
            //    System.GC.Collect();
            //    System.GC.WaitForPendingFinalizers();
            //    foreach (string file in files)
            //    {
            //        File.Delete(file);
            //    }
            //}


            QBLC.clsInvoiceLine objclsInvoiceLine = null;

            object strPropertyValue = null;
            Type objClsType;

            try
            {

                // filterinv.Add(inv);

                //printing logic start

                objclsInvoiceLine = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceLine.GetType();

                //print pdf
                //  try
                //  {
                QBHelper.WriteLog("Step7: before loop");
                QBLC.clsInvoiceLine objclsInvoiceItemDetails = null;

                objclsInvoiceItemDetails = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceItemDetails.GetType();

                path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                    Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                doc.Open();

                PdfContentByte cb = writer.DirectContent;


                //****Start **** code for border
                var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                pageBorderRect.Left += doc.LeftMargin;
                pageBorderRect.Right -= doc.RightMargin;
                pageBorderRect.Top -= doc.TopMargin;
                pageBorderRect.Bottom += doc.BottomMargin;


                //****Start **** code for Barcode
                int printquantity = 1;
                //int itemquantiycount = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {

                    // foreach (var invlist in arrinvoicelist)
                    // {

                    //lobjcustDataExtPrint = new List<QBLC.clsInvoiceLine.Itemcustomfields>();

                    //var lineItem = from QBLC.clsInvoiceLine objinvitem in objdatasource
                    //               where objinvitem.RefNumber == invlist.ToString().Trim()
                    //               select objinvitem;

                    // lobjcustDataExtPrint = lobjDataExtension.Where(p => p.CustItemRefNumber == invlist.ToString().Trim()).ToList();
                    QBHelper.WriteLog("Step8: Get items for selected order");

                    //  foreach (QBLC.clsInvoice inv in objdatasource)
                    // {
                    // foreach (QBLC.clsInvoiceLine lineitem in inv.LineItemList) //arritemlisttoprint

                    foreach (QBLC.clsInvoiceLine lineitem in arritemlisttoprint)
                    {
                        while (printquantity <= lineitem.InvoiceQuantity)
                        {
                            filterinv = new List<QBLC.clsInvoiceLine>();

                            filterinv.Clear();

                            filterinv.Add(lineitem);
                            //filter custom field item wise
                            if (lobjDataExtension.Count > 0)
                            {
                                for (int z = 0; z < filterinv.Count; z++)
                                {
                                    lobjcustomfieldtoprint = new List<QBLC.clsInvoice>();
                                    lobjcustomfieldtoprint = lobjDataExtension.Where(p => p.CustItemRefFullName == filterinv[z].InvoiceItemName.ToString() && p.Itemdesc == filterinv[z].InvoiceLineDesc && p.CustItemRefNumber == filterinv[z].RefNumber.ToString()).ToList();
                                }
                            }


                            foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist) //btformat field
                            {
                                QBHelper.WriteLog("Step9: In for each getting dimensions start");
                                divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                                divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 Popup
                                                                                            //divX = Convert.ToSingle(DetailItem.xposition);
                                                                                            //divY = Convert.ToSingle(DetailItem.yposition);
                                                                                            //fontSize = Convert.ToSingle(DetailItem.fontsize);
                                fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                                //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                                //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                                ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                                ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                                ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;
                                QBHelper.WriteLog("Step:10 getting dimenstions end");
                                if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                                {
                                    //insert image to pdf at x,y location
                                    if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                    {
                                        Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                        //Resize image depend upon your need
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                        // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(imageinsert);
                                    }
                                    else
                                    {
                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                        //Resize image depend upon your need
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                        // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(imageinsert);
                                    }
                                }

                                else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                                {

                                    if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                    {
                                        iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                        //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                        //cb.SetFontAndSize(bf, fontSize);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();

                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }

                                                        else if (dsitem.ToString().ToLower() == "itemincrement")
                                                        {
                                                            //print item 1 of N, 2 of N
                                                            strPropertyValue = printquantity.ToString();

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == dsitem.Trim().ToUpper()))
                                                            {

                                                                var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == dsitem.Trim().ToUpper()).CustItemkeyvalue;
                                                                strPropertyValue = custfieldvalue;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }
                                                }
                                                strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }

                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {

                                                            var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                            strPropertyValue = custfieldvalue;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                            }

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                            {
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {


                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {

                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {


                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }

                                        }
                                        bc.StartStopText = false;

                                        bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                        bc.ChecksumText = true;
                                        bc.GenerateChecksum = true;
                                        bc.Extended = true;
                                        try
                                        {
                                            if (bc.Code != null && bc.Code != string.Empty)
                                            {
                                                // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                // bc.Size = fontSize;
                                                // bc.Baseline = fontSize;
                                                if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                                {
                                                    bc.Font = null;
                                                }
                                                else
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                    {
                                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                    }
                                                    else
                                                    {
                                                        bc.Baseline = Convert.ToSingle(fontSize);
                                                    }
                                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                    {
                                                        case 0:
                                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                                            break;
                                                        case 1:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                        case 2:
                                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                                            break;
                                                        default:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                    }
                                                }
                                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                img.SetAbsolutePosition(divX, divY);

                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }

                                    } //code 128 end
                                      //QR code print
                                    else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                    {
                                        string lstrqrcodetext = string.Empty;
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();
                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr1.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "timestamp")
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }

                                                        else if (dsitem.ToString().ToLower() == "itemincrement")
                                                        {
                                                            //print item 1 of N, 2 of N
                                                            strPropertyValue = printquantity.ToString();

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        }
                                                        //concatinate string to print
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //custom field print
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == dsitem.ToString().Trim().ToUpper()))
                                                            {

                                                                var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == dsitem.ToString().Trim().ToUpper()).CustItemkeyvalue;
                                                                strPropertyValue = custfieldvalue;
                                                                //concatinate string to print
                                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                                {
                                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                                    checkQuickBooksvalue.Append(chart);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }


                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }

                                                    }
                                                }
                                                lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }

                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {

                                                            var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                            strPropertyValue = custfieldvalue;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                lstrsubstringvalue = strPropertyValue.ToString();
                                            }
                                        }



                                        //for (int k = 0; k < filterinv.Count; k++)
                                        //{

                                        //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        //    try
                                        //    {
                                        //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                        //        {
                                        //            strPropertyValue = DetailItem.testdata.ToString();
                                        //        }
                                        //        else
                                        //        {
                                        //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                        //        }
                                        //    }
                                        //    catch (Exception ex)
                                        //    {
                                        //        //strPropertyValue = string.Empty;
                                        //        try
                                        //        {
                                        //            string lstrPropertyValExt = string.Empty;
                                        //            if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                        //            {

                                        //                var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                        //                strPropertyValue = custfieldvalue;
                                        //            }
                                        //            else
                                        //            {
                                        //                strPropertyValue = string.Empty;
                                        //            }


                                        //        }
                                        //        catch (Exception exExt)
                                        //        {
                                        //            strPropertyValue = string.Empty;
                                        //        }
                                        //        finally
                                        //        {

                                        //        }


                                        //    }

                                        //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
                                        //    {
                                        //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                        //        if (isNum)
                                        //        {
                                        //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                        //        }
                                        //        else

                                        //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //    }

                                        //    else
                                        //    {
                                        //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                        //    }


                                        //}

                                        try
                                        {
                                            if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                            {
                                                foreach (var itemdimension in objtemplatedetailslist)
                                                {
                                                    if (itemdimension.barcodetype != null)
                                                    {
                                                        if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                        {
                                                            pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                            QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                            QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                            // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                            // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                            break;
                                                        }
                                                    }

                                                }

                                                iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                                iTextSharp.text.Image img = qrcode.GetImage();

                                                img.SetAbsolutePosition(divX, divY);

                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }


                                    } //code qr end

                                    //data matrix start
                                    //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
                                    //{
                                    //    iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
                                    //    bc.Options = (BarcodeDatamatrix.DM_AUTO);
                                    //    // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
                                    //    // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

                                    //    for (int k = 0; k < filterinv.Count; k++)
                                    //    {

                                    //        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                    //        try
                                    //        {
                                    //            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                    //            {
                                    //                strPropertyValue = DetailItem.testdata.ToString();
                                    //            }
                                    //            else
                                    //            {
                                    //                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                    //            }
                                    //        }
                                    //        catch (Exception ex)
                                    //        {
                                    //            strPropertyValue = string.Empty;
                                    //            try
                                    //            {
                                    //                string lstrPropertyValExt = string.Empty;

                                    //                //foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
                                    //                //{


                                    //                //}

                                    //                if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                    //                {

                                    //                    var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                    //                    strPropertyValue = custfieldvalue;
                                    //                }
                                    //                else
                                    //                {
                                    //                    strPropertyValue = string.Empty;
                                    //                }


                                    //            }
                                    //            catch (Exception exExt)
                                    //            {
                                    //                strPropertyValue = string.Empty;
                                    //            }
                                    //            finally
                                    //            {

                                    //            }


                                    //        }
                                    //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                    //        {
                                    //            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                    //            if (isNum)
                                    //            {


                                    //                try
                                    //                {
                                    //                    returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
                                    //                }
                                    //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                    //                {
                                    //                    returnResult = 1;
                                    //                }

                                    //            }
                                    //            else
                                    //            {

                                    //                try
                                    //                {
                                    //                    returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                    //                }
                                    //                catch (System.IndexOutOfRangeException exp)  // CS0168
                                    //                {
                                    //                    returnResult = 1;
                                    //                }
                                    //            }
                                    //        }
                                    //        else
                                    //        {

                                    //            try
                                    //            {
                                    //                returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
                                    //            }
                                    //            catch (System.IndexOutOfRangeException exp)  // CS0168
                                    //            {
                                    //                returnResult = 1;
                                    //            }
                                    //        }

                                    //    }

                                    //    try
                                    //    {
                                    //        if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
                                    //        {
                                    //            iTextSharp.text.Image img = null;
                                    //            img = bc.CreateImage();
                                    //            // img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                    //            img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
                                    //            img.SetAbsolutePosition(divX, divY);

                                    //            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                    //            cb.AddImage(img);

                                    //        }
                                    //    }
                                    //    catch (Exception ex)
                                    //    {

                                    //    }

                                    //}
                                    //data matrix end
                                    //upc-a
                                    else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                    {

                                        //Generate UPC-A barcode
                                        BarcodeEAN bc = new BarcodeEAN();

                                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                        // cb.SetFontAndSize(bf, fontSize);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {

                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }

                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                {
                                                    //print item 1 of N, 2 of N
                                                    strPropertyValue = printquantity.ToString();

                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }
                                                }
                                                else
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;
                                                    if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {

                                                        var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                        strPropertyValue = custfieldvalue;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }

                                            //int lntchecksumdigit;
                                            ////Get UPC A code length
                                            //if (strPropertyValue.ToString().Trim().Length == 11)
                                            //{
                                            //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
                                            //    {

                                            //        strPropertyValue += lntchecksumdigit.ToString();
                                            //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                            //        {
                                            //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
                                            //            if (isNum)
                                            //            {
                                            //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                            //            }
                                            //            else
                                            //            {

                                            //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            //            }
                                            //        }
                                            //        else
                                            //        {
                                            //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            //        }


                                            //    }
                                            //}
                                            strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                            if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                            {

                                                if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null)
                                                {
                                                    isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                                    if (isNum)
                                                    {

                                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                    }
                                                    else
                                                    {


                                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    }
                                                }
                                                else
                                                {

                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }

                                        }
                                        bc.StartStopText = false;

                                        bc.CodeType = Barcode.UPCA;
                                        bc.Extended = true;
                                        try
                                        {
                                            if (bc.Code != null && bc.Code != string.Empty)
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                                {
                                                    bc.Font = null;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                    {
                                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                    }
                                                    else
                                                    {
                                                        bc.Baseline = Convert.ToSingle(fontSize);
                                                    }
                                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                    {
                                                        case 0:
                                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                                            break;
                                                        case 1:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                        case 2:
                                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                                            break;
                                                        default:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                    }
                                                }
                                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                img.SetAbsolutePosition(divX, divY);
                                                // img.RotationDegrees = 360;
                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }

                                    }//end upc-a
                                    else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                    {
                                        Barcode39 bc = new Barcode39();

                                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                        // cb.SetFontAndSize(bf, fontSize);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();

                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }

                                                        else if (dsitem.ToString().ToLower() == "itemincrement")
                                                        {
                                                            //print item 1 of N, 2 of N
                                                            strPropertyValue = printquantity.ToString();

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == dsitem.Trim().ToUpper()))
                                                            {

                                                                var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == dsitem.Trim().ToUpper()).CustItemkeyvalue;
                                                                strPropertyValue = custfieldvalue;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }
                                                }
                                                strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }

                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                                    {
                                                        //print item 1 of N, 2 of N
                                                        strPropertyValue = printquantity.ToString();

                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {

                                                            var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                            strPropertyValue = custfieldvalue;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                            }


                                            if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                            {
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }

                                        } //for end

                                        bc.StartStopText = false;


                                        bc.Extended = true;
                                        try
                                        {
                                            if (bc.Code != null && bc.Code != string.Empty)
                                            {
                                                // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                // bc.Size = fontSize;
                                                // bc.Baseline = fontSize;
                                                if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                                {
                                                    bc.Font = null;
                                                }
                                                else
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                    {
                                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                    }
                                                    else
                                                    {
                                                        bc.Baseline = Convert.ToSingle(fontSize);
                                                    }
                                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                    {
                                                        case 0:
                                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                                            break;
                                                        case 1:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                        case 2:
                                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                                            break;
                                                        default:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                    }
                                                }
                                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                                img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                img.SetAbsolutePosition(divX, divY);

                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }


                                    }

                                }
                                else //Field Type is Text Field
                                {
                                    QBHelper.WriteLog("Step11: Text printing start..");
                                    cb.BeginText();
                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                    // cb.SetFontAndSize(bf, fontSize);
                                    if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                    {
                                        if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                        {
                                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                        }
                                        else
                                        {
                                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                        }

                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    cb.SetTextMatrix(divX, divY);

                                    for (int k = 0; k < filterinv.Count; k++)
                                    {

                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                        try
                                        {
                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                            {
                                                strPropertyValue = DetailItem.testdata.ToString();
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                            {
                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                            }
                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "itemincrement")
                                            {
                                                //print item 1 of N, 2 of N
                                                strPropertyValue = printquantity.ToString();

                                            }
                                            else if (DetailItem.datasourcetext.ToString().Replace(" ", string.Empty).ToLower() == pstrroutenolabel.Replace(" ", string.Empty).ToLower())
                                            {
                                                strPropertyValue = pstrootnumber;
                                            }
                                            else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            {

                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {
                                                    strPropertyValue = strPropertyValue.ToString();

                                                }
                                            }
                                            else
                                            {
                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjcustomfieldtoprint.Any(p => p.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()))
                                                {

                                                    var custfieldvalue = lobjcustomfieldtoprint.FirstOrDefault(i => i.CustItemkey == DetailItem.datasourcetext.Trim().ToUpper()).CustItemkeyvalue;
                                                    strPropertyValue = custfieldvalue;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }


                                                // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
                                                // {

                                                //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
                                                //{
                                                //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                //    strPropertyValue = lstrPropertyValExt;
                                                //}
                                                //else
                                                //{
                                                //    strPropertyValue = string.Empty;
                                                //}
                                                // }
                                            }
                                            catch (Exception exExt)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            finally
                                            {

                                            }


                                        }

                                        //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        //{
                                        //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        //    if (isNum)
                                        //    {
                                        //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //        QBHelper.WriteLog("SalesPrice Printed");
                                        //    }
                                        //    else
                                        //    {
                                        //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //    }
                                        //}
                                        if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                        {
                                            wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                            string[] stringSeparators = new string[] { "\r\n" };
                                            string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                            if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                foreach (string splitline in lines)
                                                {
                                                    //s.Replace("\n", "");

                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 05;
                                                    yminus += 08;

                                                }
                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 08;
                                                    yminus += 06;

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                            {
                                                xplus = 18;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valH;
                                                        divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = 0;
                                                    }
                                                }
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                                    yminus += 00;

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                            {
                                                xplus = -2;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valW;
                                                        divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = 0;

                                                    }
                                                }
                                                Array.Reverse(lines);
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 00;
                                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                            {
                                                xplus = 18;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        xplus = 18;
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valH;
                                                        divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = 5;

                                                    }
                                                }
                                                //Array.Reverse(lines);
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                                    yminus += 00;

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 07;
                                                    yminus += 07;

                                                }
                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valW;
                                                        divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = -3;

                                                    }
                                                }
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 00;
                                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                                }
                                            }


                                        }

                                        else
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            QBHelper.WriteLog("Step14: Print text value");
                                        }

                                    }

                                    cb.EndText();

                                }//end text type

                            } //end of foreach

                            //new page
                            /// doc.NewPage();
                            printquantity++;
                            if (lineitem.InvoiceQuantity > 1)
                            {
                                doc.NewPage();
                            }
                        }//end of while

                        //new page

                        // itemquantiycount++;
                        // } //end of item loop count
                    } //line item loop end
                      // } //#invoice foreach loop end

                    //} //foreach end

                } //template field name count

                doc.Close();
                writer.Close();

                //convert pdf to image
                if (objtemplatedetailslist.Count > 0)
                {
                    //convert inches to pixel
                    fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                    fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                    // ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight);
                    ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);
                    //print image
                    // filePath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff";

                    //  PrintDateRangeUDFLabel(filePath, Convert.ToInt32(InvoiceLineQuantity), pstrprintername);
                    //  PrintDateRangeUDFLabel(filePath, Convert.ToInt32(1), pstrprintername);



                }
                // }
                //catch (Exception ex)
                //{

                //}



            }

            catch (Exception ex)
            {

            }
            finally
            {


            }

            //  //print image
            //filePath = System.Windows.Forms.Application.StartupPath + @"\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff";

            //PrintDateRangeUDFLabel(filePath, Convert.ToInt32(inv.InvoiceLineQuantity), pstrprintername);

            //  } //end if inv match condition


            // } //end of item loop foreach
            return strfilename;
        }

        public string GetInvUDFFilterOrdersDefault(string Invsearchno, ArrayList arrinvoicelist, ArrayList selitemlist, string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrprintername, List<Dictionary<string, string>> lobjDataExtension1, string printerName)
        {
            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double pintwidth = 0;
            int QrWidth = 0;
            double Num;
            string datasourcevalue = string.Empty;
            string filePath = string.Empty;
            bool isNum;
            List<string> dsdatasource = null;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            string searchitem = string.Empty;

            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            List<QBLC.clsInvoiceLine> filterinv = null;
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");

            //foreach (QBLC.clsInvoiceLine inv in objdatasource)
            //{

            //    filterinv = new List<QBLC.clsInvoiceLine>();
            //    if (inv.RefNumber.Trim() == Invsearchno.Trim())
            //    {
            if (File.Exists(strpdfpath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfpath);

            }
            if (File.Exists(strpdfImgStartupPath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
            }


            QBLC.clsInvoiceLine objclsInvoiceLine = null;

            object strPropertyValue = null;
            Type objClsType;

            try
            {

                // filterinv.Add(inv);

                //printing logic start

                objclsInvoiceLine = new QBLC.clsInvoiceLine();

                objClsType = objclsInvoiceLine.GetType();

                //print pdf
                //  try
                //  {
                QBHelper.WriteLog("Step7: before loop");
                QBLC.clsInvoiceLine objclsInvoiceItemDetails = null;



                //****Start **** code for Barcode
                int printquantity = 0;
                //Loop through Template Field Names
                if (objtemplatedetailslist.Count > 0)
                {

                    foreach (var invlist in arrinvoicelist)
                    {


                        var lineItem = from QBLC.clsInvoiceLine objinvitem in objdatasource
                                       where objinvitem.RefNumber == invlist.ToString().Trim()
                                       select objinvitem;


                        foreach (QBLC.clsInvoiceLine inv in lineItem) //objdatasource
                        {
                            objclsInvoiceItemDetails = new QBLC.clsInvoiceLine();

                            objClsType = objclsInvoiceItemDetails.GetType();

                            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                            fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                            fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                            var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                            doc.Open();

                            PdfContentByte cb = writer.DirectContent;


                            //****Start **** code for border
                            var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                            pageBorderRect.Left += doc.LeftMargin;
                            pageBorderRect.Right -= doc.RightMargin;
                            pageBorderRect.Top -= doc.TopMargin;
                            pageBorderRect.Bottom += doc.BottomMargin;

                            Dictionary<string, string> lobjDataExtension = new Dictionary<string, string>();


                            filterinv = new List<QBLC.clsInvoiceLine>();

                            filterinv.Clear();

                            filterinv.Add(inv);


                            foreach (Dictionary<string, string> objcustfield in lobjDataExtension1)
                            {
                                var keyValuePair = objcustfield.Single(x => x.Key == "refnumber");
                                string value = keyValuePair.Value;
                                string[] val = value.Split('&');

                                if (Convert.ToString(val[0]) == inv.RefNumber && Convert.ToString(val[1]) == inv.InvoiceLineTxnLineID)
                                {
                                    lobjDataExtension = objcustfield;
                                }
                            }


                            foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist) //btformat field
                            {
                                QBHelper.WriteLog("Step9: In for each getting dimensions start");
                                divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                                divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup
                                                                                            //divX = Convert.ToSingle(DetailItem.xposition);
                                                                                            //divY = Convert.ToSingle(DetailItem.yposition);
                                                                                            //fontSize = Convert.ToSingle(DetailItem.fontsize);
                                fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                                //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                                //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                                ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                                ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                                ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;
                                QBHelper.WriteLog("Step:10 getting dimenstions end");
                                if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                                {
                                    if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                    {
                                        //insert image to pdf at x,y location
                                        if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                    {
                                        Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                        //Resize image depend upon your need
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                        // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(imageinsert);
                                    }
                                    else
                                    {
                                        iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                        //Resize image depend upon your need
                                        imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                        // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                        imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                        imageinsert.SetAbsolutePosition(divX, divY);
                                        imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                        cb.AddImage(imageinsert);
                                    }
                                    }
                                    else
                                    {
                                        try
                                        {
                                            string lstrPropertyValExt = string.Empty;

                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                            {
                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                strPropertyValue = lstrPropertyValExt;
                                            }
                                            else
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            strPropertyValue = string.Empty;
                                        }
                                        string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                        string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                        if (File.Exists(Imagepath))
                                        {

                                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                            imageinsert.SetAbsolutePosition(divX, divY);
                                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                            cb.AddImage(imageinsert);
                                        }
                                      
                                    }
                                }

                                else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                                {

                                    if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                    {
                                        iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                        //BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                        //cb.SetFontAndSize(bf, fontSize);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();

                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }
                                                }
                                                strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                            }

                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                            {
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {


                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                }
                                                else
                                                {

                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {


                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }

                                        }
                                        bc.StartStopText = false;

                                        bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                        bc.ChecksumText = true;
                                        bc.GenerateChecksum = true;
                                        bc.Extended = true;
                                        try
                                        {
                                            if (bc.Code != null && bc.Code != string.Empty)
                                            {
                                                // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                // bc.Size = fontSize;
                                                // bc.Baseline = fontSize;
                                                if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                                {
                                                    bc.Font = null;
                                                }
                                                else
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                    {
                                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                    }
                                                    else
                                                    {
                                                        bc.Baseline = Convert.ToSingle(fontSize);
                                                    }
                                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                    {
                                                        case 0:
                                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                                            break;
                                                        case 1:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                        case 2:
                                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                                            break;
                                                        default:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                    }
                                                }
                                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                img.SetAbsolutePosition(divX, divY);

                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }

                                    } //code 128 end
                                      //qrcode start
                                    else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                    {
                                        string lstrqrcodetext = string.Empty;
                                        string lstrsubstringvalue = string.Empty;
                                        StringBuilder checkQuickBooksvalue = new StringBuilder();
                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr1.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "timestamp")
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)objdatasource[k], null);
                                                        }
                                                        //concatinate string to print
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }

                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        //custom field print
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;


                                                            if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                                //concatinate string to print
                                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                                {
                                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                                    checkQuickBooksvalue.Append(chart);
                                                                }
                                                            }


                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }

                                                    }
                                                }
                                                lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                lstrsubstringvalue = strPropertyValue.ToString();
                                            }
                                        }



                                        try
                                        {
                                            if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                            {
                                                foreach (var itemdimension in objtemplatedetailslist)
                                                {
                                                    if (itemdimension.barcodetype != null)
                                                    {
                                                        if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                        {
                                                            pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                            QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                            QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                            // QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
                                                            // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
                                                            break;
                                                        }
                                                    }

                                                }

                                                iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                                iTextSharp.text.Image img = qrcode.GetImage();

                                                img.SetAbsolutePosition(divX, divY);

                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }


                                    }
                                    //qrcode end
                                    //upc-a
                                    else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                    {

                                        //Generate UPC-A barcode
                                        BarcodeEAN bc = new BarcodeEAN();

                                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                        // cb.SetFontAndSize(bf, fontSize);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {

                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }

                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }


                                            }

                                            strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                            if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                            {

                                                if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null)
                                                {
                                                    isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                                    if (isNum)
                                                    {

                                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                    }
                                                    else
                                                    {


                                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    }
                                                }
                                                else
                                                {

                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }

                                        }
                                        bc.StartStopText = false;

                                        bc.CodeType = Barcode.UPCA;
                                        bc.Extended = true;
                                        try
                                        {
                                            if (bc.Code != null && bc.Code != string.Empty)
                                            {
                                                bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                bc.Size = fontSize;
                                                if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                                {
                                                    bc.Font = null;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                    {
                                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                    }
                                                    else
                                                    {
                                                        bc.Baseline = Convert.ToSingle(fontSize);
                                                    }
                                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                    {
                                                        case 0:
                                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                                            break;
                                                        case 1:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                        case 2:
                                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                                            break;
                                                        default:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                    }
                                                }
                                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                img.SetAbsolutePosition(divX, divY);
                                                // img.RotationDegrees = 360;
                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }

                                    }//end upc-a
                                    else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                    {
                                        Barcode39 bc = new Barcode39();

                                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                        // cb.SetFontAndSize(bf, fontSize);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();

                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }
                                                }
                                                strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                            }


                                            if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                            {
                                                isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                if (isNum)
                                                {
                                                    //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                }
                                                else
                                                {
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }
                                            }
                                            else
                                            {
                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                            }

                                        } //for end

                                        bc.StartStopText = false;


                                        bc.Extended = true;
                                        try
                                        {
                                            if (bc.Code != null && bc.Code != string.Empty)
                                            {
                                                // bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                // bc.Size = fontSize;
                                                // bc.Baseline = fontSize;
                                                if (fontSize == 0 || Convert.ToBoolean(DetailItem.barcharvisible) == false) //22-APR-2019
                                                {
                                                    bc.Font = null;
                                                }
                                                else
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                    {
                                                        bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                    }
                                                    else
                                                    {
                                                        bc.Baseline = Convert.ToSingle(fontSize);
                                                    }
                                                    switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                    {
                                                        case 0:
                                                            bc.TextAlignment = Element.ALIGN_LEFT;
                                                            break;
                                                        case 1:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                        case 2:
                                                            bc.TextAlignment = Element.ALIGN_RIGHT;
                                                            break;
                                                        default:
                                                            bc.TextAlignment = Element.ALIGN_CENTER;
                                                            break;
                                                    };
                                                }
                                                bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                                img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                img.SetAbsolutePosition(divX, divY);

                                                img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                cb.AddImage(img);
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }


                                    }

                                }
                                else //Field Type is Text Field
                                {

                                    cb.BeginText();
                                    if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                    {
                                        if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                        {
                                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                        }
                                        else
                                        {
                                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                        }

                                    }
                                    else
                                    {
                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                    }
                                    cb.SetTextMatrix(divX, divY);
                                    string lstrsubstringvalue = string.Empty;
                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

                                    for (int k = 0; k < filterinv.Count; k++)
                                    {
                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                        {
                                            dsdatasource = new List<string>();
                                            int staticVal = 0;
                                            string chart = DetailItem.delimiter;
                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                            dsdatasource = charArr.Split('~').ToList();
                                            foreach (var dsitem in dsdatasource)
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (dsitem.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                    {
                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
                                                        int loopStatic = 0;
                                                        foreach (var fieldVal in ddatasourceStatic)
                                                        {
                                                            var Itemstatic = fieldVal.Split('∬');
                                                            if (Itemstatic.Length > 1)
                                                            {
                                                                if (loopStatic == staticVal)
                                                                {
                                                                    strPropertyValue = Itemstatic[1];
                                                                    staticVal = staticVal + 1;
                                                                    break;
                                                                }
                                                                loopStatic = loopStatic + 1;
                                                            }

                                                        }

                                                    }
                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }


                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                {
                                                    checkQuickBooksvalue.Append(strPropertyValue);
                                                    checkQuickBooksvalue.Append(chart);
                                                }
                                            }
                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);
                                        }
                                        else
                                        {
                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                            try
                                            {
                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                {
                                                    strPropertyValue = DetailItem.testdata.ToString();
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                }
                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                {
                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                }
                                                else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                {

                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = strPropertyValue.ToString();

                                                    }

                                                }
                                                else
                                                {
                                                    //if (objPropertyInfo != null)
                                                    //{
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsInvoiceLine)filterinv[k], null);
                                                    //}
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                                try
                                                {
                                                    string lstrPropertyValExt = string.Empty;

                                                    if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }


                                                    else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                    {
                                                        lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                        strPropertyValue = lstrPropertyValExt;
                                                    }
                                                    else
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                }
                                                catch (Exception exExt)
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                                finally
                                                {

                                                }
                                            }
                                        }

                                        //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                        //{
                                        //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                        //    if (isNum)
                                        //    {
                                        //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //        QBHelper.WriteLog("SalesPrice Printed");
                                        //    }
                                        //    else
                                        //    {
                                        //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                        //    }
                                        //}
                                        if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                        {
                                            wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                            string[] stringSeparators = new string[] { "\r\n" };
                                            string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                            if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                foreach (string splitline in lines)
                                                {
                                                    //s.Replace("\n", "");

                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 05;
                                                    yminus += 08;

                                                }
                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 08;
                                                    yminus += 06;

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                            {
                                                xplus = 18;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valH;
                                                        divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = 0;
                                                    }
                                                }
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                                    yminus += 00;

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                            {
                                                xplus = -2;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valW;
                                                        divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = 0;

                                                    }
                                                }
                                                Array.Reverse(lines);
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 00;
                                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                            {
                                                xplus = 18;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        xplus = 18;
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valH;
                                                        divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = 5;

                                                    }
                                                }
                                                //Array.Reverse(lines);
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += Convert.ToInt32(DetailItem.fontsize);
                                                    yminus += 00;

                                                }

                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 07;
                                                    yminus += 07;

                                                }
                                            }
                                            else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                            {
                                                xplus = 0;
                                                yminus = 0;
                                                if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                {
                                                    if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                    {
                                                        LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                        lobjLabelConnectorSettings.Show();
                                                        lobjLabelConnectorSettings.Hide();
                                                        string textHeight = lobjLabelConnectorSettings.valW;
                                                        divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                        lobjLabelConnectorSettings.Close();
                                                        yminus = -3;

                                                    }
                                                }
                                                foreach (string splitline in lines)
                                                {
                                                    if (!string.IsNullOrWhiteSpace(splitline))
                                                    {
                                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                    }
                                                    xplus += 00;
                                                    yminus += Convert.ToInt32(DetailItem.fontsize);

                                                }
                                            }


                                        }

                                        else
                                        {
                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            QBHelper.WriteLog("Step14: Print text value");
                                        }

                                    }

                                    cb.EndText();

                                }//end text type

                            } //end of foreach

                            //new page
                            // doc.NewPage();

                            doc.Close();
                            writer.Close();

                            //convert pdf to image
                            if (objtemplatedetailslist.Count > 0)
                            {
                                //convert inches to pixel
                                fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                                fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                                //ConvertPdfToPrintMultipleImageCopies(Templatename, fltImgWidth, fltImgHeight, printerName);

                                ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, printerName);
                                //print image
                            }



                            //print image
                            filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");

                            if ((lobjQBConfiguration.GetLabelConfigSettings("MultiInvoiceMode").ToString() == "M"))
                            {
                                // PrintMultipleInvoices(filePath, 0, 0, printerName, Convert.ToInt32(inv.InvoiceLineQuantity));
                                PrintDateRangeUDFLabel(filePath, Convert.ToInt32(inv.InvoiceLineQuantity), printerName);
                            }
                            else
                            {
                                PrintMultipleInvoices(filePath, 1, 0, printerName, Convert.ToInt32(inv.InvoiceLineQuantity));
                            }

                        }

                    }
                }

            }

            catch (Exception ex)
            {

            }
            finally
            {


            }


            return strfilename;
        }



        public void PrintMultipleInvoices(string pstrimagepath, int pintprintcount, double printdelay, string printername, int InvoicePrintQty)
        {
            StringBuilder logMessage = new StringBuilder();

            try
            {
                int pintprcount = 1;
                int Z = 0;
                var imagefiles = Directory.GetFiles(pstrimagepath, "*.tiff");
                if (imagefiles != null)
                {
                    foreach (var imgpath in imagefiles)
                    {
                        if (pintprintcount == 0)
                        {
                            // pintprcount = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(dataGVSelectedOrders.Rows[Z].Cells["InvoiceLineQuantity"].Value)));
                            pintprcount = InvoicePrintQty;
                        }
                        else
                        {
                            pintprcount = 1;
                        }
                        PrintDocument pd = new PrintDocument();

                        //Disable the printing document pop-up dialog shown during printing.
                        PrintController printController = new StandardPrintController();
                        pd.PrintController = printController;


                        pd.PrinterSettings.PrinterName = printername;
                        pd.DefaultPageSettings.Landscape = false;
                        pd.PrinterSettings.Copies = Convert.ToInt16(pintprcount);
                        pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                        pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);

                        // pd.PrinterSettings.Copies = Convert.ToInt16(pintprcount);
                        if (printdelay > 0)
                        {
                            Thread.Sleep(Convert.ToInt32(printdelay)); //2 sec
                        }
                        pd.DefaultPageSettings.Landscape = false;
                        pd.PrintPage += (sndr, args) =>
                        {

                            System.Drawing.Image i = System.Drawing.Image.FromFile(imgpath.ToString());

                            //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                            System.Drawing.Rectangle m = args.MarginBounds;

                            //Logic below maintains Aspect Ratio.
                            if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                            {
                                m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                            }
                            else
                            {
                                m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                            }
                            //Calculating optimal orientation.
                            pd.DefaultPageSettings.Landscape = m.Width > m.Height;
                            pd.DefaultPageSettings.Landscape = false;
                            args.Graphics.DrawImage(i, m);

                        };

                        pd.Print();

                        Z = Z + 1;

                    }
                }

            }
            catch (Exception ex)
            {

                QBHelper.WriteLog("ErrorCatch : {0}" + ex.ToString());
            }
            finally
            {
                logMessage.AppendLine(string.Format(CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));

                QBHelper.WriteLog("ErrorFinally : {0}" + logMessage.ToString());
                if (Directory.Exists(pstrimagepath))
                {
                    var files = Directory.GetFiles(pstrimagepath, "*.tiff");
                    if (files.Length > 0)
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        foreach (string file in files)
                        {
                            File.Delete(file);
                        }
                    }
                    Directory.Delete(pstrimagepath);
                }



            }
        }



        //Print Sales Order Date Range (for UDF Label)
        //public string GetSalesOrderUDFFilterOrders(string Invsearchno, string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrprintername, Dictionary<string, string> lobjDataExtension,string PrinterName)
        //{
        //    float fltWidth = '0';
        //    float fltHeight = '0';
        //    float fltImgWidth = '0';
        //    float fltImgHeight = '0';
        //    float? ImageNewWidth;
        //    float constval = (float)0.010416; ;//(float)0.014;
        //    float divX;
        //    float divY;
        //    float fontSize;
        //    float? ImageHeight;
        //    float? ImageWidth;
        //    string path = string.Empty;
        //    string strfilename = string.Empty;
        //    string wraptext = string.Empty;
        //    int returnResult = 0;
        //    double? QrImaageWidth;
        //    double Num;
        //    double pintwidth = 0;
        //    string datasourcevalue = string.Empty;
        //    string filePath = string.Empty;
        //    bool isNum;
        //    float xplus = '0';
        //    float yminus = '0';
        //    string strpdfImgStartupPath = string.Empty;
        //    string strpdfpath = string.Empty;
        //    List<string> dsdatasource = null;
        //    int QrWidth = 0;
        //    QBConfiguration lobjQBConfiguration = new QBConfiguration();
        //    List<QBLC.clsSalesOrderLine> filterinv = null;
        //    strpdfImgStartupPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff";
        //    strpdfpath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf";
        //    foreach (QBLC.clsSalesOrderLine inv in objdatasource)
        //    {

        //        filterinv = new List<QBLC.clsSalesOrderLine>();
        //        if (inv.RefNumber.Trim() == Invsearchno.Trim())
        //        {
        //            if (File.Exists(strpdfpath))
        //            {
        //                System.GC.Collect();
        //                System.GC.WaitForPendingFinalizers();
        //                File.Delete(strpdfpath);

        //            }
        //            if (File.Exists(strpdfImgStartupPath))
        //            {
        //                System.GC.Collect();
        //                System.GC.WaitForPendingFinalizers();
        //                File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
        //            }
        //            // pdfImageDelete(Templatename);

        //            QBLC.clsSalesOrderLine objclsSalesOrderLine = null;

        //            object strPropertyValue = null;
        //            Type objClsType;

        //            try
        //            {

        //                filterinv.Add(inv);

        //                //printing logic start

        //                objclsSalesOrderLine = new QBLC.clsSalesOrderLine();

        //                objClsType = objclsSalesOrderLine.GetType();
        //                //i = 1;
        //                //print pdf
        //                try
        //                {

        //                    QBLC.clsSalesOrderLine objclsSalesOrderItemDetails = null;
        //                    //Type objClsType;
        //                    // object strPropertyValue = null;

        //                    objclsSalesOrderItemDetails = new QBLC.clsSalesOrderLine();

        //                    objClsType = objclsSalesOrderItemDetails.GetType();

        //                    path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf";


        //                    if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"))
        //                        Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint");

        //                    fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

        //                    fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


        //                    var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


        //                    PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

        //                    doc.Open();

        //                    PdfContentByte cb = writer.DirectContent;


        //                    //****Start **** code for border
        //                    var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

        //                    pageBorderRect.Left += doc.LeftMargin;
        //                    pageBorderRect.Right -= doc.RightMargin;
        //                    pageBorderRect.Top -= doc.TopMargin;
        //                    pageBorderRect.Bottom += doc.BottomMargin;


        //                    //****Start **** code for Barcode
        //                    // int printquantity = 0;
        //                    //Loop through Template Field Names
        //                    if (objtemplatedetailslist.Count > 0)
        //                    {
        //                        // while (printquantity < IdenticalCopyofLabel)
        //                        // {
        //                        foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist) //btformat field
        //                        {
        //                            divX = (Convert.ToSingle(DetailItem.xposition) / constval);
        //                            divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup
        //                                                                                        // divX = Convert.ToSingle(DetailItem.xposition);
        //                                                                                        // divY = Convert.ToSingle(DetailItem.yposition);
        //                            fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
        //                            //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
        //                            //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
        //                            ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
        //                            ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
        //                            ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

        //                            if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
        //                            {
        //                                //insert image to pdf at x,y location
        //                                if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
        //                                {
        //                                    Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

        //                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
        //                                    //Resize image depend upon your need
        //                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

        //                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
        //                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
        //                                    imageinsert.SetAbsolutePosition(divX, divY);
        //                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                    cb.AddImage(imageinsert);
        //                                }
        //                                else
        //                                {
        //                                    iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png");
        //                                    //Resize image depend upon your need
        //                                    imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

        //                                    // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
        //                                    imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
        //                                    imageinsert.SetAbsolutePosition(divX, divY);
        //                                    imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                    cb.AddImage(imageinsert);
        //                                }
        //                            }

        //                            else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
        //                            {

        //                                if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
        //                                {
        //                                    iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

        //                                    bc.TextAlignment = Element.ALIGN_CENTER;

        //                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        //                                    // cb.SetFontAndSize(bf, fontSize);

        //                                    for (int k = 0; k < filterinv.Count; k++)
        //                                    {
        //                                        string lstrsubstringvalue = string.Empty;
        //                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

        //                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
        //                                        {
        //                                            dsdatasource = new List<string>();
        //                                            int staticVal = 0;
        //                                            string chart = DetailItem.delimiter;
        //                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
        //                                            dsdatasource = charArr.Split('~').ToList();
        //                                            foreach (var dsitem in dsdatasource)
        //                                            {
        //                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                                try
        //                                                {
        //                                                    if (dsitem.ToString().ToLower() == "static")
        //                                                    {
        //                                                        strPropertyValue = DetailItem.testdata.ToString();
        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
        //                                                    {
        //                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
        //                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
        //                                                        int loopStatic = 0;
        //                                                        foreach (var fieldVal in ddatasourceStatic)
        //                                                        {
        //                                                            var Itemstatic = fieldVal.Split('∬');
        //                                                            if (Itemstatic.Length > 1)
        //                                                            {
        //                                                                if (loopStatic == staticVal)
        //                                                                {
        //                                                                    strPropertyValue = Itemstatic[1];
        //                                                                    staticVal = staticVal + 1;
        //                                                                    break;
        //                                                                }
        //                                                                loopStatic = loopStatic + 1;
        //                                                            }

        //                                                        }

        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
        //                                                    {
        //                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
        //                                                    {
        //                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                                    }
        //                                                }
        //                                                catch (Exception ex)
        //                                                {
        //                                                    strPropertyValue = string.Empty;
        //                                                    try
        //                                                    {
        //                                                        string lstrPropertyValExt = string.Empty;

        //                                                        foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
        //                                                        {

        //                                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                            //{
        //                                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                            //    strPropertyValue = lstrPropertyValExt;
        //                                                            //}
        //                                                            //else
        //                                                            //{
        //                                                            //    strPropertyValue = string.Empty;
        //                                                            //}
        //                                                        }
        //                                                    }
        //                                                    catch (Exception exExt)
        //                                                    {
        //                                                        strPropertyValue = string.Empty;
        //                                                    }
        //                                                    finally
        //                                                    {

        //                                                    }

        //                                                }
        //                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
        //                                                {
        //                                                    checkQuickBooksvalue.Append(strPropertyValue);
        //                                                    checkQuickBooksvalue.Append(chart);
        //                                                }
        //                                            }
        //                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

        //                                        }
        //                                        else
        //                                        {
        //                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                            try
        //                                            {
        //                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                                {
        //                                                    strPropertyValue = DetailItem.testdata.ToString();
        //                                                }
        //                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                                }
        //                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                                }
        //                                                else
        //                                                {
        //                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                                }
        //                                            }
        //                                            catch (Exception ex)
        //                                            {
        //                                                strPropertyValue = string.Empty;
        //                                                try
        //                                                {
        //                                                    string lstrPropertyValExt = string.Empty;

        //                                                    foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
        //                                                    {

        //                                                        //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                        //{
        //                                                        //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                        //    strPropertyValue = lstrPropertyValExt;
        //                                                        //}
        //                                                        //else
        //                                                        //{
        //                                                        //    strPropertyValue = string.Empty;
        //                                                        //}
        //                                                    }
        //                                                }
        //                                                catch (Exception exExt)
        //                                                {
        //                                                    strPropertyValue = string.Empty;
        //                                                }
        //                                                finally
        //                                                {

        //                                                }


        //                                            }
        //                                        }


        //                                        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
        //                                        {
        //                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
        //                                            if (isNum)
        //                                            {


        //                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

        //                                            }
        //                                            else
        //                                            {

        //                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                            }
        //                                        }
        //                                        else
        //                                        {


        //                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                        }

        //                                    }
        //                                    bc.StartStopText = false;

        //                                    bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
        //                                    bc.ChecksumText = true;
        //                                    bc.GenerateChecksum = true;
        //                                    bc.Extended = true;
        //                                    try
        //                                    {
        //                                        if (bc.Code != null && bc.Code != string.Empty)
        //                                        {
        //                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                            bc.Size = fontSize;
        //                                            bc.Baseline = fontSize;
        //                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
        //                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
        //                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


        //                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
        //                                            img.SetAbsolutePosition(divX, divY);

        //                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                            cb.AddImage(img);
        //                                        }
        //                                    }
        //                                    catch (Exception ex)
        //                                    {

        //                                    }

        //                                } //code 128 end
        //                                  //QR code print
        //                                else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
        //                                {
        //                                    string lstrqrcodetext = string.Empty;
        //                                    string lstrsubstringvalue = string.Empty;
        //                                    StringBuilder checkQuickBooksvalue = new StringBuilder();
        //                                    for (int k = 0; k < filterinv.Count; k++)
        //                                    {
        //                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
        //                                        {
        //                                            dsdatasource = new List<string>();
        //                                            int staticVal = 0;
        //                                            string chart = DetailItem.delimiter;
        //                                            string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
        //                                            dsdatasource = charArr1.Split('~').ToList();
        //                                            foreach (var dsitem in dsdatasource)
        //                                            {
        //                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

        //                                                try
        //                                                {
        //                                                    if (dsitem.ToString().ToLower() == "static")
        //                                                    {
        //                                                        strPropertyValue = DetailItem.testdata.ToString();
        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
        //                                                    {
        //                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
        //                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
        //                                                        int loopStatic = 0;
        //                                                        foreach (var fieldVal in ddatasourceStatic)
        //                                                        {
        //                                                            var Itemstatic = fieldVal.Split('∬');
        //                                                            if (Itemstatic.Length > 1)
        //                                                            {
        //                                                                if (loopStatic == staticVal)
        //                                                                {
        //                                                                    strPropertyValue = Itemstatic[1];
        //                                                                    staticVal = staticVal + 1;
        //                                                                    break;
        //                                                                }
        //                                                                loopStatic = loopStatic + 1;
        //                                                            }

        //                                                        }

        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "timestamp")
        //                                                    {
        //                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
        //                                                    }
        //                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
        //                                                    {
        //                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[k], null);
        //                                                    }
        //                                                    //concatinate string to print
        //                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
        //                                                    {
        //                                                        checkQuickBooksvalue.Append(strPropertyValue);
        //                                                        checkQuickBooksvalue.Append(chart);
        //                                                    }

        //                                                }
        //                                                catch (Exception ex)
        //                                                {
        //                                                    //custom field print
        //                                                    try
        //                                                    {
        //                                                        string lstrPropertyValExt = string.Empty;


        //                                                        //if (lobjDataExtension.ContainsKey(dsitem.ToString().Trim().ToUpper()))
        //                                                        //{
        //                                                        //    lobjDataExtension.TryGetValue(dsitem.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                        //    strPropertyValue = lstrPropertyValExt;
        //                                                        //    //concatinate string to print
        //                                                        //    checkQuickBooksvalue.Append(strPropertyValue);
        //                                                        //    checkQuickBooksvalue.Append(charArr);
        //                                                        //}
        //                                                        //else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
        //                                                        //{
        //                                                        //    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
        //                                                        //    strPropertyValue = lstrPropertyValExt;
        //                                                        //}


        //                                                    }
        //                                                    catch (Exception exExt)
        //                                                    {
        //                                                        strPropertyValue = string.Empty;
        //                                                    }
        //                                                    finally
        //                                                    {

        //                                                    }

        //                                                }
        //                                            }
        //                                            lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
        //                                        }
        //                                        else
        //                                        {
        //                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                            try
        //                                            {
        //                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                                {
        //                                                    strPropertyValue = DetailItem.testdata.ToString();
        //                                                }
        //                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                                }
        //                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                                }
        //                                                else
        //                                                {
        //                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                                }
        //                                            }
        //                                            catch (Exception ex)
        //                                            {
        //                                                strPropertyValue = string.Empty;
        //                                                try
        //                                                {
        //                                                    string lstrPropertyValExt = string.Empty;

        //                                                    foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
        //                                                    {

        //                                                        //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                        //{
        //                                                        //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                        //    strPropertyValue = lstrPropertyValExt;
        //                                                        //}
        //                                                        //else
        //                                                        //{
        //                                                        //    strPropertyValue = string.Empty;
        //                                                        //}
        //                                                    }
        //                                                }
        //                                                catch (Exception exExt)
        //                                                {
        //                                                    strPropertyValue = string.Empty;
        //                                                }
        //                                                finally
        //                                                {

        //                                                }


        //                                            }
        //                                            lstrsubstringvalue = strPropertyValue.ToString();
        //                                        }
        //                                    }



        //                                    //for (int k = 0; k < filterinv.Count; k++)
        //                                    //{

        //                                    //    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                    //    try
        //                                    //    {
        //                                    //        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                    //        {
        //                                    //            strPropertyValue = DetailItem.testdata.ToString();
        //                                    //        }
        //                                    //        else
        //                                    //        {
        //                                    //            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                    //        }
        //                                    //    }
        //                                    //    catch (Exception ex)
        //                                    //    {
        //                                    //        //strPropertyValue = string.Empty;
        //                                    //        try
        //                                    //        {
        //                                    //            //string lstrPropertyValExt = string.Empty;


        //                                    //        }
        //                                    //        catch (Exception exExt)
        //                                    //        {
        //                                    //            strPropertyValue = string.Empty;
        //                                    //        }
        //                                    //        finally
        //                                    //        {

        //                                    //        }


        //                                    //    }

        //                                    //    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" & strPropertyValue != null)
        //                                    //    {
        //                                    //        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
        //                                    //        if (isNum)
        //                                    //        {
        //                                    //            lstrqrcodetext = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

        //                                    //        }
        //                                    //        else

        //                                    //            lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                    //    }

        //                                    //    else
        //                                    //    {
        //                                    //        lstrqrcodetext = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                    //    }


        //                                    //}

        //                                    try
        //                                    {
        //                                        if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
        //                                        {
        //                                            foreach (var itemdimension in objtemplatedetailslist)
        //                                            {
        //                                                if (itemdimension.barcodetype != null)
        //                                                {
        //                                                    if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
        //                                                    {
        //                                                        pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

        //                                                        QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

        //                                                        QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

        //                                                        //QrImaageWidth = itemdimension.imgwidth != "" ? ((Convert.ToDouble(itemdimension.imgwidth) / constval)) : 0;
        //                                                        // QrWidth = (int)Math.Round(QrImaageWidth ?? 0, 0);
        //                                                        break;
        //                                                    }
        //                                                }

        //                                            }

        //                                            iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

        //                                            iTextSharp.text.Image img = qrcode.GetImage();

        //                                            img.SetAbsolutePosition(divX, divY);

        //                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                            cb.AddImage(img);
        //                                        }
        //                                    }
        //                                    catch (Exception ex)
        //                                    {

        //                                    }


        //                                } //code qr end
        //                                  //data matrix start
        //                                  //else if (DetailItem.barcodetype.ToString().ToLower() == "datamatrix") //BarcodeType Added upc-A,code 39
        //                                  // {
        //                                  //     iTextSharp.text.pdf.BarcodeDatamatrix bc = new iTextSharp.text.pdf.BarcodeDatamatrix();
        //                                  //     bc.Options = (BarcodeDatamatrix.DM_AUTO);
        //                                  //    // bc.Width = DetailItem.imgwidth != "" ? Convert.ToInt32(DetailItem.imgwidth) : 0;
        //                                  //    // bc.Height = DetailItem.imgheight != "" ? Convert.ToInt32(DetailItem.imgheight) : 0;

        //                                //     for (int k = 0; k < filterinv.Count; k++)
        //                                //     {

        //                                //         PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                //         try
        //                                //         {
        //                                //             if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                //             {
        //                                //                 strPropertyValue = DetailItem.testdata.ToString();
        //                                //             }
        //                                //             else
        //                                //             {
        //                                //                 strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                //             }
        //                                //         }
        //                                //         catch (Exception ex)
        //                                //         {
        //                                //             strPropertyValue = string.Empty;
        //                                //             try
        //                                //             {
        //                                //                 string lstrPropertyValExt = string.Empty;

        //                                //                 foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
        //                                //                 {

        //                                //                     //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                //                     //{
        //                                //                     //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                //                     //    strPropertyValue = lstrPropertyValExt;
        //                                //                     //}
        //                                //                     //else
        //                                //                     //{
        //                                //                     //    strPropertyValue = string.Empty;
        //                                //                     //}
        //                                //                 }
        //                                //             }
        //                                //             catch (Exception exExt)
        //                                //             {
        //                                //                 strPropertyValue = string.Empty;
        //                                //             }
        //                                //             finally
        //                                //             {

        //                                //             }


        //                                //         }
        //                                //         if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
        //                                //         {
        //                                //             isNum = double.TryParse(strPropertyValue.ToString(), out Num);
        //                                //             if (isNum)
        //                                //             {


        //                                //                 try
        //                                //                 {
        //                                //                     returnResult = bc.Generate(Convert.ToDouble(strPropertyValue).ToString("N2"));
        //                                //                 }
        //                                //                 catch (System.IndexOutOfRangeException exp)  // CS0168
        //                                //                 {
        //                                //                     returnResult = 1;
        //                                //                 }

        //                                //             }
        //                                //             else
        //                                //             {

        //                                //                 try
        //                                //                 {
        //                                //                     returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
        //                                //                 }
        //                                //                 catch (System.IndexOutOfRangeException exp)  // CS0168
        //                                //                 {
        //                                //                     returnResult = 1;
        //                                //                 }
        //                                //             }
        //                                //         }
        //                                //         else
        //                                //         {


        //                                //             try
        //                                //             {
        //                                //                 returnResult = bc.Generate(strPropertyValue != null ? strPropertyValue.ToString() : string.Empty);
        //                                //             }
        //                                //             catch (System.IndexOutOfRangeException exp)  // CS0168
        //                                //             {
        //                                //                 returnResult = 1;
        //                                //             }
        //                                //         }

        //                                //     }

        //                                //     try
        //                                //     {
        //                                //         if (returnResult == BarcodeDatamatrix.DM_NO_ERROR)
        //                                //         {
        //                                //             iTextSharp.text.Image img = null;
        //                                //             img = bc.CreateImage();
        //                                //             //img.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
        //                                //             img.ScaleAbsolute((float)ImageNewWidth, (float)ImageNewWidth);
        //                                //             img.SetAbsolutePosition(divX, divY);

        //                                //             img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                //             cb.AddImage(img);

        //                                //         }
        //                                //     }
        //                                //     catch (Exception ex)
        //                                //     {

        //                                //     }

        //                                // }
        //                                //data matrix end
        //                                //upc-a
        //                                else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
        //                                {

        //                                    //Generate UPC-A barcode
        //                                    BarcodeEAN bc = new BarcodeEAN();


        //                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        //                                    //  cb.SetFontAndSize(bf, fontSize);

        //                                    for (int k = 0; k < filterinv.Count; k++)
        //                                    {

        //                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                        try
        //                                        {
        //                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                            {
        //                                                strPropertyValue = DetailItem.testdata.ToString();
        //                                            }
        //                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
        //                                            {
        //                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                            }
        //                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
        //                                            {
        //                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                            }
        //                                            else
        //                                            {

        //                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                            }

        //                                        }
        //                                        catch (Exception ex)
        //                                        {
        //                                            strPropertyValue = string.Empty;
        //                                            try
        //                                            {
        //                                                string lstrPropertyValExt = string.Empty;

        //                                                foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
        //                                                {

        //                                                    //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                    //{
        //                                                    //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                    //    strPropertyValue = lstrPropertyValExt;
        //                                                    //}
        //                                                    //else
        //                                                    //{
        //                                                    //    strPropertyValue = string.Empty;
        //                                                    //}
        //                                                }
        //                                            }
        //                                            catch (Exception exExt)
        //                                            {
        //                                                strPropertyValue = string.Empty;
        //                                            }
        //                                            finally
        //                                            {

        //                                            }


        //                                        }
        //                                        //int lntchecksumdigit;
        //                                        ////Get UPC A code length
        //                                        //if (strPropertyValue.ToString().Trim().Length == 11)
        //                                        //{
        //                                        //    if (GetChecksumDigit(strPropertyValue.ToString().Trim(), out lntchecksumdigit))
        //                                        //    {

        //                                        //        strPropertyValue += lntchecksumdigit.ToString();
        //                                        //        if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
        //                                        //        {
        //                                        //            isNum = double.TryParse(DetailItem.testdata.Trim(), out Num);
        //                                        //            if (isNum)
        //                                        //            {
        //                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        //                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
        //                                        //            }
        //                                        //            else
        //                                        //            {

        //                                        //                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        //                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                        //            }
        //                                        //        }
        //                                        //        else
        //                                        //        {
        //                                        //            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
        //                                        //            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                        //        }


        //                                        //    }
        //                                        //}
        //                                        if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)))
        //                                        {

        //                                            if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
        //                                            {
        //                                                isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
        //                                                if (isNum)
        //                                                {

        //                                                    bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
        //                                                }
        //                                                else
        //                                                {


        //                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                                }
        //                                            }
        //                                            else
        //                                            {

        //                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                            }
        //                                        }

        //                                    }
        //                                    bc.StartStopText = false;

        //                                    bc.CodeType = Barcode.UPCA;
        //                                    bc.Extended = true;
        //                                    try
        //                                    {
        //                                        if (bc.Code != null && bc.Code != string.Empty)
        //                                        {
        //                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                            bc.Size = fontSize;
        //                                            if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
        //                                            {
        //                                                bc.Font = null;
        //                                            }
        //                                            else
        //                                            {
        //                                                if (Convert.ToInt32(DetailItem.DataCharView) == 0)
        //                                                {
        //                                                    bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
        //                                                }
        //                                                else
        //                                                {
        //                                                    bc.Baseline = Convert.ToSingle(fontSize);
        //                                                }
        //                                                switch (Convert.ToInt32(DetailItem.DataCharAlign))
        //                                                {
        //                                                    case 0:
        //                                                        bc.TextAlignment = Element.ALIGN_LEFT;
        //                                                        break;
        //                                                    case 1:
        //                                                        bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                        break;
        //                                                    case 2:
        //                                                        bc.TextAlignment = Element.ALIGN_RIGHT;
        //                                                        break;
        //                                                    default:
        //                                                        bc.TextAlignment = Element.ALIGN_CENTER;
        //                                                        break;
        //                                                }
        //                                            }
        //                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
        //                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
        //                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


        //                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
        //                                            img.SetAbsolutePosition(divX, divY);
        //                                            // img.RotationDegrees = 360;
        //                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                            cb.AddImage(img);
        //                                        }
        //                                    }
        //                                    catch (Exception ex)
        //                                    {

        //                                    }

        //                                }//end upc-a
        //                                else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
        //                                {
        //                                    Barcode39 bc = new Barcode39();

        //                                    bc.TextAlignment = Element.ALIGN_CENTER;

        //                                    // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

        //                                    // cb.SetFontAndSize(bf, fontSize);

        //                                    for (int k = 0; k < filterinv.Count; k++)
        //                                    {
        //                                        string lstrsubstringvalue = string.Empty;
        //                                        StringBuilder checkQuickBooksvalue = new StringBuilder();

        //                                        if (!string.IsNullOrEmpty(DetailItem.delimiter))
        //                                        {
        //                                            dsdatasource = new List<string>();
        //                                            int staticVal = 0;
        //                                            string chart = DetailItem.delimiter;
        //                                            string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
        //                                            dsdatasource = charArr.Split('~').ToList();
        //                                            foreach (var dsitem in dsdatasource)
        //                                            {
        //                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                                try
        //                                                {
        //                                                    if (dsitem.ToString().ToLower() == "static")
        //                                                    {
        //                                                        strPropertyValue = DetailItem.testdata.ToString();
        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "Static1".ToLower())
        //                                                    {
        //                                                        string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
        //                                                        var ddatasourceStatic = charStatic.Split('~').ToList();
        //                                                        int loopStatic = 0;
        //                                                        foreach (var fieldVal in ddatasourceStatic)
        //                                                        {
        //                                                            var Itemstatic = fieldVal.Split('∬');
        //                                                            if (Itemstatic.Length > 1)
        //                                                            {
        //                                                                if (loopStatic == staticVal)
        //                                                                {
        //                                                                    strPropertyValue = Itemstatic[1];
        //                                                                    staticVal = staticVal + 1;
        //                                                                    break;
        //                                                                }
        //                                                                loopStatic = loopStatic + 1;
        //                                                            }

        //                                                        }

        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
        //                                                    {
        //                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                                    }
        //                                                    else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
        //                                                    {
        //                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                                    }
        //                                                }
        //                                                catch (Exception ex)
        //                                                {
        //                                                    strPropertyValue = string.Empty;
        //                                                    try
        //                                                    {
        //                                                        string lstrPropertyValExt = string.Empty;

        //                                                        foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
        //                                                        {

        //                                                            //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                            //{
        //                                                            //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                            //    strPropertyValue = lstrPropertyValExt;
        //                                                            //}
        //                                                            //else
        //                                                            //{
        //                                                            //    strPropertyValue = string.Empty;
        //                                                            //}
        //                                                        }
        //                                                    }
        //                                                    catch (Exception exExt)
        //                                                    {
        //                                                        strPropertyValue = string.Empty;
        //                                                    }
        //                                                    finally
        //                                                    {

        //                                                    }


        //                                                }
        //                                                if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
        //                                                {
        //                                                    checkQuickBooksvalue.Append(strPropertyValue);
        //                                                    checkQuickBooksvalue.Append(chart);
        //                                                }
        //                                            }
        //                                            strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

        //                                        }
        //                                        else
        //                                        {
        //                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                            try
        //                                            {
        //                                                if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                                {
        //                                                    strPropertyValue = DetailItem.testdata.ToString();
        //                                                }
        //                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                                }
        //                                                else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                                }
        //                                                else
        //                                                {
        //                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                                }
        //                                            }
        //                                            catch (Exception ex)
        //                                            {
        //                                                strPropertyValue = string.Empty;
        //                                                try
        //                                                {
        //                                                    string lstrPropertyValExt = string.Empty;

        //                                                    foreach (QBLC.clsInvoiceLine customfield in objdatasource) //Read item custom field value
        //                                                    {

        //                                                        //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                        //{
        //                                                        //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                        //    strPropertyValue = lstrPropertyValExt;
        //                                                        //}
        //                                                        //else
        //                                                        //{
        //                                                        //    strPropertyValue = string.Empty;
        //                                                        //}
        //                                                    }
        //                                                }
        //                                                catch (Exception exExt)
        //                                                {
        //                                                    strPropertyValue = string.Empty;
        //                                                }
        //                                                finally
        //                                                {

        //                                                }


        //                                            }
        //                                        }


        //                                        if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
        //                                        {
        //                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
        //                                            if (isNum)
        //                                            {
        //                                                //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
        //                                            }
        //                                            else
        //                                            {
        //                                                //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                            }
        //                                        }
        //                                        else
        //                                        {
        //                                            //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
        //                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
        //                                        }

        //                                    } //for end

        //                                    bc.StartStopText = false;


        //                                    bc.Extended = true;
        //                                    try
        //                                    {
        //                                        if (bc.Code != null && bc.Code != string.Empty)
        //                                        {
        //                                            bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                            bc.Size = fontSize;
        //                                            bc.Baseline = fontSize;
        //                                            bc.X = Convert.ToSingle(DetailItem.imgwidth);
        //                                            iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
        //                                            iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

        //                                            img.ScaleAbsolute(img.Width, (float)ImageHeight);
        //                                            img.SetAbsolutePosition(divX, divY);

        //                                            img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
        //                                            cb.AddImage(img);
        //                                        }
        //                                    }
        //                                    catch (Exception ex)
        //                                    {

        //                                    }


        //                                }

        //                            }
        //                            else //Field Type is Text Field
        //                            {

        //                                cb.BeginText();
        //                                // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        //                                // cb.SetFontAndSize(bf, fontSize);
        //                                if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
        //                                {
        //                                    if (Convert.ToBoolean(DetailItem.fontbold) == true)
        //                                    {
        //                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
        //                                    }
        //                                    else
        //                                    {
        //                                        cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
        //                                    }

        //                                }
        //                                else
        //                                {
        //                                    cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
        //                                }
        //                                cb.SetTextMatrix(divX, divY);

        //                                for (int k = 0; k < filterinv.Count; k++)
        //                                {
        //                                    string lstrsubstringvalue = string.Empty;
        //                                    StringBuilder checkQuickBooksvalue = new StringBuilder();

        //                                    if (!string.IsNullOrEmpty(DetailItem.delimiter))
        //                                    {
        //                                        dsdatasource = new List<string>();
        //                                        int staticVal = 0;
        //                                        string chart = DetailItem.delimiter;
        //                                        string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
        //                                        dsdatasource = charArr.Split('~').ToList();
        //                                        foreach (var dsitem in dsdatasource)
        //                                        {
        //                                            PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                            try
        //                                            {
        //                                                if (dsitem.ToString().ToLower() == "static")
        //                                                {
        //                                                    strPropertyValue = DetailItem.testdata.ToString();
        //                                                }
        //                                                else if (dsitem.ToString().ToLower() == "Static1".ToLower())
        //                                                {
        //                                                    string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
        //                                                    var ddatasourceStatic = charStatic.Split('~').ToList();
        //                                                    int loopStatic = 0;
        //                                                    foreach (var fieldVal in ddatasourceStatic)
        //                                                    {
        //                                                        var Itemstatic = fieldVal.Split('∬');
        //                                                        if (Itemstatic.Length > 1)
        //                                                        {
        //                                                            if (loopStatic == staticVal)
        //                                                            {
        //                                                                strPropertyValue = Itemstatic[1];
        //                                                                staticVal = staticVal + 1;
        //                                                                break;
        //                                                            }
        //                                                            loopStatic = loopStatic + 1;
        //                                                        }

        //                                                    }

        //                                                }
        //                                                else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                                }
        //                                                else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
        //                                                {
        //                                                    strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                                }
        //                                                else
        //                                                {
        //                                                    strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                                }
        //                                            }
        //                                            catch (Exception ex)
        //                                            {
        //                                                strPropertyValue = string.Empty;
        //                                                try
        //                                                {
        //                                                    string lstrPropertyValExt = string.Empty;

        //                                                    if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
        //                                                    {
        //                                                        lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
        //                                                        strPropertyValue = lstrPropertyValExt;
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        strPropertyValue = string.Empty;
        //                                                    }


        //                                                    // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
        //                                                    // {

        //                                                    //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                    //{
        //                                                    //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                    //    strPropertyValue = lstrPropertyValExt;
        //                                                    //}
        //                                                    //else
        //                                                    //{
        //                                                    //    strPropertyValue = string.Empty;
        //                                                    //}
        //                                                    // }
        //                                                }
        //                                                catch (Exception exExt)
        //                                                {
        //                                                    strPropertyValue = string.Empty;
        //                                                }
        //                                                finally
        //                                                {

        //                                                }


        //                                            }
        //                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
        //                                            {
        //                                                checkQuickBooksvalue.Append(strPropertyValue);
        //                                                checkQuickBooksvalue.Append(chart);
        //                                            }
        //                                        }
        //                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

        //                                    }
        //                                    else
        //                                    {
        //                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
        //                                        try
        //                                        {
        //                                            if (DetailItem.datasourcetext.ToString().ToLower() == "static")
        //                                            {
        //                                                strPropertyValue = DetailItem.testdata.ToString();
        //                                            }
        //                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
        //                                            {
        //                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
        //                                            }
        //                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
        //                                            {
        //                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
        //                                            }
        //                                            else
        //                                            {
        //                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
        //                                            }
        //                                        }
        //                                        catch (Exception ex)
        //                                        {
        //                                            strPropertyValue = string.Empty;
        //                                            try
        //                                            {
        //                                                string lstrPropertyValExt = string.Empty;

        //                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
        //                                                {
        //                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
        //                                                    strPropertyValue = lstrPropertyValExt;
        //                                                }
        //                                                else
        //                                                {
        //                                                    strPropertyValue = string.Empty;
        //                                                }


        //                                                // foreach (QBLC.clsPurchaseOrderLine customfield in objdatasource) //Read p.o. custom field value
        //                                                // {

        //                                                //if (customfield.CustomItem.ContainsKey(DetailItem.datasource.ToString().Trim().ToUpper()))
        //                                                //{
        //                                                //    customfield.CustomItem.TryGetValue(DetailItem.datasource.ToString().Trim().ToUpper(), out lstrPropertyValExt);
        //                                                //    strPropertyValue = lstrPropertyValExt;
        //                                                //}
        //                                                //else
        //                                                //{
        //                                                //    strPropertyValue = string.Empty;
        //                                                //}
        //                                                // }
        //                                            }
        //                                            catch (Exception exExt)
        //                                            {
        //                                                strPropertyValue = string.Empty;
        //                                            }
        //                                            finally
        //                                            {

        //                                            }


        //                                        }
        //                                    }


        //                                    if (DetailItem.datasourcetext.ToLower() == "salesprice")
        //                                    {
        //                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
        //                                        if (isNum)
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                        else
        //                                        {
        //                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                        }
        //                                    }
        //                                    else if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
        //                                    {
        //                                        wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

        //                                        string[] stringSeparators = new string[] { "\r\n" };
        //                                        string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
        //                                        if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
        //                                        {
        //                                            xplus = 0;
        //                                            yminus = 0;
        //                                            foreach (string splitline in lines)
        //                                            {
        //                                                //s.Replace("\n", "");

        //                                                if (!string.IsNullOrWhiteSpace(splitline))
        //                                                {
        //                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

        //                                                }
        //                                                xplus += 05;
        //                                                yminus += 08;

        //                                            }
        //                                        }
        //                                        else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
        //                                        {
        //                                            xplus = 0;
        //                                            yminus = 0;
        //                                            foreach (string splitline in lines)
        //                                            {
        //                                                if (!string.IsNullOrWhiteSpace(splitline))
        //                                                {
        //                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                }
        //                                                xplus += 08;
        //                                                yminus += 06;

        //                                            }

        //                                        }
        //                                        else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
        //                                        {
        //                                            xplus = 18;
        //                                            yminus = 0;
        //                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
        //                                            {
        //                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
        //                                                {
        //                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
        //                                                    lobjLabelConnectorSettings.Show();
        //                                                    lobjLabelConnectorSettings.Hide();
        //                                                    string textHeight = lobjLabelConnectorSettings.valH;
        //                                                    divY = divY + (Convert.ToInt16(textHeight) / 4f);
        //                                                    lobjLabelConnectorSettings.Close();
        //                                                    yminus = 0;
        //                                                }
        //                                            }
        //                                            foreach (string splitline in lines)
        //                                            {
        //                                                if (!string.IsNullOrWhiteSpace(splitline))
        //                                                {
        //                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                }
        //                                                xplus += Convert.ToInt32(DetailItem.fontsize);
        //                                                yminus += 00;

        //                                            }

        //                                        }
        //                                        else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
        //                                        {
        //                                            xplus = -2;
        //                                            yminus = 0;
        //                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
        //                                            {
        //                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
        //                                                {
        //                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
        //                                                    lobjLabelConnectorSettings.Show();
        //                                                    lobjLabelConnectorSettings.Hide();
        //                                                    string textHeight = lobjLabelConnectorSettings.valW;
        //                                                    divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
        //                                                    lobjLabelConnectorSettings.Close();
        //                                                    yminus = 0;

        //                                                }
        //                                            }
        //                                            Array.Reverse(lines);
        //                                            foreach (string splitline in lines)
        //                                            {
        //                                                if (!string.IsNullOrWhiteSpace(splitline))
        //                                                {
        //                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                }
        //                                                xplus += 00;
        //                                                yminus += Convert.ToInt32(DetailItem.fontsize);

        //                                            }

        //                                        }
        //                                        else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
        //                                        {
        //                                            xplus = 18;
        //                                            yminus = 0;
        //                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
        //                                            {
        //                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
        //                                                {
        //                                                    xplus = 18;
        //                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
        //                                                    lobjLabelConnectorSettings.Show();
        //                                                    lobjLabelConnectorSettings.Hide();
        //                                                    string textHeight = lobjLabelConnectorSettings.valH;
        //                                                    divY = divY - (Convert.ToInt16(textHeight) / 4f);
        //                                                    lobjLabelConnectorSettings.Close();
        //                                                    yminus = 5;

        //                                                }
        //                                            }
        //                                            //Array.Reverse(lines);
        //                                            foreach (string splitline in lines)
        //                                            {
        //                                                if (!string.IsNullOrWhiteSpace(splitline))
        //                                                {
        //                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                }
        //                                                xplus += Convert.ToInt32(DetailItem.fontsize);
        //                                                yminus += 00;

        //                                            }

        //                                        }
        //                                        else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
        //                                        {
        //                                            xplus = 0;
        //                                            yminus = 0;
        //                                            foreach (string splitline in lines)
        //                                            {
        //                                                if (!string.IsNullOrWhiteSpace(splitline))
        //                                                {
        //                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                }
        //                                                xplus += 07;
        //                                                yminus += 07;

        //                                            }
        //                                        }
        //                                        else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
        //                                        {
        //                                            xplus = 0;
        //                                            yminus = 0;
        //                                            if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
        //                                            {
        //                                                if (Convert.ToInt16(DetailItem.textAlign) == 1)
        //                                                {
        //                                                    LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
        //                                                    lobjLabelConnectorSettings.Show();
        //                                                    lobjLabelConnectorSettings.Hide();
        //                                                    string textHeight = lobjLabelConnectorSettings.valW;
        //                                                    divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
        //                                                    lobjLabelConnectorSettings.Close();
        //                                                    yminus = -3;

        //                                                }
        //                                            }
        //                                            foreach (string splitline in lines)
        //                                            {
        //                                                if (!string.IsNullOrWhiteSpace(splitline))
        //                                                {
        //                                                    cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                                }
        //                                                xplus += 00;
        //                                                yminus += Convert.ToInt32(DetailItem.fontsize);

        //                                            }
        //                                        }


        //                                    }
        //                                    //for line break description by ;,
        //                                    //else if (!string.IsNullOrWhiteSpace(DetailItem.linebreak) || Convert.ToInt32(DetailItem.orientation) > 0 && strPropertyValue != null)
        //                                    //{

        //                                    //    wraptext = LineBreakByChar(Regex.Replace(Convert.ToString(strPropertyValue), @"\s", ""), Convert.ToString(DetailItem.linebreak), fontSize);

        //                                    //    string[] stringSeparators = new string[] { "\r\n" };
        //                                    //    string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);

        //                                    //    if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
        //                                    //    {
        //                                    //        xplus = 0;
        //                                    //        yminus = 0;
        //                                    //        foreach (string splitline in lines)
        //                                    //        {
        //                                    //            //s.Replace("\n", "");

        //                                    //            if (!string.IsNullOrWhiteSpace(splitline))
        //                                    //            {
        //                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                    //            }
        //                                    //            xplus += 05;
        //                                    //            yminus += 08;

        //                                    //        }
        //                                    //    }
        //                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
        //                                    //    {
        //                                    //        xplus = 0;
        //                                    //        yminus = 0;
        //                                    //        foreach (string splitline in lines)
        //                                    //        {
        //                                    //            if (!string.IsNullOrWhiteSpace(splitline))
        //                                    //            {
        //                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                    //            }
        //                                    //            xplus += 08;
        //                                    //            yminus += 06;

        //                                    //        }

        //                                    //    }
        //                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
        //                                    //    {
        //                                    //        xplus = 0;
        //                                    //        yminus = 0;
        //                                    //        foreach (string splitline in lines)
        //                                    //        {
        //                                    //            if (!string.IsNullOrWhiteSpace(splitline))
        //                                    //            {
        //                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                    //            }
        //                                    //            xplus += 09;
        //                                    //            yminus += 00;

        //                                    //        }

        //                                    //    }
        //                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
        //                                    //    {
        //                                    //        xplus = 0;
        //                                    //        yminus = 0;
        //                                    //        Array.Reverse(lines);
        //                                    //        foreach (string splitline in lines)
        //                                    //        {
        //                                    //            if (!string.IsNullOrWhiteSpace(splitline))
        //                                    //            {
        //                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                    //            }
        //                                    //            xplus += 00;
        //                                    //            yminus += 09;

        //                                    //        }

        //                                    //    }
        //                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
        //                                    //    {
        //                                    //        xplus = 0;
        //                                    //        yminus = 0;
        //                                    //        //Array.Reverse(lines);
        //                                    //        foreach (string splitline in lines)
        //                                    //        {
        //                                    //            if (!string.IsNullOrWhiteSpace(splitline))
        //                                    //            {
        //                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

        //                                    //            }
        //                                    //            xplus += 10;
        //                                    //            yminus += 00;

        //                                    //        }

        //                                    //    }
        //                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
        //                                    //    {
        //                                    //        xplus = 0;
        //                                    //        yminus = 0;
        //                                    //        foreach (string splitline in lines)
        //                                    //        {
        //                                    //            if (!string.IsNullOrWhiteSpace(splitline))
        //                                    //            {
        //                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
        //                                    //            }
        //                                    //            xplus += 07;
        //                                    //            yminus += 07;

        //                                    //        }
        //                                    //    }
        //                                    //    else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
        //                                    //    {
        //                                    //        xplus = 0;
        //                                    //        yminus = 0;
        //                                    //        foreach (string splitline in lines)
        //                                    //        {
        //                                    //            if (!string.IsNullOrWhiteSpace(splitline))
        //                                    //            {
        //                                    //                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);


        //                                    //            }
        //                                    //            xplus += 00;
        //                                    //            yminus += 12;

        //                                    //        }
        //                                    //    }



        //                                    //}
        //                                    else
        //                                    {
        //                                        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
        //                                    }

        //                                }

        //                                cb.EndText();

        //                            }//end text type

        //                        } //end of foreach
        //                          // printquantity++;
        //                          //new page
        //                          // doc.NewPage();


        //                        //  }// end of while

        //                    }

        //                    doc.Close();
        //                    writer.Close();

        //                    //convert pdf to image
        //                    if (objtemplatedetailslist.Count > 0)
        //                    {
        //                        //convert inches to pixel
        //                        fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

        //                        fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

        //                        ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName);

        //                    }
        //                }
        //                catch (Exception ex)
        //                {

        //                }

        //                // return strfilename;


        //            }

        //            catch (System.Exception ex)
        //            {

        //            }
        //            finally
        //            {


        //            }

        //            //print image
        //            filePath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff";

        //            PrintDateRangeUDFLabel(filePath, Convert.ToInt32(inv.SalesOrderLineQuantity), pstrprintername);
        //            if(inv.SalesOrderLineItemRefFullName == lobjQBConfiguration.GetLabelConfigSettings("endofProduction").ToString())
        //            {
        //                return strfilename;

        //            }
        //        } //end if 


        //    } //end of item loop foreach
        //    return strfilename;
        //}

        public string GetSalesOrderUDFFilterOrders(string Invsearchno, string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrprintername, List<Dictionary<string, string>> lobjDataExtension1, string PrinterName)
        {
            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            string filePath = string.Empty;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;
            int QrWidth = 0;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            List<QBLC.clsSalesOrderLine> filterinv = null;
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            foreach (QBLC.clsSalesOrderLine inv in objdatasource)
            {

                filterinv = new List<QBLC.clsSalesOrderLine>();
                if (inv.RefNumber.Trim() == Invsearchno.Trim())
                {
                    if (File.Exists(strpdfpath))
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(strpdfpath);

                    }
                    if (File.Exists(strpdfImgStartupPath))
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                    }

                    QBLC.clsSalesOrderLine objclsSalesOrderLine = null;

                    object strPropertyValue = null;
                    Type objClsType;

                    try
                    {

                        filterinv.Add(inv);

                        objclsSalesOrderLine = new QBLC.clsSalesOrderLine();

                        objClsType = objclsSalesOrderLine.GetType();

                        try
                        {
                            Dictionary<string, string> lobjDataExtension = new Dictionary<string, string>();

                            foreach (Dictionary<string, string> objcustfield in lobjDataExtension1)
                            {
                                var keyValuePair = objcustfield.Single(x => x.Key == "refnumber");
                                string value = keyValuePair.Value;
                                string[] val = value.Split('&');

                                if (Convert.ToString(val[0]) == inv.RefNumber && Convert.ToString(val[1]) == inv.SalesOrderLineTxnLineID)
                                {
                                    lobjDataExtension = objcustfield;
                                }
                            }


                            QBLC.clsSalesOrderLine objclsSalesOrderItemDetails = null;

                            objclsSalesOrderItemDetails = new QBLC.clsSalesOrderLine();

                            objClsType = objclsSalesOrderItemDetails.GetType();

                            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                            fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                            fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                            var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                            doc.Open();

                            PdfContentByte cb = writer.DirectContent;


                            //****Start **** code for border
                            var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                            pageBorderRect.Left += doc.LeftMargin;
                            pageBorderRect.Right -= doc.RightMargin;
                            pageBorderRect.Top -= doc.TopMargin;
                            pageBorderRect.Bottom += doc.BottomMargin;

                            //****Start **** code for Barcode

                            if (objtemplatedetailslist.Count > 0)
                            {

                                foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist) //btformat field
                                {
                                    divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                                    divY = (Convert.ToSingle(DetailItem.yposition) / constval);

                                    fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;

                                    ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                                    ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                                    ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                                    if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                                    {
                                        if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                        {
                                            //insert image to pdf at x,y location
                                            if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                        {
                                            Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                            //Resize image depend upon your need
                                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);


                                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                            imageinsert.SetAbsolutePosition(divX, divY);
                                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(imageinsert);
                                        }
                                        else
                                        {
                                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                            //Resize image depend upon your need
                                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                            imageinsert.SetAbsolutePosition(divX, divY);
                                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(imageinsert);
                                        }
                                        }
                                        else
                                        {
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                            string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                            if (File.Exists(Imagepath))
                                            {
                                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                                imageinsert.SetAbsolutePosition(divX, divY);
                                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                                cb.AddImage(imageinsert);
                                            }
                                        }
                                    }
                                    else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                                    {

                                        if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                        {
                                            iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                            bc.TextAlignment = Element.ALIGN_CENTER;


                                            for (int k = 0; k < filterinv.Count; k++)
                                            {
                                                string lstrsubstringvalue = string.Empty;
                                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                                {
                                                    dsdatasource = new List<string>();
                                                    int staticVal = 0;
                                                    string chart = DetailItem.delimiter;
                                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                    dsdatasource = charArr.Split('~').ToList();
                                                    foreach (var dsitem in dsdatasource)
                                                    {
                                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                        try
                                                        {
                                                            if (dsitem.ToString().ToLower() == "static")
                                                            {
                                                                strPropertyValue = DetailItem.testdata.ToString();
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                            {
                                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                                int loopStatic = 0;
                                                                foreach (var fieldVal in ddatasourceStatic)
                                                                {
                                                                    var Itemstatic = fieldVal.Split('∬');
                                                                    if (Itemstatic.Length > 1)
                                                                    {
                                                                        if (loopStatic == staticVal)
                                                                        {
                                                                            strPropertyValue = Itemstatic[1];
                                                                            staticVal = staticVal + 1;
                                                                            break;
                                                                        }
                                                                        loopStatic = loopStatic + 1;
                                                                    }

                                                                }

                                                            }
                                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            try
                                                            {
                                                                string lstrPropertyValExt = string.Empty;
                                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                                {
                                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                                {
                                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }

                                                            }
                                                            catch (Exception exExt)
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                            finally
                                                            {

                                                            }

                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                                }
                                                else
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                            if (isNum)
                                                            {
                                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = strPropertyValue.ToString();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                }


                                                if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                                {
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {


                                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                    }
                                                    else
                                                    {

                                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    }
                                                }
                                                else
                                                {


                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }

                                            }
                                            bc.StartStopText = false;

                                            bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                            bc.ChecksumText = true;
                                            bc.GenerateChecksum = true;
                                            bc.Extended = true;
                                            try
                                            {
                                                if (bc.Code != null && bc.Code != string.Empty)
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    bc.Baseline = fontSize;
                                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                    img.SetAbsolutePosition(divX, divY);

                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }

                                        } //code 128 end
                                          //QR code print
                                        else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                        {
                                            string lstrqrcodetext = string.Empty;
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();
                                            for (int k = 0; k < filterinv.Count; k++)
                                            {
                                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                                {
                                                    dsdatasource = new List<string>();
                                                    int staticVal = 0;
                                                    string chart = DetailItem.delimiter;
                                                    string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                    dsdatasource = charArr1.Split('~').ToList();
                                                    foreach (var dsitem in dsdatasource)
                                                    {
                                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                        try
                                                        {
                                                            if (dsitem.ToString().ToLower() == "static")
                                                            {
                                                                strPropertyValue = DetailItem.testdata.ToString();
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                            {
                                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                                int loopStatic = 0;
                                                                foreach (var fieldVal in ddatasourceStatic)
                                                                {
                                                                    var Itemstatic = fieldVal.Split('∬');
                                                                    if (Itemstatic.Length > 1)
                                                                    {
                                                                        if (loopStatic == staticVal)
                                                                        {
                                                                            strPropertyValue = Itemstatic[1];
                                                                            staticVal = staticVal + 1;
                                                                            break;
                                                                        }
                                                                        loopStatic = loopStatic + 1;
                                                                    }

                                                                }

                                                            }
                                                            else if (dsitem.ToString().ToLower() == "timestamp")
                                                            {
                                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                            }
                                                            else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)objdatasource[k], null);
                                                            }
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }

                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            //custom field print
                                                            try
                                                            {
                                                                string lstrPropertyValExt = string.Empty;


                                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                                {
                                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                                {
                                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }

                                                            }
                                                            catch (Exception exExt)
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                            finally
                                                            {

                                                            }

                                                        }
                                                    }
                                                    lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                                }
                                                else
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                            if (isNum)
                                                            {
                                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = strPropertyValue.ToString();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                    lstrsubstringvalue = strPropertyValue.ToString();
                                                }
                                            }



                                            try
                                            {
                                                if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                                {
                                                    foreach (var itemdimension in objtemplatedetailslist)
                                                    {
                                                        if (itemdimension.barcodetype != null)
                                                        {
                                                            if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                            {
                                                                pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                                QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                                QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel


                                                                break;
                                                            }
                                                        }

                                                    }

                                                    iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                                    iTextSharp.text.Image img = qrcode.GetImage();

                                                    img.SetAbsolutePosition(divX, divY);

                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }


                                        }
                                        else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                        {

                                            //Generate UPC-A barcode
                                            BarcodeEAN bc = new BarcodeEAN();


                                            for (int k = 0; k < filterinv.Count; k++)
                                            {

                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();
                                                        }
                                                    }
                                                    else
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                                strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                                if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                                {

                                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                                    {
                                                        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                                        if (isNum)
                                                        {

                                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                        }
                                                        else
                                                        {


                                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                        }
                                                    }
                                                    else
                                                    {

                                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    }
                                                }

                                            }
                                            bc.StartStopText = false;

                                            bc.CodeType = Barcode.UPCA;
                                            bc.Extended = true;
                                            try
                                            {
                                                if (bc.Code != null && bc.Code != string.Empty)
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                                    {
                                                        bc.Font = null;
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                        {
                                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                        }
                                                        else
                                                        {
                                                            bc.Baseline = Convert.ToSingle(fontSize);
                                                        }
                                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                        {
                                                            case 0:
                                                                bc.TextAlignment = Element.ALIGN_LEFT;
                                                                break;
                                                            case 1:
                                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                                break;
                                                            case 2:
                                                                bc.TextAlignment = Element.ALIGN_RIGHT;
                                                                break;
                                                            default:
                                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                                break;
                                                        }
                                                    }
                                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                    img.SetAbsolutePosition(divX, divY);
                                                    // img.RotationDegrees = 360;
                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }

                                        }//end upc-a
                                        else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                        {
                                            Barcode39 bc = new Barcode39();

                                            bc.TextAlignment = Element.ALIGN_CENTER;



                                            for (int k = 0; k < filterinv.Count; k++)
                                            {
                                                string lstrsubstringvalue = string.Empty;
                                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                                {
                                                    dsdatasource = new List<string>();
                                                    int staticVal = 0;
                                                    string chart = DetailItem.delimiter;
                                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                    dsdatasource = charArr.Split('~').ToList();
                                                    foreach (var dsitem in dsdatasource)
                                                    {
                                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                        try
                                                        {
                                                            if (dsitem.ToString().ToLower() == "static")
                                                            {
                                                                strPropertyValue = DetailItem.testdata.ToString();
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                            {
                                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                                int loopStatic = 0;
                                                                foreach (var fieldVal in ddatasourceStatic)
                                                                {
                                                                    var Itemstatic = fieldVal.Split('∬');
                                                                    if (Itemstatic.Length > 1)
                                                                    {
                                                                        if (loopStatic == staticVal)
                                                                        {
                                                                            strPropertyValue = Itemstatic[1];
                                                                            staticVal = staticVal + 1;
                                                                            break;
                                                                        }
                                                                        loopStatic = loopStatic + 1;
                                                                    }

                                                                }

                                                            }
                                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            try
                                                            {
                                                                string lstrPropertyValExt = string.Empty;

                                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                                {
                                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                                {
                                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }

                                                            }
                                                            catch (Exception exExt)
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                            finally
                                                            {

                                                            }


                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                                }
                                                else
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                            if (isNum)
                                                            {
                                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = strPropertyValue.ToString();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                }


                                                if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                                {
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {

                                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                    }
                                                    else
                                                    {

                                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    }
                                                }
                                                else
                                                {

                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }

                                            } //for end

                                            bc.StartStopText = false;


                                            bc.Extended = true;
                                            try
                                            {
                                                if (bc.Code != null && bc.Code != string.Empty)
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    bc.Baseline = fontSize;
                                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                    img.SetAbsolutePosition(divX, divY);

                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }


                                        }

                                    }
                                    else //Field Type is Text Field
                                    {

                                        cb.BeginText();

                                        if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                        {
                                            if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                            {
                                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                            }
                                            else
                                            {
                                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                            }

                                        }
                                        else
                                        {
                                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                        }
                                        cb.SetTextMatrix(divX, divY);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();

                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }


                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }
                                                }
                                                strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);

                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {
                                                        strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //if (objPropertyInfo != null)
                                                        //{
                                                            strPropertyValue = objPropertyInfo.GetValue((QBLC.clsSalesOrderLine)filterinv[k], null);
                                                        //}
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }


                                                }
                                            }


                                            //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            //{
                                            //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            //    if (isNum)
                                            //    {
                                            //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            //    }
                                            //    else
                                            //    {
                                            //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            //    }
                                            //}
                                            if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                            {
                                                wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                                string[] stringSeparators = new string[] { "\r\n" };
                                                string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                                if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    foreach (string splitline in lines)
                                                    {
                                                        //s.Replace("\n", "");

                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                        }
                                                        xplus += 05;
                                                        yminus += 08;

                                                    }
                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 08;
                                                        yminus += 06;

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                                {
                                                    xplus = 18;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valH;
                                                            divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = 0;
                                                        }
                                                    }
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                                        yminus += 00;

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                                {
                                                    xplus = -2;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valW;
                                                            divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = 0;

                                                        }
                                                    }
                                                    Array.Reverse(lines);
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 00;
                                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                                {
                                                    xplus = 18;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            xplus = 18;
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valH;
                                                            divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = 5;

                                                        }
                                                    }

                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                                        yminus += 00;

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 07;
                                                        yminus += 07;

                                                    }
                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valW;
                                                            divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = -3;

                                                        }
                                                    }
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 00;
                                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                                    }
                                                }


                                            }

                                            else
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            }

                                        }

                                        cb.EndText();

                                    }//end text type

                                }
                            }

                            doc.Close();
                            writer.Close();


                            //convert pdf to image
                            if (objtemplatedetailslist.Count > 0)
                            {
                                //convert inches to pixel
                                fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                                fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                                ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName);

                            }
                        }
                        catch (Exception ex)
                        {

                        }
                    }

                    catch (System.Exception ex)
                    {

                    }
                    finally
                    {


                    }

                    //print image
                   
                        filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");

                        PrintDateRangeUDFLabel(filePath, Convert.ToInt32(inv.SalesOrderLineQuantity), pstrprintername);
                
                    if (inv.SalesOrderLineItemRefFullName == lobjQBConfiguration.GetLabelConfigSettings("endofProduction").ToString())
                    {
                        return strfilename;

                    }
                } //end if 


            } //end of item loop foreach
            return strfilename;
        }
        public string GetSalesReceiptUDFFilterOrders(string Invsearchno, string Templatename, string templateheaderwidth, string templateheaderheight, string TransType, List<clsTemplateLabelXmlwork> objtemplatedetailslist, ArrayList objdatasource, string pstrprintername, List<Dictionary<string, string>> lobjDataExtension1, string PrinterName)
        {
            float fltWidth = '0';
            float fltHeight = '0';
            float fltImgWidth = '0';
            float fltImgHeight = '0';
            float? ImageNewWidth;
            float constval = (float)0.010416; ;//(float)0.014;
            float divX;
            float divY;
            float fontSize;
            float? ImageHeight;
            float? ImageWidth;
            string path = string.Empty;
            string strfilename = string.Empty;
            string wraptext = string.Empty;
            int returnResult = 0;
            double? QrImaageWidth;
            double Num;
            double pintwidth = 0;
            string datasourcevalue = string.Empty;
            string filePath = string.Empty;
            bool isNum;
            float xplus = '0';
            float yminus = '0';
            string strpdfImgStartupPath = string.Empty;
            string strpdfpath = string.Empty;
            List<string> dsdatasource = null;
            int QrWidth = 0;
            QBConfiguration lobjQBConfiguration = new QBConfiguration();
            List<clsSalesReceiptLineItems> filterinv = null;
            strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");
            strpdfpath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");
            foreach (clsSalesReceiptLineItems inv in objdatasource)
            {

                filterinv = new List<clsSalesReceiptLineItems>();
                if (inv.RefNumber.Trim() == Invsearchno.Trim())
                {
                    if (File.Exists(strpdfpath))
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(strpdfpath);

                    }
                    if (File.Exists(strpdfImgStartupPath))
                    {
                        System.GC.Collect();
                        System.GC.WaitForPendingFinalizers();
                        File.Delete(strpdfImgStartupPath); //delete pdfprintimage file
                    }
                    // pdfImageDelete(Templatename);

                    clsSalesReceiptLineItems objclsSalesReceiptLine = null;

                    object strPropertyValue = null;
                    Type objClsType;

                    try
                    {

                        filterinv.Add(inv);

                        Dictionary<string, string> lobjDataExtension = new Dictionary<string, string>();

                        foreach (Dictionary<string, string> objcustfield in lobjDataExtension1)
                        {
                            var keyValuePair = objcustfield.Single(x => x.Key == "refnumber");
                            string value = keyValuePair.Value;
                            string[] val = value.Split('&');

                            if (Convert.ToString(val[0]) == inv.RefNumber && Convert.ToString(val[1]) == inv.SalesReceiptLineTxnLineID)
                            {
                                lobjDataExtension = objcustfield;
                            }
                        }

                        //printing logic start

                        objclsSalesReceiptLine = new clsSalesReceiptLineItems();

                        objClsType = objclsSalesReceiptLine.GetType();
                        //i = 1;
                        //print pdf
                        try
                        {

                            clsSalesReceiptLineItems objclsSalesReceiptItemDetails = null;
                            //Type objClsType;
                            // object strPropertyValue = null;

                            objclsSalesReceiptItemDetails = new clsSalesReceiptLineItems();

                            objClsType = objclsSalesReceiptItemDetails.GetType();

                            path = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint" + "\\" + Templatename + ".pdf");


                            if (!Directory.Exists(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint")))
                                Directory.CreateDirectory(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLPrint"));

                            fltWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                            fltHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;


                            var doc = new Document(new iTextSharp.text.Rectangle(fltWidth, fltHeight), 0f, 0f, 0f, 0f);


                            PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(path, FileMode.Create));

                            doc.Open();

                            PdfContentByte cb = writer.DirectContent;


                            //****Start **** code for border
                            var pageBorderRect = new iTextSharp.text.Rectangle(doc.PageSize);

                            pageBorderRect.Left += doc.LeftMargin;
                            pageBorderRect.Right -= doc.RightMargin;
                            pageBorderRect.Top -= doc.TopMargin;
                            pageBorderRect.Bottom += doc.BottomMargin;


                            //****Start **** code for Barcode
                            // int printquantity = 0;
                            //Loop through Template Field Names
                            if (objtemplatedetailslist.Count > 0)
                            {
                                // while (printquantity < IdenticalCopyofLabel)
                                // {
                                foreach (clsTemplateLabelXmlwork DetailItem in objtemplatedetailslist) //btformat field
                                {
                                    divX = (Convert.ToSingle(DetailItem.xposition) / constval);
                                    divY = (Convert.ToSingle(DetailItem.yposition) / constval); //B4 popup
                                                                                                // divX = Convert.ToSingle(DetailItem.xposition);
                                                                                                // divY = Convert.ToSingle(DetailItem.yposition);
                                    fontSize = DetailItem.fontsize != "" ? Convert.ToSingle(DetailItem.fontsize) : 0;
                                    //ImageHeight = ((Convert.ToSingle(DetailItem.imgheight) / constval));
                                    //ImageWidth = ((Convert.ToSingle(DetailItem.imgwidth) / constval));
                                    ImageHeight = DetailItem.imgheight != "" ? ((Convert.ToSingle(DetailItem.imgheight) / constval)) : 0;
                                    ImageWidth = DetailItem.imgwidth != "" ? ((Convert.ToSingle(DetailItem.imgwidth) / constval)) : 0;
                                    ImageNewWidth = DetailItem.imgnewwidth != "" ? ((Convert.ToSingle(DetailItem.imgnewwidth) / constval)) : 0;

                                    if (DetailItem.fieldtype.ToLower().Trim() == "image" || DetailItem.fieldtype.ToLower().Trim() == "line") //image add to pdf
                                    {
                                        if (DetailItem.datasourcetext == "0" || string.IsNullOrWhiteSpace(DetailItem.datasourcetext))
                                        {
                                            //insert image to pdf at x,y location
                                            if (!string.IsNullOrWhiteSpace(DetailItem.imagestring))
                                        {
                                            Byte[] TheImageAsBytes = Convert.FromBase64String(DetailItem.imagestring);

                                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(TheImageAsBytes);
                                            //Resize image depend upon your need
                                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);

                                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                            imageinsert.SetAbsolutePosition(divX, divY);
                                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(imageinsert);
                                        }
                                        else
                                        {
                                            iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Images" + "\\" + "default.png"));
                                            //Resize image depend upon your need
                                            imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));

                                            // imageinsert.ScaleAbsolute((float)ImageWidth, (float)ImageHeight);
                                            imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth), Convert.ToSingle(DetailItem.imgheight));
                                            imageinsert.SetAbsolutePosition(divX, divY);
                                            imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                            cb.AddImage(imageinsert);
                                        }
                                        }
                                        else
                                        {
                                            try
                                            {
                                                string lstrPropertyValExt = string.Empty;

                                                if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper()))
                                                {
                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                    strPropertyValue = lstrPropertyValExt;
                                                }
                                                else
                                                {
                                                    strPropertyValue = string.Empty;
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                strPropertyValue = string.Empty;
                                            }
                                            string ImagepathName = lobjQBConfiguration.GetLabelConfigSettings("SelectedCustomImageDirectoryPath").ToString();
                                            string Imagepath = ImagepathName + "\\" + strPropertyValue;

                                            if (File.Exists(Imagepath))
                                            {

                                                iTextSharp.text.Image imageinsert = iTextSharp.text.Image.GetInstance(Environment.ExpandEnvironmentVariables(Imagepath));
                                                imageinsert.ScaleToFit(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                                imageinsert.ScaleAbsolute(Convert.ToSingle(DetailItem.imgwidth) / 2, Convert.ToSingle(DetailItem.imgheight) / 2);
                                                imageinsert.SetAbsolutePosition(divX, divY);
                                                imageinsert.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0;
                                                cb.AddImage(imageinsert);
                                            }
                                          

                                        }
                                    }

                                    else if (DetailItem.fieldtype.ToLower().Trim() == "barcode")
                                    {

                                        if (DetailItem.barcodetype.ToString().ToLower() == "code128") //BarcodeType Added upc-A,code 39
                                        {
                                            iTextSharp.text.pdf.Barcode128 bc = new Barcode128();

                                            bc.TextAlignment = Element.ALIGN_CENTER;

                                            // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

                                            // cb.SetFontAndSize(bf, fontSize);

                                            for (int k = 0; k < filterinv.Count; k++)
                                            {
                                                string lstrsubstringvalue = string.Empty;
                                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                                {
                                                    dsdatasource = new List<string>();
                                                    int staticVal = 0;
                                                    string chart = DetailItem.delimiter;
                                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                    dsdatasource = charArr.Split('~').ToList();
                                                    foreach (var dsitem in dsdatasource)
                                                    {
                                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                        try
                                                        {
                                                            if (dsitem.ToString().ToLower() == "static")
                                                            {
                                                                strPropertyValue = DetailItem.testdata.ToString();
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                            {
                                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                                int loopStatic = 0;
                                                                foreach (var fieldVal in ddatasourceStatic)
                                                                {
                                                                    var Itemstatic = fieldVal.Split('∬');
                                                                    if (Itemstatic.Length > 1)
                                                                    {
                                                                        if (loopStatic == staticVal)
                                                                        {
                                                                            strPropertyValue = Itemstatic[1];
                                                                            staticVal = staticVal + 1;
                                                                            break;
                                                                        }
                                                                        loopStatic = loopStatic + 1;
                                                                    }

                                                                }

                                                            }
                                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            try
                                                            {
                                                                string lstrPropertyValExt = string.Empty;

                                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                                {
                                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                                {
                                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }

                                                            }
                                                            catch (Exception exExt)
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                            finally
                                                            {

                                                            }


                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(checkQuickBooksvalue.ToString()))
                                                    {
                                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);
                                                    }
                                                    else
                                                    {
                                                        lstrsubstringvalue = "";
                                                    }


                                                }
                                                else
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                        {

                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                            //isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                            //if (isNum)
                                                            //{
                                                            //    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                            //}
                                                            //else
                                                            //{
                                                            //    strPropertyValue = strPropertyValue.ToString();

                                                            //}

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }

                                                    }
                                                }
                                                bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;

                                                //if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice" && strPropertyValue != null) // if (datasourcevalue == "sales price")
                                                //{
                                                //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                //    if (isNum)
                                                //    {


                                                //        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                //    }
                                                //    else
                                                //    {

                                                //        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                //    }
                                                //}
                                                //else
                                                //{


                                                //    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                //}

                                            }
                                            bc.StartStopText = false;

                                            bc.CodeType = iTextSharp.text.pdf.Barcode128.EAN13;
                                            bc.ChecksumText = true;
                                            bc.GenerateChecksum = true;
                                            bc.Extended = true;
                                            try
                                            {
                                                if (bc.Code != null && bc.Code != string.Empty)
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    bc.Baseline = fontSize;
                                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                    img.SetAbsolutePosition(divX, divY);

                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }

                                        } //code 128 end
                                          //QR code print
                                        else if (DetailItem.barcodetype.ToString().ToLower() == "qrcode") //QRCode Type 
                                        {
                                            string lstrqrcodetext = string.Empty;
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();
                                            for (int k = 0; k < filterinv.Count; k++)
                                            {
                                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                                {
                                                    dsdatasource = new List<string>();
                                                    int staticVal = 0;
                                                    string chart = DetailItem.delimiter;
                                                    string charArr1 = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                    dsdatasource = charArr1.Split('~').ToList();
                                                    foreach (var dsitem in dsdatasource)
                                                    {
                                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());

                                                        try
                                                        {
                                                            if (dsitem.ToString().ToLower() == "static")
                                                            {
                                                                strPropertyValue = DetailItem.testdata.ToString();
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                            {
                                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                                int loopStatic = 0;
                                                                foreach (var fieldVal in ddatasourceStatic)
                                                                {
                                                                    var Itemstatic = fieldVal.Split('∬');
                                                                    if (Itemstatic.Length > 1)
                                                                    {
                                                                        if (loopStatic == staticVal)
                                                                        {
                                                                            strPropertyValue = Itemstatic[1];
                                                                            staticVal = staticVal + 1;
                                                                            break;
                                                                        }
                                                                        loopStatic = loopStatic + 1;
                                                                    }

                                                                }

                                                            }
                                                            else if (dsitem.ToString().ToLower() == "timestamp")
                                                            {
                                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp); //yyMMddHHss
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)objdatasource[k], null);
                                                            }
                                                            //concatinate string to print
                                                            if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                            {
                                                                checkQuickBooksvalue.Append(strPropertyValue);
                                                                checkQuickBooksvalue.Append(chart);
                                                            }

                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            try
                                                            {
                                                                string lstrPropertyValExt = string.Empty;

                                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                                {
                                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                                {
                                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }

                                                            }
                                                            catch (Exception exExt)
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                            finally
                                                            {

                                                            }

                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(checkQuickBooksvalue.ToString()))
                                                    {
                                                        lstrsubstringvalue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - chart.Length, chart.Length);
                                                    }
                                                    else
                                                    {
                                                        lstrsubstringvalue = "";
                                                    }

                                                }
                                                else
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                        {

                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                            //isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                            //if (isNum)
                                                            //{
                                                            //    strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                            //}
                                                            //else
                                                            //{
                                                            //    strPropertyValue = strPropertyValue.ToString();

                                                            //}

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }

                                                    }
                                                    lstrsubstringvalue = strPropertyValue.ToString();
                                                }
                                            }





                                            try
                                            {
                                                if (!string.IsNullOrWhiteSpace(lstrsubstringvalue))
                                                {
                                                    foreach (var itemdimension in objtemplatedetailslist)
                                                    {
                                                        if (itemdimension.barcodetype != null)
                                                        {
                                                            if (itemdimension.barcodetype.ToLower().Trim() == "qrcode")
                                                            {
                                                                pintwidth = Convert.ToDouble(itemdimension.imgwidth) + 0.25;

                                                                QrImaageWidth = itemdimension.imgwidth != "" ? ((pintwidth / constval)) : 0;

                                                                QrWidth = (int)Math.Round(Convert.ToDecimal(QrImaageWidth)); //inchecs to pixel

                                                                break;
                                                            }
                                                        }

                                                    }

                                                    iTextSharp.text.pdf.BarcodeQRCode qrcode = new BarcodeQRCode(lstrsubstringvalue, QrWidth, QrWidth, null);

                                                    iTextSharp.text.Image img = qrcode.GetImage();

                                                    img.SetAbsolutePosition(divX, divY);

                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }


                                        }
                                        else if (DetailItem.barcodetype.ToString().ToLower() == "upc-a") //BarcodeType Added upc-A
                                        {

                                            //Generate UPC-A barcode
                                            BarcodeEAN bc = new BarcodeEAN();


                                            for (int k = 0; k < filterinv.Count; k++)
                                            {

                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                        isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                        if (isNum)
                                                        {
                                                            strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = strPropertyValue.ToString();

                                                        }

                                                    }
                                                    else
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                    }

                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }

                                                }
                                                strPropertyValue += GetUPCDigit(Convert.ToString(strPropertyValue), openWith);
                                                if (ValidateChecksumDigit(Convert.ToString(strPropertyValue)) || openWith["Digit"])
                                                {

                                                    if (DetailItem.datasourcetext.ToLower().Trim() == "salesprice")
                                                    {
                                                        isNum = double.TryParse(strPropertyValue.ToString().Trim(), out Num);
                                                        if (isNum)
                                                        {

                                                            bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                        }
                                                        else
                                                        {


                                                            bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                        }
                                                    }
                                                    else
                                                    {

                                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    }
                                                }

                                            }
                                            bc.StartStopText = false;

                                            bc.CodeType = Barcode.UPCA;
                                            bc.Extended = true;
                                            try
                                            {
                                                if (bc.Code != null && bc.Code != string.Empty)
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    if (Convert.ToBoolean(DetailItem.barcharvisible) == false)
                                                    {
                                                        bc.Font = null;
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToInt32(DetailItem.DataCharView) == 0)
                                                        {
                                                            bc.Baseline = Convert.ToSingle(-(Convert.ToInt32(fontSize) / 4));
                                                        }
                                                        else
                                                        {
                                                            bc.Baseline = Convert.ToSingle(fontSize);
                                                        }
                                                        switch (Convert.ToInt32(DetailItem.DataCharAlign))
                                                        {
                                                            case 0:
                                                                bc.TextAlignment = Element.ALIGN_LEFT;
                                                                break;
                                                            case 1:
                                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                                break;
                                                            case 2:
                                                                bc.TextAlignment = Element.ALIGN_RIGHT;
                                                                break;
                                                            default:
                                                                bc.TextAlignment = Element.ALIGN_CENTER;
                                                                break;
                                                        }
                                                    }
                                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);


                                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                    img.SetAbsolutePosition(divX, divY);
                                                    // img.RotationDegrees = 360;
                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }

                                        }//end upc-a
                                        else if (DetailItem.barcodetype.ToString().ToLower() == "code39")
                                        {
                                            Barcode39 bc = new Barcode39();

                                            bc.TextAlignment = Element.ALIGN_CENTER;


                                            for (int k = 0; k < filterinv.Count; k++)
                                            {
                                                string lstrsubstringvalue = string.Empty;
                                                StringBuilder checkQuickBooksvalue = new StringBuilder();

                                                if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                                {
                                                    dsdatasource = new List<string>();
                                                    int staticVal = 0;
                                                    string chart = DetailItem.delimiter;
                                                    string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                    dsdatasource = charArr.Split('~').ToList();
                                                    foreach (var dsitem in dsdatasource)
                                                    {
                                                        PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                        try
                                                        {
                                                            if (dsitem.ToString().ToLower() == "static")
                                                            {
                                                                strPropertyValue = DetailItem.testdata.ToString();
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                            {
                                                                string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                                var ddatasourceStatic = charStatic.Split('~').ToList();
                                                                int loopStatic = 0;
                                                                foreach (var fieldVal in ddatasourceStatic)
                                                                {
                                                                    var Itemstatic = fieldVal.Split('∬');
                                                                    if (Itemstatic.Length > 1)
                                                                    {
                                                                        if (loopStatic == staticVal)
                                                                        {
                                                                            strPropertyValue = Itemstatic[1];
                                                                            staticVal = staticVal + 1;
                                                                            break;
                                                                        }
                                                                        loopStatic = loopStatic + 1;
                                                                    }

                                                                }

                                                            }
                                                            else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                            }
                                                            else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                            {
                                                                strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                            }
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                            try
                                                            {
                                                                string lstrPropertyValExt = string.Empty;

                                                                if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                                {
                                                                    lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                                {
                                                                    lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                    strPropertyValue = lstrPropertyValExt;
                                                                }
                                                                else
                                                                {
                                                                    strPropertyValue = string.Empty;
                                                                }

                                                            }
                                                            catch (Exception exExt)
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }
                                                            finally
                                                            {

                                                            }

                                                        }
                                                        if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                        {
                                                            checkQuickBooksvalue.Append(strPropertyValue);
                                                            checkQuickBooksvalue.Append(chart);
                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(checkQuickBooksvalue.ToString()))
                                                    {

                                                        strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);
                                                    }
                                                    else
                                                    {
                                                        lstrsubstringvalue = "";
                                                    }


                                                }
                                                else
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                        {

                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                            isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                            if (isNum)
                                                            {
                                                                strPropertyValue = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");

                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = strPropertyValue.ToString();

                                                            }

                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }
                                                    }
                                                }



                                                if (DetailItem.datasourcetext.ToLower() == "salesprice" && strPropertyValue != null)
                                                {
                                                    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                                    if (isNum)
                                                    {
                                                        //  cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        bc.Code = Convert.ToDouble(strPropertyValue.ToString()).ToString("N2");
                                                    }
                                                    else
                                                    {
                                                        //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                    }
                                                }
                                                else
                                                {
                                                    //cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign)?0:Convert.ToInt16(DetailItem.textAlign)==3?0: Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                                    bc.Code = strPropertyValue != null ? strPropertyValue.ToString() : string.Empty;
                                                }

                                            } //for end

                                            bc.StartStopText = false;


                                            bc.Extended = true;
                                            try
                                            {
                                                if (bc.Code != null && bc.Code != string.Empty)
                                                {
                                                    bc.Font = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                                    bc.Size = fontSize;
                                                    bc.Baseline = fontSize;
                                                    bc.X = Convert.ToSingle(DetailItem.imgwidth);
                                                    iTextSharp.text.Image img = bc.CreateImageWithBarcode(cb,
                                                    iTextSharp.text.BaseColor.BLACK, iTextSharp.text.BaseColor.BLACK);

                                                    img.ScaleAbsolute(img.Width, (float)ImageHeight);
                                                    img.SetAbsolutePosition(divX, divY);

                                                    img.RotationDegrees = DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0; //rotate barcode image by degree
                                                    cb.AddImage(img);
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }


                                        }

                                    }
                                    else //Field Type is Text Field
                                    {

                                        cb.BeginText();
                                        // BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                                        // cb.SetFontAndSize(bf, fontSize);
                                        if (!string.IsNullOrWhiteSpace(DetailItem.fontbold))
                                        {
                                            if (Convert.ToBoolean(DetailItem.fontbold) == true)
                                            {
                                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                            }
                                            else
                                            {
                                                cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA).BaseFont, fontSize);
                                            }

                                        }
                                        else
                                        {
                                            cb.SetFontAndSize(FontFactory.GetFont(FontFactory.HELVETICA_BOLD).BaseFont, fontSize);
                                        }
                                        cb.SetTextMatrix(divX, divY);

                                        for (int k = 0; k < filterinv.Count; k++)
                                        {
                                            string lstrsubstringvalue = string.Empty;
                                            StringBuilder checkQuickBooksvalue = new StringBuilder();

                                            if (!string.IsNullOrEmpty(DetailItem.delimiter))
                                            {
                                                dsdatasource = new List<string>();
                                                int staticVal = 0;
                                                string chart = DetailItem.delimiter;
                                                string charArr = DetailItem.datasource.Replace(DetailItem.delimiter, "~");
                                                dsdatasource = charArr.Split('~').ToList();
                                                foreach (var dsitem in dsdatasource)
                                                {
                                                    PropertyInfo objPropertyInfo = objClsType.GetProperty(dsitem.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                    try
                                                    {
                                                        if (dsitem.ToString().ToLower() == "static")
                                                        {
                                                            strPropertyValue = DetailItem.testdata.ToString();
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "Static1".ToLower())
                                                        {
                                                            string charStatic = DetailItem.datasourcetext.Replace(DetailItem.delimiter, "~");
                                                            var ddatasourceStatic = charStatic.Split('~').ToList();
                                                            int loopStatic = 0;
                                                            foreach (var fieldVal in ddatasourceStatic)
                                                            {
                                                                var Itemstatic = fieldVal.Split('∬');
                                                                if (Itemstatic.Length > 1)
                                                                {
                                                                    if (loopStatic == staticVal)
                                                                    {
                                                                        strPropertyValue = Itemstatic[1];
                                                                        staticVal = staticVal + 1;
                                                                        break;
                                                                    }
                                                                    loopStatic = loopStatic + 1;
                                                                }

                                                            }

                                                        }
                                                        else if (dsitem.ToString().ToLower() == "TimeStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                        }
                                                        else if (dsitem.ToString().ToLower() == "DateStamp".ToLower())
                                                        {
                                                            strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                        try
                                                        {
                                                            string lstrPropertyValExt = string.Empty;

                                                            if (lobjDataExtension.ContainsKey(dsitem.Trim().ToUpper()))
                                                            {
                                                                lobjDataExtension.TryGetValue(dsitem.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                            {
                                                                lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                                strPropertyValue = lstrPropertyValExt;
                                                            }
                                                            else
                                                            {
                                                                strPropertyValue = string.Empty;
                                                            }

                                                        }
                                                        catch (Exception exExt)
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }
                                                        finally
                                                        {

                                                        }
                                                    }
                                                    if (!string.IsNullOrEmpty(Convert.ToString(strPropertyValue)))
                                                    {
                                                        checkQuickBooksvalue.Append(strPropertyValue);
                                                        checkQuickBooksvalue.Append(chart);
                                                    }
                                                }
                                                if (!string.IsNullOrEmpty(checkQuickBooksvalue.ToString()))
                                                {
                                                    strPropertyValue = checkQuickBooksvalue.ToString().Remove(checkQuickBooksvalue.Length - DetailItem.delimiter.Length, DetailItem.delimiter.Length);
                                                }
                                                else
                                                {
                                                    lstrsubstringvalue = "";
                                                }


                                            }
                                            else
                                            {
                                                PropertyInfo objPropertyInfo = objClsType.GetProperty(DetailItem.datasourcetext.ToString().Replace(System.Environment.NewLine, string.Empty).Trim());
                                                try
                                                {
                                                    if (DetailItem.datasourcetext.ToString().ToLower() == "static")
                                                    {
                                                        strPropertyValue = DetailItem.testdata.ToString();
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "TimeStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.ToString(ModGlobal.TimeStamp);
                                                    }
                                                    else if (DetailItem.datasourcetext.ToString().ToLower() == "DateStamp".ToLower())
                                                    {
                                                        strPropertyValue = DateTime.Now.AddDays(ModGlobal.DateShift).ToString(Convert.ToString(ModGlobal.DataStamp));
                                                    }
                                                    else if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                                    {

                                                        strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                    }
                                                    else
                                                    {
                                                        //if (objPropertyInfo != null)
                                                        //{
                                                            strPropertyValue = objPropertyInfo.GetValue((clsSalesReceiptLineItems)filterinv[k], null);
                                                        //}
                                                    }
                                                }
                                                catch (Exception ex)
                                                {
                                                    strPropertyValue = string.Empty;
                                                    try
                                                    {
                                                        string lstrPropertyValExt = string.Empty;

                                                        if (lobjDataExtension.ContainsKey(DetailItem.datasourcetext.Trim().ToUpper()))
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasourcetext.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else if (lobjDataExtension.ContainsKey(DetailItem.datasource.Trim().ToUpper())) //new condition to read custom field with special chars 22-APR-2019
                                                        {
                                                            lobjDataExtension.TryGetValue(DetailItem.datasource.Trim().ToUpper(), out lstrPropertyValExt);
                                                            strPropertyValue = lstrPropertyValExt;
                                                        }
                                                        else
                                                        {
                                                            strPropertyValue = string.Empty;
                                                        }

                                                    }
                                                    catch (Exception exExt)
                                                    {
                                                        strPropertyValue = string.Empty;
                                                    }
                                                    finally
                                                    {

                                                    }
                                                }
                                            }



                                            //if (DetailItem.datasourcetext.ToLower() == "salesprice")
                                            //{
                                            //    isNum = double.TryParse(strPropertyValue.ToString(), out Num);
                                            //    if (isNum)
                                            //    {
                                            //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), Convert.ToDouble(strPropertyValue.ToString()).ToString("N2"), divX, divY, DetailItem.orientation != "0" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            //    }
                                            //    else
                                            //    {
                                            //        cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue.ToString(), divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                            //    }
                                            //}
                                            if ((Convert.ToInt32(DetailItem.wordwrap) > 0 || Convert.ToInt32(DetailItem.orientation) > 0) && strPropertyValue != null)
                                            {
                                                wraptext = WordWrap(strPropertyValue.ToString(), Convert.ToInt32(DetailItem.wordwrap), fontSize);

                                                string[] stringSeparators = new string[] { "\r\n" };
                                                string[] lines = wraptext.Split(stringSeparators, StringSplitOptions.None);
                                                if (Convert.ToSingle(DetailItem.orientation) == 30) // for 30 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    foreach (string splitline in lines)
                                                    {
                                                        //s.Replace("\n", "");

                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);

                                                        }
                                                        xplus += 05;
                                                        yminus += 08;

                                                    }
                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 60) // for 60 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 08;
                                                        yminus += 06;

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 90) // for 90 deg rotation
                                                {
                                                    xplus = 18;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valH;
                                                            divY = divY + (Convert.ToInt16(textHeight) / 4f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = 0;
                                                        }
                                                    }
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                                        yminus += 00;

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 180) // for 180 deg rotation
                                                {
                                                    xplus = -2;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valW;
                                                            divX = divX - (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 4f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = 0;

                                                        }
                                                    }
                                                    Array.Reverse(lines);
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 00;
                                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 270) // for 270 deg rotation
                                                {
                                                    xplus = 18;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            xplus = 18;
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valH;
                                                            divY = divY - (Convert.ToInt16(textHeight) / 4f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = 5;

                                                        }
                                                    }
                                                    //Array.Reverse(lines);
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX - xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += Convert.ToInt32(DetailItem.fontsize);
                                                        yminus += 00;

                                                    }

                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 45) // for 45 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 07;
                                                        yminus += 07;

                                                    }
                                                }
                                                else if (Convert.ToSingle(DetailItem.orientation) == 360 || Convert.ToSingle(DetailItem.orientation) == 0) // for 360 deg rotation
                                                {
                                                    xplus = 0;
                                                    yminus = 0;
                                                    if (!string.IsNullOrWhiteSpace(DetailItem.textAlign))
                                                    {
                                                        if (Convert.ToInt16(DetailItem.textAlign) == 1)
                                                        {
                                                            LabelConnector.frmgetsize lobjLabelConnectorSettings = new LabelConnector.frmgetsize(wraptext, DetailItem.fontsize);
                                                            lobjLabelConnectorSettings.Show();
                                                            lobjLabelConnectorSettings.Hide();
                                                            string textHeight = lobjLabelConnectorSettings.valW;
                                                            divX = divX + (Convert.ToInt16(lobjLabelConnectorSettings.valH) / 3.5f);
                                                            lobjLabelConnectorSettings.Close();
                                                            yminus = -3;

                                                        }
                                                    }
                                                    foreach (string splitline in lines)
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(splitline))
                                                        {
                                                            cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), splitline, divX + xplus, divY - yminus, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);
                                                        }
                                                        xplus += 00;
                                                        yminus += Convert.ToInt32(DetailItem.fontsize);

                                                    }
                                                }


                                            }

                                            else
                                            {
                                                cb.ShowTextAligned(string.IsNullOrWhiteSpace(DetailItem.textAlign) ? 0 : Convert.ToInt16(DetailItem.textAlign) == 3 ? 0 : Convert.ToInt16(DetailItem.textAlign), strPropertyValue != null ? strPropertyValue.ToString() : string.Empty, divX, divY, DetailItem.orientation != "" ? Convert.ToSingle(DetailItem.orientation) : 0);//rotate text by degree
                                            }

                                        }

                                        cb.EndText();

                                    }//end text type

                                } //end of foreach


                            }

                            doc.Close();
                            writer.Close();

                            //convert pdf to image
                            if (objtemplatedetailslist.Count > 0)
                            {
                                //convert inches to pixel
                                fltImgWidth = Convert.ToSingle(templateheaderwidth) * pointmultiplier;

                                fltImgHeight = Convert.ToSingle(templateheaderheight) * pointmultiplier;

                                ConvertPdfToPrintImage(Templatename, fltImgWidth, fltImgHeight, PrinterName);

                            }
                        }
                        catch (Exception ex)
                        {

                        }

                        // return strfilename;


                    }

                    catch (System.Exception ex)
                    {

                    }
                    finally
                    {


                    }

                    //print image
                    filePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + Templatename + "\\" + Templatename + ".Tiff");

                    PrintDateRangeUDFLabel(filePath, Convert.ToInt32(inv.SalesReceiptQty), pstrprintername);

                } //end if 


            } //end of item loop foreach
            return strfilename;
        }

        //print Date Range UDF Label
        public void PrintDateRangeUDFLabel(string FileName, int pintprintqty, string printername)
        {
            StringBuilder logMessage = new StringBuilder();

            try
            {
                if (string.IsNullOrWhiteSpace(FileName)) return; // Prevents execution of below statements if filename is not selected.

                PrintDocument pd = new PrintDocument();

                //Disable the printing document pop-up dialog shown during printing.
                PrintController printController = new StandardPrintController();
                pd.PrintController = printController;

                //For testing only: Hardcoded set paper size to particular paper.
                //pd.PrinterSettings.DefaultPageSettings.PaperSize = new PaperSize("Custom 6x4", 720, 478);
                //pd.DefaultPageSettings.PaperSize = new PaperSize("Custom 6x4", 720, 478);
                pd.PrinterSettings.PrinterName = printername;
                pd.PrinterSettings.Copies = Convert.ToInt16(pintprintqty);
                pd.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);
                pd.PrinterSettings.DefaultPageSettings.Margins = new Margins(0, 0, 0, 0);


                pd.PrintPage += (sndr, args) =>
                {
                    System.Drawing.Image i = System.Drawing.Image.FromFile(FileName);

                    //Adjust the size of the image to the page to print the full image without loosing any part of the image.
                    System.Drawing.Rectangle m = args.MarginBounds;

                    //Logic below maintains Aspect Ratio.
                    if ((double)i.Width / (double)i.Height > (double)m.Width / (double)m.Height) // image is wider
                    {
                        m.Height = (int)((double)i.Height / (double)i.Width * (double)m.Width);
                    }
                    else
                    {
                        m.Width = (int)((double)i.Width / (double)i.Height * (double)m.Height);
                    }
                    //Calculating optimal orientation.
                    pd.DefaultPageSettings.Landscape = m.Width > m.Height;

                    args.Graphics.DrawImage(i, m);
                };
                pd.Print();
            }
            catch (Exception ex)
            {


            }
            finally
            {
                logMessage.AppendLine(string.Format(System.Globalization.CultureInfo.InvariantCulture, "-------------------[ END  - {0} - {1} -------------------]", MethodBase.GetCurrentMethod().Name, DateTime.Now.ToShortDateString()));


            }
        }
        public void ResizeTemplateImages(string lstrTemplateName, float width, float height)
        {
            string imgfilename = string.Empty;

            string templatefilePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfPrintImagesList" + "\\" + lstrTemplateName + "\\");
            string resizeimgpath = System.Windows.Forms.Application.StartupPath + @"\" + "UdfImages" + "\\" + lstrTemplateName + "\\";
            if (!System.IO.Directory.Exists(resizeimgpath))
            {
                System.IO.Directory.CreateDirectory(resizeimgpath);
            }
            string[] filePaths = Directory.GetFiles(templatefilePath, "*.Tiff");
            foreach (string filename in filePaths)
            {

                System.Drawing.Image image = System.Drawing.Image.FromFile(filename);

                Bitmap bitmap = resizeImageFromFile(image, Convert.ToInt32(width), Convert.ToInt32(height)); //ver1
                                                                                                             //System.Drawing.Image bitmap = FixedSize(image, Convert.ToInt32(width), Convert.ToInt32(height));//ver 2
                imgfilename = string.Format("{0:yyyy-MM-dd_hh-mm-ss-tt}.Tiff", DateTime.Now);
                bitmap.Save(resizeimgpath + imgfilename, System.Drawing.Imaging.ImageFormat.Tiff);
                System.Threading.Thread.Sleep(3000);

            }
        }



        public static System.Drawing.Image FixedSize(System.Drawing.Image imgPhoto, int Width, int Height)
        {
            int sourceWidth = imgPhoto.Width;
            int sourceHeight = imgPhoto.Height;
            int sourceX = 0;
            int sourceY = 0;
            int destX = 0;
            int destY = 0;

            float nPercent = 0;
            float nPercentW = 0;
            float nPercentH = 0;

            nPercentW = ((float)Width / (float)sourceWidth);
            nPercentH = ((float)Height / (float)sourceHeight);
            if (nPercentH < nPercentW)
            {
                nPercent = nPercentH;
                destX = System.Convert.ToInt16((Width -
                              (sourceWidth * nPercent)) / 2);
            }
            else
            {
                nPercent = nPercentW;
                destY = System.Convert.ToInt16((Height -
                              (sourceHeight * nPercent)) / 2);
            }

            int destWidth = (int)(sourceWidth * nPercent);
            int destHeight = (int)(sourceHeight * nPercent);

            Bitmap bmPhoto = new Bitmap(Width, Height,
                              PixelFormat.Format24bppRgb);
            bmPhoto.SetResolution(imgPhoto.HorizontalResolution,
                             imgPhoto.VerticalResolution);

            Graphics grPhoto = Graphics.FromImage(bmPhoto);
            grPhoto.Clear(Color.White);
            grPhoto.InterpolationMode =
                    InterpolationMode.HighQualityBicubic;

            grPhoto.DrawImage(imgPhoto,
                new System.Drawing.Rectangle(destX, destY, destWidth, destHeight),
                new System.Drawing.Rectangle(sourceX, sourceY, sourceWidth, sourceHeight),
                GraphicsUnit.Pixel);

            grPhoto.Dispose();
            return bmPhoto;
        }

        public static Bitmap resizeImageFromFile(System.Drawing.Image image, int width, int height)
        {
            var destRect = new System.Drawing.Rectangle(0, 0, width, height);
            var destImage = new Bitmap(width, height);

            destImage.SetResolution(image.HorizontalResolution, image.VerticalResolution);

            using (var graphics = Graphics.FromImage(destImage))
            {
                graphics.CompositingMode = CompositingMode.SourceCopy;
                graphics.CompositingQuality = CompositingQuality.HighQuality;
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = SmoothingMode.HighQuality;
                graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                using (var wrapMode = new ImageAttributes())
                {
                    wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                    graphics.DrawImage(image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
                }

            }


            return destImage;
        }

        public static System.Drawing.Image ResizeImageFromPdf(System.Drawing.Image img, int maxWidth, int maxHeight)
        {
            if (img.Size.Width == 0 || img.Size.Height == 0)
                return img;

            var sizeIsWidthOk = (maxWidth <= 0 || img.Size.Width <= maxWidth);
            var sizeIsHeightOk = (maxHeight <= 0 || img.Size.Height <= maxHeight);
            var sizeIsOk = sizeIsWidthOk && sizeIsHeightOk;

            if (sizeIsOk)
                return img;

            var newWidth = img.Size.Width;
            var newHeight = img.Size.Height;
            if (!sizeIsWidthOk)
            {
                newWidth = maxWidth;
                newHeight = (int)Math.Floor(((double)img.Size.Height) * (((double)maxWidth) / ((double)img.Size.Width)));
                if (maxHeight < 0 || newHeight <= maxHeight)
                    sizeIsHeightOk = true;
            }
            if (!sizeIsHeightOk)
            {
                newHeight = maxHeight;
                newWidth = (int)Math.Floor(((double)img.Size.Width) * (((double)maxHeight) / ((double)img.Size.Height)));
            }

            var resizedBitmap = new Bitmap(newWidth, newHeight);
            var resizedRect = new System.Drawing.Rectangle(0, 0, newWidth, newHeight);

            using (var graphics = Graphics.FromImage(resizedBitmap))
            {
                graphics.CompositingMode = CompositingMode.SourceCopy;
                graphics.CompositingQuality = CompositingQuality.HighQuality;
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = SmoothingMode.HighQuality;
                graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                using (var wrapMode = new ImageAttributes())
                {
                    wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                    graphics.DrawImage(img, resizedRect, 0, 0, img.Width, img.Height, GraphicsUnit.Pixel, wrapMode);
                }
            }

            return resizedBitmap;
        }
        public static string LineBreakByCharDG(string testdata, string linebreakchar, float fontSize)
        {
            string strlinebreakwords = string.Empty;
            StringBuilder sb = new StringBuilder();
            strlinebreakwords = testdata.Replace(linebreakchar, Environment.NewLine);
            sb.Append(strlinebreakwords);
            sb.Append(Environment.NewLine);

            return sb.ToString();
        }
        //linebreaks
        public static string LineBreakByChar(string testdata, string linebreakchar, float fontSize)
        {
            string strlinebreakwords = string.Empty;
            StringBuilder sb = new StringBuilder();
            strlinebreakwords = testdata.Replace(linebreakchar, Environment.NewLine);
            sb.Append(strlinebreakwords);

            if (fontSize > 8 && fontSize < 16)
            {
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 10 && fontSize < 21)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

            }
            else if (fontSize > 20 && fontSize < 31)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 30 && fontSize < 41)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 40 && fontSize < 51)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 50 && fontSize < 61)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 60 && fontSize < 71)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 70 && fontSize < 81)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 80 && fontSize < 91)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else if (fontSize > 90 && fontSize < 101)
            {
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);

                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
                sb.Append(Environment.NewLine);
            }
            else
            {
                sb.Append(Environment.NewLine);
            }

            return sb.ToString();
        }
        //public static string WordWrap(string text, int width, float fontSize)
        //{
        //    int pos, next;
        //    StringBuilder sb = new StringBuilder();

        //    // Lucidity check
        //    if (width < 1)
        //        return text;

        //    // Parse each line of text
        //    for (pos = 0; pos < text.Length; pos = next)
        //    {
        //        // Find end of line
        //        int eol = text.IndexOf(Environment.NewLine, pos);
        //        if (eol == -1)
        //            next = eol = text.Length;
        //        else
        //            next = eol + Environment.NewLine.Length;

        //        // Copy this line of text, breaking into smaller lines as needed
        //        if (eol > pos)
        //        {
        //            do
        //            {
        //                int len = eol - pos;
        //                if (len > width)
        //                    len = BreakLine(text, pos, width);
        //                sb.Append(text, pos, len);
        //                //sb.Append(Environment.NewLine);

        //                //sb.Append(Environment.NewLine); // add extra line on 28-Feb-2019



        //                if (fontSize > 8 && fontSize < 16)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 10 && fontSize < 21)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 20 && fontSize < 31)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 30 && fontSize < 41)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 40 && fontSize < 51)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 50 && fontSize < 61)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 60 && fontSize < 71)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 70 && fontSize < 81)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 80 && fontSize < 91)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else if (fontSize > 90 && fontSize < 101)
        //                {
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                    sb.Append(Environment.NewLine);
        //                }
        //                else
        //                {
        //                    sb.Append(Environment.NewLine);
        //                }
        //                // Trim whitespace following break
        //                pos += len;
        //                while (pos < eol && Char.IsWhiteSpace(text[pos]))
        //                    pos++;
        //            } while (eol > pos);
        //        }
        //        else sb.Append(Environment.NewLine);// Empty line
        //    }
        //    return sb.ToString();
        //}
        public static string WordWrap(string text, int width, float fontSize)
        {
            int pos, next;
            StringBuilder sb = new StringBuilder();

            // Lucidity check
            if (width < 1)
                return text;

            // Parse each line of text
            for (pos = 0; pos < text.Length; pos = next)
            {
                // Find end of line
                int eol = text.IndexOf(Environment.NewLine, pos);
                if (eol == -1)
                    next = eol = text.Length;
                else
                    next = eol + Environment.NewLine.Length;

                // Copy this line of text, breaking into smaller lines as needed
                if (eol > pos)
                {
                    do
                    {
                        int len = eol - pos;
                        if (len > width)
                            len = BreakLine(text, pos, width);
                        sb.Append(text, pos, len);
                        //sb.Append(Environment.NewLine);

                        //sb.Append(Environment.NewLine); // add extra line on 28-Feb-2019



                        //if (fontSize > 8 && fontSize < 16)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 10 && fontSize < 21)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 20 && fontSize < 31)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 30 && fontSize < 41)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    //sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 40 && fontSize < 51)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    //sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 50 && fontSize < 61)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    //sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 60 && fontSize < 71)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    //sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 70 && fontSize < 81)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    //sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 80 && fontSize < 91)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    //sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 90 && fontSize < 101)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    //sb.Append(Environment.NewLine);
                        //}
                        //else
                        //{
                        sb.Append(Environment.NewLine);
                        //}
                        // Trim whitespace following break
                        pos += len;
                        while (pos < eol && Char.IsWhiteSpace(text[pos]))
                            pos++;
                    } while (eol > pos);
                }
                else sb.Append(Environment.NewLine);// Empty line
            }
            return sb.ToString();
        }
        public static string WordWrapDG(string text, int width, float fontSize)
        {
            int pos, next;
            StringBuilder sb = new StringBuilder();

            // Lucidity check
            if (width < 1)
                return text;

            // Parse each line of text
            for (pos = 0; pos < text.Length; pos = next)
            {
                // Find end of line
                int eol = text.IndexOf(Environment.NewLine, pos);
                if (eol == -1)
                    next = eol = text.Length;
                else
                    next = eol + Environment.NewLine.Length;

                // Copy this line of text, breaking into smaller lines as needed
                if (eol > pos)
                {
                    do
                    {
                        int len = eol - pos;
                        if (len > width)
                            len = BreakLine(text, pos, width);
                        sb.Append(text, pos, len);
                        //sb.Append(Environment.NewLine);

                        //sb.Append(Environment.NewLine); // add extra line on 28-Feb-2019



                        //if (fontSize > 8 && fontSize < 16)
                        //{
                        sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 10 && fontSize < 21)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 20 && fontSize < 31)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 30 && fontSize < 41)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 40 && fontSize < 51)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 50 && fontSize < 61)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 60 && fontSize < 71)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 70 && fontSize < 81)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 80 && fontSize < 91)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else if (fontSize > 90 && fontSize < 101)
                        //{
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //    sb.Append(Environment.NewLine);
                        //}
                        //else
                        //{
                        //    sb.Append(Environment.NewLine);
                        //}
                        // Trim whitespace following break
                        pos += len;
                        while (pos < eol && Char.IsWhiteSpace(text[pos]))
                            pos++;
                    } while (eol > pos);
                }
                else sb.Append(Environment.NewLine);// Empty line
            }
            return sb.ToString();
        }

        private static int BreakLine(string text, int pos, int max)
        {
            // Find last whitespace in line
            int i = max;
            while (i >= 0 && !Char.IsWhiteSpace(text[pos + i]))
                i--;

            // If no whitespace found, break at maximum length
            if (i < 0)
                return max;

            // Find start of whitespace
            while (i >= 0 && Char.IsWhiteSpace(text[pos + i]))
                i--;

            // Return length of text before whitespace
            return i + 1;
        }

        public bool ValidateChecksumDigit(string pstrChecksumDigit)
        {

            //calling test function
            //int getlastdigit;
            // bool chkbo = GetChecksumDigit(pstrChecksumDigit,out getlastdigit);

            string firstElevenDigit = string.Empty;
            bool isChecksumDigit = false;
            string ChecksumDigit = string.Empty;

            int iSum = 0;
            int iDigit = 0;
            int lastdigit = 0;
            if (IsDigitsOnly(pstrChecksumDigit))
            {
                firstElevenDigit = (pstrChecksumDigit.Trim().Length == 12) ? pstrChecksumDigit.Substring(0, pstrChecksumDigit.Length - 1) : string.Empty;

                if (!string.IsNullOrWhiteSpace(firstElevenDigit))
                {
                    lastdigit = Convert.ToInt32(pstrChecksumDigit.Substring(pstrChecksumDigit.Length - 1, 1)); //Get last digit
                                                                                                               // Calculate the checksum digit here.
                    for (int i = 1; i <= firstElevenDigit.Length; i++)
                    {
                        iDigit = Convert.ToInt32(firstElevenDigit.Substring(i - 1, 1));
                        if (i % 2 == 0)
                        {    // even
                            iSum += iDigit * 1;
                        }
                        else
                        {    // odd
                            iSum += iDigit * 3;
                        }
                    }

                    int iCheckSum = (10 - (iSum % 10)) % 10;
                    if (iCheckSum == lastdigit)
                    {
                        isChecksumDigit = true;
                    }

                }
            }
            return isChecksumDigit;

        }

        public string GetUPCDigit(string pstrChecksumDigit, Dictionary<string, bool> UPCvalid)
        {
            UPCvalid.Clear();
            UPCvalid.Add("Digit", false);
            string iCheckSum = "";
            if (IsDigitsOnly(pstrChecksumDigit))
            {
                if (pstrChecksumDigit.Length == 11)
                {
                    UPCvalid.Clear();
                    UPCvalid.Add("Digit", true);
                    int[] a = new int[11];
                    a[0] = int.Parse(pstrChecksumDigit[0].ToString());
                    a[1] = int.Parse(pstrChecksumDigit[1].ToString());
                    a[2] = int.Parse(pstrChecksumDigit[2].ToString());
                    a[3] = int.Parse(pstrChecksumDigit[3].ToString());
                    a[4] = int.Parse(pstrChecksumDigit[4].ToString());
                    a[5] = int.Parse(pstrChecksumDigit[5].ToString());
                    a[6] = int.Parse(pstrChecksumDigit[6].ToString());
                    a[7] = int.Parse(pstrChecksumDigit[7].ToString());
                    a[8] = int.Parse(pstrChecksumDigit[8].ToString());
                    a[9] = int.Parse(pstrChecksumDigit[9].ToString());
                    a[10] = int.Parse(pstrChecksumDigit[10].ToString());

                    int sum = (((a[0] + a[2] + a[4] + a[6] + a[8] + a[10]) * 3) + (a[1] + a[3] + a[5] + a[7] + a[9]));
                    iCheckSum = ((10 - (sum % 10)) % 10).ToString();
                }
            }
            return iCheckSum;
        }

        //calcuate checksum for 11 digit no.and append checksum digit to last:Date 10-Dec-2019
        public bool GetChecksumDigit(string pstrChecksumDigit, out int pintlast)
        {
            string firstElevenDigit = string.Empty;
            bool isChecksumDigit = false;
            string ChecksumDigit = string.Empty;

            int iSum = 0;
            int iDigit = 0;
            int lastdigit = 0;
            if (IsDigitsOnly(pstrChecksumDigit))
            {
                firstElevenDigit = (pstrChecksumDigit.Trim().Length == 11) ? pstrChecksumDigit.Substring(0, pstrChecksumDigit.Length) : string.Empty;

                if (!string.IsNullOrWhiteSpace(firstElevenDigit))
                {
                    // lastdigit = Convert.ToInt32(pstrChecksumDigit.Substring(pstrChecksumDigit.Length, 1)); //Get last digit
                    // Calculate the checksum digit here.
                    for (int i = 1; i <= firstElevenDigit.Length; i++)
                    {
                        iDigit = Convert.ToInt32(firstElevenDigit.Substring(i - 1, 1));
                        if (i % 2 == 0)
                        {    // even
                            iSum += iDigit * 1;
                        }
                        else
                        {    // odd
                            iSum += iDigit * 3;
                        }
                    }

                    lastdigit = (10 - (iSum % 10)) % 10;
                    isChecksumDigit = true;

                }

            }

            pintlast = lastdigit;
            return isChecksumDigit;

        }
        public bool IsDigitsOnly(string strbarcode)
        {
            foreach (char c in strbarcode)
            {
                if (c < '0' || c > '9')
                    return false;
            }

            return true;
        }
        public static System.Drawing.Image ResizeImage(System.Drawing.Image img, int maxWidth, int maxHeight)
        {
            if (img.Size.Width == 0 || img.Size.Height == 0)
                return img;

            var sizeIsWidthOk = (maxWidth <= 0 || img.Size.Width <= maxWidth);
            var sizeIsHeightOk = (maxHeight <= 0 || img.Size.Height <= maxHeight);
            var sizeIsOk = sizeIsWidthOk && sizeIsHeightOk;

            if (sizeIsOk)
                return img;

            var newWidth = img.Size.Width;
            var newHeight = img.Size.Height;
            if (!sizeIsWidthOk)
            {
                newWidth = maxWidth;
                newHeight = (int)Math.Floor(((double)img.Size.Height) * (((double)maxWidth) / ((double)img.Size.Width)));
                if (maxHeight < 0 || newHeight <= maxHeight)
                    sizeIsHeightOk = true;
            }
            if (!sizeIsHeightOk)
            {
                newHeight = maxHeight;
                newWidth = (int)Math.Floor(((double)img.Size.Width) * (((double)maxHeight) / ((double)img.Size.Height)));
            }

            var resizedBitmap = new Bitmap(newWidth, newHeight);
            var resizedRect = new System.Drawing.Rectangle(0, 0, newWidth, newHeight);

            using (var graphics = Graphics.FromImage(resizedBitmap))
            {
                graphics.CompositingMode = CompositingMode.SourceCopy;
                graphics.CompositingQuality = CompositingQuality.HighQuality;
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = SmoothingMode.HighQuality;
                graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;

                using (var wrapMode = new ImageAttributes())
                {
                    wrapMode.SetWrapMode(WrapMode.TileFlipXY);
                    graphics.DrawImage(img, resizedRect, 0, 0, img.Width, img.Height, GraphicsUnit.Pixel, wrapMode);
                }
            }

            return resizedBitmap;
        }
        public clsTemplateStatus GetTemplateStatus()
        {
            clsTemplateStatus template = new clsTemplateStatus();
            string strStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPath" + "\\" + "TempLastPath" + ".xml");
            try
            {
                if (File.Exists(strStartupPath))
                {
                    XmlDocument doc = new XmlDocument();

                    doc.Load(strStartupPath);
                    XmlNodeList xNodeList = doc.GetElementsByTagName("Template");
                    for (int i = 0; i < xNodeList.Count; i++)
                    {
                        XmlAttributeCollection xmlattrc = xNodeList[i].Attributes;
                        foreach (XmlAttribute XMlatt in xmlattrc)
                        {
                            if (XMlatt.Name.ToString().ToLower().Trim() == "TemplatePath".ToLower())
                            {
                                template.TemplatePath = Convert.ToString(XMlatt.InnerText);
                            }
                            else if (XMlatt.Name.ToString().ToLower().Trim() == "TemplateSave".ToLower())
                            {
                                template.TemplateSave = Convert.ToString(XMlatt.InnerText);
                            }
                            else if (XMlatt.Name.ToString().ToLower().Trim() == "TemplateMode".ToLower())
                            {
                                template.TemplateMode = Convert.ToString(XMlatt.InnerText);
                            }
                            else if (XMlatt.Name.ToString().ToLower().Trim() == "TemplateStatus".ToLower())
                            {
                                template.TemplateStatus = Convert.ToString(XMlatt.InnerText);
                            }
                            else if (XMlatt.Name.ToString().ToLower().Trim() == "TempTemplatePath".ToLower())
                            {
                                template.TempTemplatePath = Convert.ToString(XMlatt.InnerText);
                            }
                        }


                    }
                }

            }
            catch (Exception ex)
            {

                throw ex;
            }
            return template;
        }
        public bool SaveNewTemplate()
        {
            SaveFileDialog openFileDialog1 = new SaveFileDialog();
            openFileDialog1.Title = "Create Template";
            openFileDialog1.Filter = "XML Files (*.xml)|*.xml";
            openFileDialog1.FilterIndex = 0;
            openFileDialog1.DefaultExt = "xml";
            string Labelpath = System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\" + "Label Connector Documents";

            if (!Directory.Exists(Labelpath))
                Directory.CreateDirectory(Labelpath);
            openFileDialog1.InitialDirectory = Labelpath;

            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {

                clsTemplateStatus tempstatus = new clsTemplateStatus();
                tempstatus = GetTemplateStatus();
                string oldPath = Path.GetFileNameWithoutExtension(tempstatus.TempTemplatePath);
                UpdateTemplateHeader(Path.GetFileNameWithoutExtension(tempstatus.TempTemplatePath), Path.GetFileNameWithoutExtension(openFileDialog1.FileName));

                tempstatus.TempTemplatePath = tempstatus.TempTemplatePath.Replace(tempstatus.TempTemplatePath, Path.GetDirectoryName(tempstatus.TempTemplatePath)) + "\\" + Path.GetFileNameWithoutExtension(openFileDialog1.FileName) + ".xml";
                File.Copy(tempstatus.TempTemplatePath, Path.Combine((openFileDialog1.FileName).Replace(openFileDialog1.FileName, Path.GetDirectoryName(openFileDialog1.FileName)) + "\\", Path.GetFileName(tempstatus.TempTemplatePath)), true);
                tempstatus.TemplatePath = openFileDialog1.FileName;
                tempstatus.TemplateSave = "0";
                tempstatus.TemplateMode = "Edit";
                tempstatus.TemplateStatus = "0";
                tempstatus.TempTemplatePath = tempstatus.TempTemplatePath;
                SaveTemplateStatus(tempstatus);
                return true;
            }
            return false;
        }
        public bool UpdateTemplate()
        {
            clsTemplateStatus tempstatus = new clsTemplateStatus();
            tempstatus = GetTemplateStatus();
            string oldPath = Path.GetFileNameWithoutExtension(tempstatus.TempTemplatePath);
            //UpdateTemplateHeader(Path.GetFileNameWithoutExtension(tempstatus.TempTemplatePath), Path.GetFileNameWithoutExtension(tempstatus.TemplatePath));

            tempstatus.TempTemplatePath = tempstatus.TempTemplatePath.Replace(tempstatus.TempTemplatePath, Path.GetDirectoryName(tempstatus.TempTemplatePath)) + "\\" + Path.GetFileNameWithoutExtension(tempstatus.TemplatePath) + ".xml";
            File.Copy(tempstatus.TempTemplatePath, Path.Combine((tempstatus.TemplatePath).Replace(tempstatus.TemplatePath, Path.GetDirectoryName(tempstatus.TemplatePath)) + "\\", Path.GetFileName(tempstatus.TempTemplatePath)), true);
            tempstatus.TemplatePath = tempstatus.TemplatePath;
            tempstatus.TemplateSave = "0";
            tempstatus.TemplateMode = "Edit";
            tempstatus.TemplateStatus = "1";
            tempstatus.TempTemplatePath = tempstatus.TempTemplatePath;
            SaveTemplateStatus(tempstatus);

            return true;
        }

        public bool SaveTemplateStatus(clsTemplateStatus template)
        {
            string strStartupPath1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempPath" + "\\");
            if (!Directory.Exists(strStartupPath1))
                Directory.CreateDirectory(strStartupPath1);

            strStartupPath1 = strStartupPath1 + "TempLastPath.xml";
            if (File.Exists(strStartupPath1))
                File.Delete(strStartupPath1);
            XmlTextWriter objXmlTextWriter = new XmlTextWriter(strStartupPath1, System.Text.Encoding.UTF8);
            objXmlTextWriter.WriteStartDocument(true);
            objXmlTextWriter.Formatting = Formatting.Indented;
            objXmlTextWriter.Indentation = 2;

            objXmlTextWriter.WriteStartElement("Template");
            objXmlTextWriter.WriteAttributeString("TemplatePath", template.TemplatePath);
            objXmlTextWriter.WriteAttributeString("TemplateSave", template.TemplateSave);
            objXmlTextWriter.WriteAttributeString("TemplateMode", template.TemplateMode);
            objXmlTextWriter.WriteAttributeString("TemplateStatus", template.TemplateStatus);
            objXmlTextWriter.WriteAttributeString("TempTemplatePath", template.TempTemplatePath);
            objXmlTextWriter.WriteEndElement();

            objXmlTextWriter.Flush();
            objXmlTextWriter.Close();
            return true;
        }
        public bool UpdateTemplateHeader(string oldTempName, string NewTempName)
        {
            string strStartupPath1 = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\");
            if (!Directory.Exists(strStartupPath1))
                Directory.CreateDirectory(strStartupPath1);
            string strStartupPath = strStartupPath1 + oldTempName + ".xml";

            XmlDocument doc = new XmlDocument();

            if (File.Exists(strStartupPath)) //update
            {
                doc.Load(strStartupPath);

                XmlNodeList xNodeList = doc.GetElementsByTagName("template");

                for (int i = 0; i < xNodeList.Count; i++)
                {

                    XmlAttributeCollection xmlattrc = xNodeList[i].Attributes;

                    //XML Attribute Name and Value returned
                    //xmlattrc[0].Name = pobjTemplatexml.ToString();
                    xmlattrc[0].Value = NewTempName;

                }


                doc.Save(strStartupPath);

                System.IO.FileInfo fi = new System.IO.FileInfo(strStartupPath);
                // Check if file is there  
                if (fi.Exists)
                {
                    try
                    {
                        clsTemplateLabelXmlwork objtemp = new clsTemplateLabelXmlwork();
                        // Move file with a new name. Hence renamed.  
                        string path = @strStartupPath.Replace(strStartupPath, Path.GetDirectoryName(strStartupPath1)) + "\\" + NewTempName + ".xml";
                        if (File.Exists(path))
                        {
                            File.Delete(path);
                        }
                        fi.MoveTo(path);
                        CreateTempFolder(NewTempName);

                    }
                    catch (Exception ex)
                    {

                        throw ex;
                    }
                }
            }
            return true;
        }
        public bool DeleteAppTemplate(String tempName)
        {
            string strxmlStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TemplateImageslist" + "\\" + tempName.ToString() + ".xml");
            string strpdfStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ZPLFormat" + "\\" + tempName.ToString() + ".pdf");

            string strpdfImgStartupPath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "PdfImagesList" + "\\" + tempName.ToString() + "\\" + tempName.ToString() + ".Tiff");

            string originalimagepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "OriginalImages" + "\\" + tempName.ToString());
            string resizeimagepath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "ResizeImages" + "\\" + tempName.ToString());

            string tempImage = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "TempImage" + "\\" + tempName.ToString());

            if (File.Exists(strxmlStartupPath))
            {
                File.Delete(strxmlStartupPath); //delete xml file
            }
            if (File.Exists(strpdfStartupPath))
            {
                File.Delete(strpdfStartupPath); //delete pdf file
            }
            if (File.Exists(strpdfImgStartupPath))
            {
                System.GC.Collect();
                System.GC.WaitForPendingFinalizers();
                File.Delete(strpdfImgStartupPath); //delete pdfimage file
            }
            if (Directory.Exists(originalimagepath))
            {
                Directory.Delete(originalimagepath, true);
            }
            if (Directory.Exists(resizeimagepath))
            {
                Directory.Delete(resizeimagepath, true);
            }
            if (Directory.Exists(tempImage))
            {
                Directory.Delete(tempImage, true);
            }
            return true;
        }
        public string CreateTempFolder(string tempName)
        {
            try
            {
                string distranstype = String.Empty;
                string dispwidth = String.Empty;
                string dispheight = String.Empty;
                string strTransTypeFilePath = String.Empty;
                clsTemplateLabelXmlwork lobjtemplatenames = new clsTemplateLabelXmlwork();
                List<clsTemplateLabelXmlwork> objfieldlist = new List<clsTemplateLabelXmlwork>();
                List<QuickBooksField> objheaderfield = new List<QuickBooksField>();

                var headerfieldlist = lobjtemplatenames.GetTemplateHeaderInfo(tempName);

                foreach (QuickBooksField fields in headerfieldlist)
                {
                    if (fields.ItemFieldId == 1)
                    {
                        distranstype = fields.ItemFieldName;
                    }
                    else if (fields.ItemFieldId == 2)
                    {
                        dispwidth = fields.ItemFieldName;
                    }
                    else if (fields.ItemFieldId == 3)
                    {
                        dispheight = fields.ItemFieldName;
                    }

                }

                objfieldlist = lobjtemplatenames.GetFieldPropertiesList(tempName.ToString(), string.Empty);
                //Get property fields list
                List<QuickBooksField> Itemfieldlist = new List<QuickBooksField>();
                System.IO.DirectoryInfo dirtransxml = new DirectoryInfo(Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Transxml" + "\\"));
                if (dirtransxml.Exists)
                {
                    strTransTypeFilePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "Transxml" + "\\" + distranstype.ToString() + ".xml");
                }
                else
                {
                    strTransTypeFilePath = Environment.ExpandEnvironmentVariables(@"%appdata%\" + "QuickBooks Label Connector" + "\\" + "FieldPropertiesxml" + "\\" + distranstype.ToString() + ".xml");
                }
                //strTransTypeFilePath = System.Windows.Forms.Application.StartupPath + @"\" + "FieldPropertiesxml" + "\\" + txtdistranstype.Text.ToString() + ".xml";
                if (File.Exists(strTransTypeFilePath))
                {
                    Itemfieldlist = lobjtemplatenames.GetItemFieldListfromxml(strTransTypeFilePath); //Get field list
                }
                //create pdf from xml
                lobjtemplatenames.CreateUpdateTemplatePDF(tempName, dispwidth.ToString(), dispheight.ToString(), dispheight.ToString(), string.Empty, objfieldlist, Itemfieldlist);
                return distranstype;
            }
            catch (Exception EX)
            {

                MessageBox.Show(EX.Message, "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return "";
            }
        }

        public static ArrayList GetItemBinMultiList(string ItemName)
        {
            ArrayList listBin = new ArrayList();
            QBSessionManager lQBSessionManager = null;
            IMsgSetResponse lMsgResponse = default(IMsgSetResponse);

            try
            {
                lQBSessionManager = ModGlobal.QBGlobalSessionManager;

                IMsgSetRequest lMsgRequest = lQBSessionManager.CreateMsgSetRequest("US", Convert.ToInt16(ConfigurationManager.AppSettings["QBXMLVersion"]), 0);

                lMsgRequest.Attributes.OnError = ENRqOnError.roeContinue;

                IItemSitesQuery ItemSitesQueryRq = lMsgRequest.AppendItemSitesQueryRq();

                ItemSitesQueryRq.ORItemSitesQuery.ItemSitesFilter.ORItemSitesFilter.ItemSiteFilter.ItemFilter.ORItemFilter.FullNameList.Add(ItemName);

                IItemQuery ItemQueryRq = lMsgRequest.AppendItemQueryRq();

                ItemQueryRq.ORListQuery.FullNameList.Add(ItemName);

                lQBSessionManager.OpenConnection("", "Label Connector");
                lQBSessionManager.BeginSession("", ENOpenMode.omDontCare);
                lMsgResponse = lQBSessionManager.DoRequests(lMsgRequest);
                IResponseList itemResponseList = lMsgResponse.ResponseList;

                IResponse itemResponse = itemResponseList.GetAt(0);
                IResponse itemResponse1 = itemResponseList.GetAt(1);

                ENResponseType responseType = (ENResponseType)itemResponse.Type.GetValue();

                ENResponseType responseType1 = (ENResponseType)itemResponse1.Type.GetValue();

                IORItemRetList QBItemList1 = (IORItemRetList)itemResponse1.Detail;

                IItemSitesRetList QBItemList = (IItemSitesRetList)itemResponse.Detail;

                if (QBItemList != null)
                {
                    for (int i = 0; i < QBItemList.Count; i++)
                    {
                        if (QBItemList.GetAt(i).InventorySiteLocationRef != null)
                        {
                            string Itembin = "";
                            var ItemAssemblyORInventory = QBItemList.GetAt(i).ORItemAssemblyORInventory;
                            char[] spearator = { ':' };
                            if (ItemAssemblyORInventory.ItemInventoryRef != null)
                            {
                                String[] strlist = QBItemList.GetAt(i).InventorySiteLocationRef.FullName.GetValue().Split(spearator);
                                Itembin = strlist[1];
                                if (Itembin != "Unassigned")
                                    listBin.Add(Itembin);
                            }
                            else if (ItemAssemblyORInventory.ItemInventoryAssemblyRef != null)
                            {
                                String[] strlist = QBItemList.GetAt(i).InventorySiteLocationRef.FullName.GetValue().Split(spearator);
                                Itembin = strlist[1];
                                if (Itembin != "Unassigned")
                                    listBin.Add(Itembin);
                            }
                        }
                    }
                }
            }
            catch (Exception Ex)
            {
                if (Ex.Message == "Could not start QuickBooks.")
                {
                    //MessageBox.Show("Unable to get 'Bin', 'Site', 'Qty On Hand' value. Please start QuickBooks.", "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return listBin;
                }
                else
                {
                    MessageBox.Show(Ex.Message, "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return listBin;
                }

            }
            finally
            {
                if ((lQBSessionManager != null))
                {
                    lQBSessionManager.EndSession();
                    lQBSessionManager.CloseConnection();
                }
            }
            return listBin;
        }
        public static List<clsItemBin> GetItemBin(string ItemName)
        {
            List<clsItemBin> listBin = new List<clsItemBin>();
            QBSessionManager lQBSessionManager = null;
            IMsgSetResponse lMsgResponse = default(IMsgSetResponse);

            try
            {
                lQBSessionManager = ModGlobal.QBGlobalSessionManager;

                IMsgSetRequest lMsgRequest = lQBSessionManager.CreateMsgSetRequest("US", Convert.ToInt16(ConfigurationManager.AppSettings["QBXMLVersion"]), 0);

                lMsgRequest.Attributes.OnError = ENRqOnError.roeContinue;

                IItemSitesQuery ItemSitesQueryRq = lMsgRequest.AppendItemSitesQueryRq();

                ItemSitesQueryRq.ORItemSitesQuery.ItemSitesFilter.ORItemSitesFilter.ItemSiteFilter.ItemFilter.ORItemFilter.FullNameList.Add(ItemName);

                IItemQuery ItemQueryRq = lMsgRequest.AppendItemQueryRq();

                ItemQueryRq.ORListQuery.FullNameList.Add(ItemName);

                lQBSessionManager.OpenConnection("", "Label Connector");
                lQBSessionManager.BeginSession("", ENOpenMode.omDontCare);
                lMsgResponse = lQBSessionManager.DoRequests(lMsgRequest);
                IResponseList itemResponseList = lMsgResponse.ResponseList;

                IResponse itemResponse = itemResponseList.GetAt(0);
                IResponse itemResponse1 = itemResponseList.GetAt(1);

                ENResponseType responseType = (ENResponseType)itemResponse.Type.GetValue();

                ENResponseType responseType1 = (ENResponseType)itemResponse1.Type.GetValue();

                IORItemRetList QBItemList1 = (IORItemRetList)itemResponse1.Detail;

                IItemSitesRetList QBItemList = (IItemSitesRetList)itemResponse.Detail;

                if (QBItemList != null)
                {
                    for (int i = 0; i < QBItemList.Count; i++)
                    {
                        if (QBItemList.GetAt(i).InventorySiteLocationRef != null)
                        {
                            clsItemBin Itembin = new clsItemBin();
                            var ItemAssemblyORInventory = QBItemList.GetAt(i).ORItemAssemblyORInventory;
                            char[] spearator = { ':' };
                            if (ItemAssemblyORInventory.ItemInventoryRef != null)
                            {
                                String[] strlist = QBItemList.GetAt(i).InventorySiteLocationRef.FullName.GetValue().Split(spearator);

                                Itembin.Site = strlist[0];
                                Itembin.Bin = strlist[1];
                                Itembin.QtyOnHand = (QBItemList.GetAt(i).QuantityOnHand != null ? QBItemList.GetAt(i).QuantityOnHand.GetValue() : 0).ToString();
                                Itembin.SiteBinRefID = QBItemList.GetAt(i).InventorySiteLocationRef.ListID.GetValue();
                                listBin.Add(Itembin);
                            }
                            else if (ItemAssemblyORInventory.ItemInventoryAssemblyRef != null)
                            {
                                String[] strlist = QBItemList.GetAt(i).InventorySiteLocationRef.FullName.GetValue().Split(spearator);
                                Itembin.Site = strlist[0];
                                Itembin.Bin = strlist[1];
                                Itembin.QtyOnHand = (QBItemList.GetAt(i).QuantityOnHand != null ? QBItemList.GetAt(i).QuantityOnHand.GetValue() : 0).ToString();
                                Itembin.SiteBinRefID = QBItemList.GetAt(i).InventorySiteLocationRef.ListID.GetValue();
                                listBin.Add(Itembin);
                            }
                        }
                    }
                }
            }
            catch (Exception Ex)
            {
                if (Ex.Message == "Could not start QuickBooks.")
                {
                    MessageBox.Show("Unable to get 'Bin', 'Site', 'Qty On Hand' value. Please start QuickBooks.", "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return listBin;
                }
                else
                {
                    MessageBox.Show(Ex.Message, "Eorr", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return listBin;
                }

            }
            finally
            {
                if ((lQBSessionManager != null))
                {
                    lQBSessionManager.EndSession();
                    lQBSessionManager.CloseConnection();
                }
            }
            return listBin;
        }
    }
}
